import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'

// task preBuild excuted before android build 
preBuild {
    println '[task preBuild] do it before build'
    println "Package name : " + PROP_PACKAGE_NAME
    println "Version code : " + PROP_VERSION_CODE
    println "App version DEV : " + PROP_APPVER_DEV
    println "App version QA : " + PROP_APPVER_QA
    println "App version LIVE : " + PROP_APPVER_LIVE
}

task makeAsset(type: Exec) {
    println '[task makeAsset]'

//    workingDir "${buildDir}/../bat"
//    commandLine 'MakeAssetFull.bat'
}

// task android build
android {
    println '[task android]'

    ndkVersion '17.2.4988734' // e.g.,  ndkVersion "21.3.6528147"

    assetPacks = [":asset_pack_01"]

    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    // SYMBOL_TABLE | FULL
    // android.buildTypes.release.ndk.debugSymbolLevel = "FULL"

    defaultConfig {
        applicationId PROP_PACKAGE_NAME
		versionCode PROP_VERSION_CODE.toInteger()
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION

        multiDexEnabled true

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    targets 'cocos2dlua'

                    // Android-21 미만 기기에서 실행하기 위함
                    arguments 'APP_PLATFORM=android-16'

                    // cpp flags
                    cppFlags.addAll(PROP_CPP_FLAGS.split(':').collect { it as String })

                    // module path
                    def module_paths = [project.file("../../../cocos2d-x").absolutePath,
                                        project.file("../../../cocos2d-x/cocos").absolutePath,
                                        project.file("../../../cocos2d-x/external").absolutePath,
                                        project.file("../../../libraries/sdk_binder/android/jni").absolutePath
                                        ]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect { it.replaceAll('\\\\', '/') }
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    } else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    // processors
                    arguments '-j' + Runtime.runtime.availableProcessors()

                    // abi
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect { it as String })
                }
            }
        }
    }

    // productFlavors or buildType 에 따른 개별적인 source 설정 가능
    // favors + buildType 가능
    sourceSets{

        // demension platform
        google {
            java.srcDirs = ["src/main", "src/google"]
            res.srcDirs = ["res/common", "res/live"]
        }
//        xsolla {
//            java.srcDirs = ["src/main", "src/xsolla"]
//            res.srcDirs = ["res/common", "res/live"]
//        }
//        cafebazaar {
//            java.srcDirs = ["src/main", "src/cafebazaar"]
//            res.srcDirs = ["res/common", "res/live"]
//        }
        onestore {
            java.srcDirs = ["src/main", "src/onestore"]
            res.srcDirs = ["res/common", "res/onestore"]
        }

        // demension server
        dev {
            res.srcDirs = ["res/common", "res/dev"]
        }
        qa {
            res.srcDirs = ["res/common", "res/qa"]
        }
        liveqa {
            res.srcDirs = ["res/common", "res/liveqa"]
        }
        live {
            //res.srcDirs = ["res/common", "res/live"]
        }

        // demension asset
        market {
            assets.srcDir "../../../assets/100mb"
        }
        full {
            assets.srcDir "../../../assets/full"
        }


        main {
            manifest.srcFile "./AndroidManifest.xml"         
        }
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "../jni/Android.mk"
            }
        }
    }

    signingConfigs {
        // live upload 용 릴리즈키
        upload_keystore {
            storeFile file(UPLOAD_RELEASE_STORE_FILE)
            storePassword UPLOAD_RELEASE_STORE_PASSWORD
            keyAlias UPLOAD_RELEASE_KEY_ALIAS
            keyPassword UPLOAD_RELEASE_KEY_PASSWORD
        }
        // test 용 릴리즈키
        keystore {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
        // 디버그키
        debug_keystore {
            storeFile file(DEBUG_STORE_FILE)
            storePassword DEBUG_STORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        }
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.

    flavorDimensions "platform", "server", "asset"

    /**
    * The productFlavors {} block is where you can configure multiple product
    * flavors. This allows you to create different versions of your app
     * that can
    * override defaultConfig {} with their own settings. Product flavors are
    * optional, and the build system does not create them by default.
    */
    productFlavors {
        // dimension platform
        google {
            dimension "platform"
            applicationIdSuffix ".kr"
        }
//        xsolla {
//            dimension "platform"
//            applicationIdSuffix ".kr"
//        }
//        cafebazaar {
//            dimension "platform"
//            applicationIdSuffix ".kr"
//            externalNativeBuild {
//                ndkBuild {
//                    cppFlags.add("-DIS_CAFE_BAZAAR_BUILD=true")
//                }
//            }
//        }
        onestore {
            dimension "platform"
            applicationIdSuffix ".onestore"
        }

        // dimension server
        dev{
            dimension "server"
            versionName PROP_APPVER_DEV
//            applicationIdSuffix ".kr"
            signingConfig signingConfigs.keystore
            externalNativeBuild {
                ndkBuild {
                    cppFlags.add("-DTARGET_SERVER=SERVER_DEV")
                    cppFlags.add("-DMAJOR_VER=NUM_0")
                    cppFlags.add("-DMINOR_VER=NUM_8")
                    cppFlags.add("-DBUILD_VER=NUM_3")
                    cppFlags.add("-DUSE_LUA_EXT=false")
                    cppFlags.add("-DIS_TEST_MODE=true")
                }
            }
        }
        qa{
            dimension "server"
            versionName PROP_APPVER_QA
//            applicationIdSuffix ".kr"
            signingConfig signingConfigs.keystore
            externalNativeBuild {
                ndkBuild {
                    cppFlags.add("-DTARGET_SERVER=SERVER_QA")
                    cppFlags.add("-DMAJOR_VER=NUM_0")
                    cppFlags.add("-DMINOR_VER=NUM_8")
                    cppFlags.add("-DBUILD_VER=NUM_3")
                    cppFlags.add("-DUSE_LUA_EXT=false")
                    cppFlags.add("-DIS_TEST_MODE=true")
                }
            }
        }
        liveqa{
            dimension "server"
            versionName PROP_APPVER_LIVE
            signingConfig signingConfigs.keystore
            //signingConfig signingConfigs.upload_keystore
            externalNativeBuild {
                ndkBuild {
                    cppFlags.add("-DTARGET_SERVER=SERVER_QA")
                    cppFlags.add("-DMAJOR_VER=NUM_1")
                    cppFlags.add("-DMINOR_VER=NUM_3")
                    cppFlags.add("-DBUILD_VER=NUM_3")
                    cppFlags.add("-DUSE_LUA_EXT=false")
                    cppFlags.add("-DIS_TEST_MODE=true")
                }
            }
        }
        live{
            dimension "server"
            versionName PROP_APPVER_LIVE
            signingConfig signingConfigs.upload_keystore
            externalNativeBuild {
                ndkBuild {
                    cppFlags.add("-DTARGET_SERVER=SERVER_LIVE")
                    cppFlags.add("-DMAJOR_VER=NUM_1")
                    cppFlags.add("-DMINOR_VER=NUM_3")
                    cppFlags.add("-DBUILD_VER=NUM_3")
                    cppFlags.add("-DUSE_LUA_EXT=false")
                    cppFlags.add("-DIS_TEST_MODE=false")
                    cppFlags.add("-DLUA_DEBUG=1")
                }
            }
        }

        //dimension asset
        market{
            dimension "asset"
            externalNativeBuild {
                ndkBuild {
                    cppFlags.add("-DUSE_PATCH=true")
                    cppFlags.add("-DUSE_OBB=true")
                }
            }
        }
        full{
            dimension "asset"
            externalNativeBuild {
                ndkBuild {
                    cppFlags.add("-DUSE_PATCH=true")
                    cppFlags.add("-DUSE_OBB=false")
                }
            }
        }        
    }

    buildTypes {
        release {
            // signingConfig initialize
            signingConfig null
            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt', 'proguard-project.txt'

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                    cppFlags.add("-DNDEBUG")
                }
            }
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
            }
        }
        debug {
            // signingConfig initialize
            signingConfig null
            minifyEnabled false
            debuggable true

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                    cppFlags.add("-DCOCOS2D_DEBUG=1")
                }
            }
        }
    }

    configurations {
        all*.exclude group: 'com.android.support', module: 'support-annotations'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    // apk 이름 변경 : "dvm_google_1.2.3_vc43_live_full_release.apk
    applicationVariants.all { variant ->
        variant.outputs.all {
            def flavors = variant.productFlavors

            // 여기서 index는 dimension 순서를 의미
            def platform_flavor = flavors[0].name // google or xsolla or cafebazaar or onestore
            def server_flavor = flavors[1].name  // live or dev or qa
            def asset_flavor = flavors[2].name // market or full
            def version = variant.versionName
            def versionCode = defaultConfig.versionCode
            def buildType = variant.buildType.name

            outputFileName = "dvm_${platform_flavor}_${version}_vc${versionCode}_${server_flavor}_${asset_flavor}_${buildType}_${applicationId}.apk"
        }
    }
} // end:android

allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs "libs"
        }
    }
    dependencies {
        // support Kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

        // @multidex below Android api 21 (5.0 lolipop)
        implementation 'androidx.multidex:multidex:2.0.1'

        // @cocos2d-x
        implementation project(':libcocos2dx')

        // @apk-expansion
        implementation project(':downloader_library')

        // perplesdk dependencies
        implementation project(':sdk_binder')

        implementation 'androidx.fragment:fragment:1.3.5'
    }
}
// @firebase
apply plugin: 'com.google.gms.google-services'