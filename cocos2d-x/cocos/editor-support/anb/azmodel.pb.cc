// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: azmodel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "azmodel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace azModel {

namespace {

const ::google::protobuf::Descriptor* Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Type_reflection_ = NULL;
const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vertex2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vertex2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bone2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bone2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sprite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bitmap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bitmap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform2D_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BLEND_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SHAPE_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_azmodel_2eproto() {
  protobuf_AddDesc_azmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "azmodel.proto");
  GOOGLE_CHECK(file != NULL);
  Type_descriptor_ = file->message_type(0);
  static const int Type_offsets_[1] = {
  };
  Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Type_descriptor_,
      Type::default_instance_,
      Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Type));
  Base_descriptor_ = file->message_type(1);
  static const int Base_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, rtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, parent_rtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, name_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  Vertex2D_descriptor_ = file->message_type(2);
  static const int Vertex2D_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, bone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, bone_influence_),
  };
  Vertex2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vertex2D_descriptor_,
      Vertex2D::default_instance_,
      Vertex2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vertex2D));
  Bone2D_descriptor_ = file->message_type(3);
  static const int Bone2D_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bone2D, scale_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bone2D, scale_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bone2D, rotate_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bone2D, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bone2D, position_y_),
  };
  Bone2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bone2D_descriptor_,
      Bone2D::default_instance_,
      Bone2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bone2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bone2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bone2D));
  Sprite_descriptor_ = file->message_type(4);
  static const int Sprite_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, bottom_),
  };
  Sprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sprite_descriptor_,
      Sprite::default_instance_,
      Sprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sprite));
  Bitmap_descriptor_ = file->message_type(5);
  static const int Bitmap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitmap, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitmap, sprite_list_),
  };
  Bitmap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bitmap_descriptor_,
      Bitmap::default_instance_,
      Bitmap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitmap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bitmap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bitmap));
  Transform2D_descriptor_ = file->message_type(6);
  static const int Transform2D_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, scale_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, scale_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, rotate_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, flip_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, flip_v_),
  };
  Transform2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transform2D_descriptor_,
      Transform2D::default_instance_,
      Transform2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transform2D));
  BLEND_MODE_descriptor_ = file->enum_type(0);
  SHAPE_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_azmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Type_descriptor_, &Type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vertex2D_descriptor_, &Vertex2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bone2D_descriptor_, &Bone2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sprite_descriptor_, &Sprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bitmap_descriptor_, &Bitmap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transform2D_descriptor_, &Transform2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_azmodel_2eproto() {
  delete Type::default_instance_;
  delete Type_reflection_;
  delete Base::default_instance_;
  delete Base_reflection_;
  delete Vertex2D::default_instance_;
  delete Vertex2D_reflection_;
  delete Bone2D::default_instance_;
  delete Bone2D_reflection_;
  delete Sprite::default_instance_;
  delete Sprite_reflection_;
  delete Bitmap::default_instance_;
  delete Bitmap_reflection_;
  delete Transform2D::default_instance_;
  delete Transform2D_reflection_;
}

void protobuf_AddDesc_azmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\razmodel.proto\022\007azModel\"\020\n\004Type*\010\010\001\020\200\200\200"
    "\200\002\"T\n\004Base\022\017\n\004rtid\030\001 \001(\004:\0010\022\026\n\013parent_rt"
    "id\030\002 \001(\004:\0010\022\023\n\005apply\030\003 \001(\010:\004true\022\016\n\004name"
    "\030\004 \001(\t:\000\"j\n\010Vertex2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
    "(\002\022\t\n\001u\030\003 \001(\002\022\t\n\001v\030\004 \001(\002\022\t\n\001c\030\005 \001(\r\022\017\n\007b"
    "one_id\030\006 \003(\r\022\026\n\016bone_influence\030\007 \003(\002\"s\n\006"
    "Bone2D\022\022\n\007scale_x\030\001 \001(\002:\0011\022\022\n\007scale_y\030\002 "
    "\001(\002:\0011\022\023\n\010rotate_z\030\005 \001(\002:\0010\022\025\n\nposition_"
    "x\030\006 \001(\002:\0010\022\025\n\nposition_y\030\007 \001(\002:\0010\"\215\001\n\006Sp"
    "rite\022\033\n\004base\030\001 \002(\0132\r.azModel.Base\022\014\n\004lef"
    "t\030\002 \001(\005\022\013\n\003top\030\003 \001(\005\022\r\n\005right\030\004 \001(\005\022\016\n\006b"
    "ottom\030\005 \001(\0052,\n\004type\022\r.azModel.Type\030\n \001(\013"
    "2\017.azModel.Sprite\"y\n\006Bitmap\022\033\n\004base\030\001 \002("
    "\0132\r.azModel.Base\022$\n\013sprite_list\030\002 \003(\0132\017."
    "azModel.Sprite2,\n\004type\022\r.azModel.Type\030\013 "
    "\001(\0132\017.azModel.Bitmap\"\203\002\n\013Transform2D\022\022\n\007"
    "scale_x\030\001 \001(\002:\0011\022\022\n\007scale_y\030\002 \001(\002:\0011\022\023\n\010"
    "offset_x\030\003 \001(\002:\0010\022\023\n\010offset_y\030\004 \001(\002:\0010\022\023"
    "\n\010rotate_z\030\005 \001(\002:\0010\022\025\n\nposition_x\030\006 \001(\002:"
    "\0010\022\025\n\nposition_y\030\007 \001(\002:\0010\022\025\n\006flip_h\030\010 \001("
    "\010:\005false\022\025\n\006flip_v\030\t \001(\010:\005false21\n\004type\022"
    "\r.azModel.Type\030\024 \001(\0132\024.azModel.Transform"
    "2D*h\n\nBLEND_MODE\022\010\n\004NONE\020\000\022\t\n\005ALPHA\020\001\022\n\n"
    "\006SCREEN\020\002\022\014\n\010MULTIPLY\020\003\022\007\n\003ADD\020\004\022\007\n\003SUB\020"
    "\005\022\013\n\007LIGHTEN\020\006\022\014\n\010OVERDRAW\020\007*!\n\nSHAPE_TY"
    "PE\022\007\n\003BOX\020\000\022\n\n\006CIRCLE\020\001", 1023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "azmodel.proto", &protobuf_RegisterTypes);
  Type::default_instance_ = new Type();
  Base::default_instance_ = new Base();
  Vertex2D::default_instance_ = new Vertex2D();
  Bone2D::default_instance_ = new Bone2D();
  Sprite::default_instance_ = new Sprite();
  Bitmap::default_instance_ = new Bitmap();
  Transform2D::default_instance_ = new Transform2D();
  Type::default_instance_->InitAsDefaultInstance();
  Base::default_instance_->InitAsDefaultInstance();
  Vertex2D::default_instance_->InitAsDefaultInstance();
  Bone2D::default_instance_->InitAsDefaultInstance();
  Sprite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::azModel::Type::default_instance(),
    10, 11, false, false,
    &::azModel::Sprite::default_instance());
  Bitmap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::azModel::Type::default_instance(),
    11, 11, false, false,
    &::azModel::Bitmap::default_instance());
  Transform2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::azModel::Type::default_instance(),
    20, 11, false, false,
    &::azModel::Transform2D::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_azmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_azmodel_2eproto {
  StaticDescriptorInitializer_azmodel_2eproto() {
    protobuf_AddDesc_azmodel_2eproto();
  }
} static_descriptor_initializer_azmodel_2eproto_;
const ::google::protobuf::EnumDescriptor* BLEND_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BLEND_MODE_descriptor_;
}
bool BLEND_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SHAPE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHAPE_TYPE_descriptor_;
}
bool SHAPE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Type::Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Type::InitAsDefaultInstance() {
}

Type::Type(const Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Type::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Type::~Type() {
  SharedDtor();
}

void Type::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}

const Type& Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_azmodel_2eproto();
  return *default_instance_;
}

Type* Type::default_instance_ = NULL;

Type* Type::New() const {
  return new Type;
}

void Type::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((8u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [1, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Type::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Type::Swap(Type* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Type_descriptor_;
  metadata.reflection = Type_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Base::kRtidFieldNumber;
const int Base::kParentRtidFieldNumber;
const int Base::kApplyFieldNumber;
const int Base::kNameFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Base::InitAsDefaultInstance() {
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Base::SharedCtor() {
  _cached_size_ = 0;
  rtid_ = GOOGLE_ULONGLONG(0);
  parent_rtid_ = GOOGLE_ULONGLONG(0);
  apply_ = true;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  SharedDtor();
}

void Base::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_azmodel_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtid_ = GOOGLE_ULONGLONG(0);
    parent_rtid_ = GOOGLE_ULONGLONG(0);
    apply_ = true;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rtid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtid_)));
          set_has_rtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent_rtid;
        break;
      }

      // optional uint64 parent_rtid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_rtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_rtid_)));
          set_has_parent_rtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply;
        break;
      }

      // optional bool apply = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_)));
          set_has_apply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 rtid = 1 [default = 0];
  if (has_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rtid(), output);
  }

  // optional uint64 parent_rtid = 2 [default = 0];
  if (has_parent_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->parent_rtid(), output);
  }

  // optional bool apply = 3 [default = true];
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->apply(), output);
  }

  // optional string name = 4 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 rtid = 1 [default = 0];
  if (has_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rtid(), target);
  }

  // optional uint64 parent_rtid = 2 [default = 0];
  if (has_parent_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->parent_rtid(), target);
  }

  // optional bool apply = 3 [default = true];
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->apply(), target);
  }

  // optional string name = 4 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 rtid = 1 [default = 0];
    if (has_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtid());
    }

    // optional uint64 parent_rtid = 2 [default = 0];
    if (has_parent_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parent_rtid());
    }

    // optional bool apply = 3 [default = true];
    if (has_apply()) {
      total_size += 1 + 1;
    }

    // optional string name = 4 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rtid()) {
      set_rtid(from.rtid());
    }
    if (from.has_parent_rtid()) {
      set_parent_rtid(from.parent_rtid());
    }
    if (from.has_apply()) {
      set_apply(from.apply());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {

  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(rtid_, other->rtid_);
    std::swap(parent_rtid_, other->parent_rtid_);
    std::swap(apply_, other->apply_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vertex2D::kXFieldNumber;
const int Vertex2D::kYFieldNumber;
const int Vertex2D::kUFieldNumber;
const int Vertex2D::kVFieldNumber;
const int Vertex2D::kCFieldNumber;
const int Vertex2D::kBoneIdFieldNumber;
const int Vertex2D::kBoneInfluenceFieldNumber;
#endif  // !_MSC_VER

Vertex2D::Vertex2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vertex2D::InitAsDefaultInstance() {
}

Vertex2D::Vertex2D(const Vertex2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vertex2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  u_ = 0;
  v_ = 0;
  c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vertex2D::~Vertex2D() {
  SharedDtor();
}

void Vertex2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vertex2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vertex2D_descriptor_;
}

const Vertex2D& Vertex2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_azmodel_2eproto();
  return *default_instance_;
}

Vertex2D* Vertex2D::default_instance_ = NULL;

Vertex2D* Vertex2D::New() const {
  return new Vertex2D;
}

void Vertex2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    u_ = 0;
    v_ = 0;
    c_ = 0u;
  }
  bone_id_.Clear();
  bone_influence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vertex2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_u;
        break;
      }

      // optional float u = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_u:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_v;
        break;
      }

      // optional float v = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_c;
        break;
      }

      // optional uint32 c = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bone_id;
        break;
      }

      // repeated uint32 bone_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_bone_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bone_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bone_id;
        if (input->ExpectTag(61)) goto parse_bone_influence;
        break;
      }

      // repeated float bone_influence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bone_influence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_bone_influence())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bone_influence())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_bone_influence;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vertex2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float u = 3;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->u(), output);
  }

  // optional float v = 4;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->v(), output);
  }

  // optional uint32 c = 5;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->c(), output);
  }

  // repeated uint32 bone_id = 6;
  for (int i = 0; i < this->bone_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->bone_id(i), output);
  }

  // repeated float bone_influence = 7;
  for (int i = 0; i < this->bone_influence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->bone_influence(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vertex2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float u = 3;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->u(), target);
  }

  // optional float v = 4;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->v(), target);
  }

  // optional uint32 c = 5;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->c(), target);
  }

  // repeated uint32 bone_id = 6;
  for (int i = 0; i < this->bone_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->bone_id(i), target);
  }

  // repeated float bone_influence = 7;
  for (int i = 0; i < this->bone_influence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->bone_influence(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vertex2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float u = 3;
    if (has_u()) {
      total_size += 1 + 4;
    }

    // optional float v = 4;
    if (has_v()) {
      total_size += 1 + 4;
    }

    // optional uint32 c = 5;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

  }
  // repeated uint32 bone_id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->bone_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bone_id(i));
    }
    total_size += 1 * this->bone_id_size() + data_size;
  }

  // repeated float bone_influence = 7;
  {
    int data_size = 0;
    data_size = 4 * this->bone_influence_size();
    total_size += 1 * this->bone_influence_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vertex2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vertex2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vertex2D::MergeFrom(const Vertex2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  bone_id_.MergeFrom(from.bone_id_);
  bone_influence_.MergeFrom(from.bone_influence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vertex2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex2D::CopyFrom(const Vertex2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex2D::IsInitialized() const {

  return true;
}

void Vertex2D::Swap(Vertex2D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(u_, other->u_);
    std::swap(v_, other->v_);
    std::swap(c_, other->c_);
    bone_id_.Swap(&other->bone_id_);
    bone_influence_.Swap(&other->bone_influence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vertex2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vertex2D_descriptor_;
  metadata.reflection = Vertex2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bone2D::kScaleXFieldNumber;
const int Bone2D::kScaleYFieldNumber;
const int Bone2D::kRotateZFieldNumber;
const int Bone2D::kPositionXFieldNumber;
const int Bone2D::kPositionYFieldNumber;
#endif  // !_MSC_VER

Bone2D::Bone2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bone2D::InitAsDefaultInstance() {
}

Bone2D::Bone2D(const Bone2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bone2D::SharedCtor() {
  _cached_size_ = 0;
  scale_x_ = 1;
  scale_y_ = 1;
  rotate_z_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bone2D::~Bone2D() {
  SharedDtor();
}

void Bone2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bone2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bone2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bone2D_descriptor_;
}

const Bone2D& Bone2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_azmodel_2eproto();
  return *default_instance_;
}

Bone2D* Bone2D::default_instance_ = NULL;

Bone2D* Bone2D::New() const {
  return new Bone2D;
}

void Bone2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scale_x_ = 1;
    scale_y_ = 1;
    rotate_z_ = 0;
    position_x_ = 0;
    position_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bone2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale_x = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_x_)));
          set_has_scale_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scale_y;
        break;
      }

      // optional float scale_y = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_y_)));
          set_has_scale_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rotate_z;
        break;
      }

      // optional float rotate_z = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotate_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotate_z_)));
          set_has_rotate_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_position_x;
        break;
      }

      // optional float position_x = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_position_y;
        break;
      }

      // optional float position_y = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bone2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float scale_x = 1 [default = 1];
  if (has_scale_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale_x(), output);
  }

  // optional float scale_y = 2 [default = 1];
  if (has_scale_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale_y(), output);
  }

  // optional float rotate_z = 5 [default = 0];
  if (has_rotate_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotate_z(), output);
  }

  // optional float position_x = 6 [default = 0];
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->position_x(), output);
  }

  // optional float position_y = 7 [default = 0];
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->position_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bone2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float scale_x = 1 [default = 1];
  if (has_scale_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale_x(), target);
  }

  // optional float scale_y = 2 [default = 1];
  if (has_scale_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale_y(), target);
  }

  // optional float rotate_z = 5 [default = 0];
  if (has_rotate_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotate_z(), target);
  }

  // optional float position_x = 6 [default = 0];
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->position_x(), target);
  }

  // optional float position_y = 7 [default = 0];
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->position_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bone2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale_x = 1 [default = 1];
    if (has_scale_x()) {
      total_size += 1 + 4;
    }

    // optional float scale_y = 2 [default = 1];
    if (has_scale_y()) {
      total_size += 1 + 4;
    }

    // optional float rotate_z = 5 [default = 0];
    if (has_rotate_z()) {
      total_size += 1 + 4;
    }

    // optional float position_x = 6 [default = 0];
    if (has_position_x()) {
      total_size += 1 + 4;
    }

    // optional float position_y = 7 [default = 0];
    if (has_position_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bone2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bone2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bone2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bone2D::MergeFrom(const Bone2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale_x()) {
      set_scale_x(from.scale_x());
    }
    if (from.has_scale_y()) {
      set_scale_y(from.scale_y());
    }
    if (from.has_rotate_z()) {
      set_rotate_z(from.rotate_z());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bone2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bone2D::CopyFrom(const Bone2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bone2D::IsInitialized() const {

  return true;
}

void Bone2D::Swap(Bone2D* other) {
  if (other != this) {
    std::swap(scale_x_, other->scale_x_);
    std::swap(scale_y_, other->scale_y_);
    std::swap(rotate_z_, other->rotate_z_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bone2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bone2D_descriptor_;
  metadata.reflection = Bone2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sprite::kBaseFieldNumber;
const int Sprite::kLeftFieldNumber;
const int Sprite::kTopFieldNumber;
const int Sprite::kRightFieldNumber;
const int Sprite::kBottomFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Sprite::kTypeFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::azModel::Type,
    ::google::protobuf::internal::MessageTypeTraits< ::azModel::Sprite >, 11, false >
  Sprite::type(kTypeFieldNumber, ::azModel::Sprite::default_instance());
Sprite::Sprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sprite::InitAsDefaultInstance() {
  base_ = const_cast< ::azModel::Base*>(&::azModel::Base::default_instance());
}

Sprite::Sprite(const Sprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sprite::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  left_ = 0;
  top_ = 0;
  right_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sprite::~Sprite() {
  SharedDtor();
}

void Sprite::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void Sprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sprite_descriptor_;
}

const Sprite& Sprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_azmodel_2eproto();
  return *default_instance_;
}

Sprite* Sprite::default_instance_ = NULL;

Sprite* Sprite::New() const {
  return new Sprite;
}

void Sprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::azModel::Base::Clear();
    }
    left_ = 0;
    top_ = 0;
    right_ = 0;
    bottom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .azModel.Base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left;
        break;
      }

      // optional int32 left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }

      // optional int32 top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_right;
        break;
      }

      // optional int32 right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bottom;
        break;
      }

      // optional int32 bottom = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .azModel.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional int32 left = 2;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // optional int32 top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->top(), output);
  }

  // optional int32 right = 4;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right(), output);
  }

  // optional int32 bottom = 5;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .azModel.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional int32 left = 2;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left(), target);
  }

  // optional int32 top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->top(), target);
  }

  // optional int32 right = 4;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right(), target);
  }

  // optional int32 bottom = 5;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .azModel.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional int32 left = 2;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 right = 4;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 bottom = 5;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sprite::MergeFrom(const Sprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::azModel::Base::MergeFrom(from.base());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sprite::CopyFrom(const Sprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sprite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Sprite::Swap(Sprite* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(right_, other->right_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sprite_descriptor_;
  metadata.reflection = Sprite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bitmap::kBaseFieldNumber;
const int Bitmap::kSpriteListFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Bitmap::kTypeFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::azModel::Type,
    ::google::protobuf::internal::MessageTypeTraits< ::azModel::Bitmap >, 11, false >
  Bitmap::type(kTypeFieldNumber, ::azModel::Bitmap::default_instance());
Bitmap::Bitmap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bitmap::InitAsDefaultInstance() {
  base_ = const_cast< ::azModel::Base*>(&::azModel::Base::default_instance());
}

Bitmap::Bitmap(const Bitmap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bitmap::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bitmap::~Bitmap() {
  SharedDtor();
}

void Bitmap::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void Bitmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bitmap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bitmap_descriptor_;
}

const Bitmap& Bitmap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_azmodel_2eproto();
  return *default_instance_;
}

Bitmap* Bitmap::default_instance_ = NULL;

Bitmap* Bitmap::New() const {
  return new Bitmap;
}

void Bitmap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::azModel::Base::Clear();
    }
  }
  sprite_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bitmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .azModel.Base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sprite_list;
        break;
      }

      // repeated .azModel.Sprite sprite_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprite_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprite_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sprite_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bitmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .azModel.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // repeated .azModel.Sprite sprite_list = 2;
  for (int i = 0; i < this->sprite_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sprite_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bitmap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .azModel.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // repeated .azModel.Sprite sprite_list = 2;
  for (int i = 0; i < this->sprite_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sprite_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bitmap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .azModel.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  // repeated .azModel.Sprite sprite_list = 2;
  total_size += 1 * this->sprite_list_size();
  for (int i = 0; i < this->sprite_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sprite_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bitmap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bitmap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bitmap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bitmap::MergeFrom(const Bitmap& from) {
  GOOGLE_CHECK_NE(&from, this);
  sprite_list_.MergeFrom(from.sprite_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::azModel::Base::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bitmap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bitmap::CopyFrom(const Bitmap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bitmap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < sprite_list_size(); i++) {
    if (!this->sprite_list(i).IsInitialized()) return false;
  }
  return true;
}

void Bitmap::Swap(Bitmap* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    sprite_list_.Swap(&other->sprite_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bitmap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bitmap_descriptor_;
  metadata.reflection = Bitmap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transform2D::kScaleXFieldNumber;
const int Transform2D::kScaleYFieldNumber;
const int Transform2D::kOffsetXFieldNumber;
const int Transform2D::kOffsetYFieldNumber;
const int Transform2D::kRotateZFieldNumber;
const int Transform2D::kPositionXFieldNumber;
const int Transform2D::kPositionYFieldNumber;
const int Transform2D::kFlipHFieldNumber;
const int Transform2D::kFlipVFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Transform2D::kTypeFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::azModel::Type,
    ::google::protobuf::internal::MessageTypeTraits< ::azModel::Transform2D >, 11, false >
  Transform2D::type(kTypeFieldNumber, ::azModel::Transform2D::default_instance());
Transform2D::Transform2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transform2D::InitAsDefaultInstance() {
}

Transform2D::Transform2D(const Transform2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transform2D::SharedCtor() {
  _cached_size_ = 0;
  scale_x_ = 1;
  scale_y_ = 1;
  offset_x_ = 0;
  offset_y_ = 0;
  rotate_z_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  flip_h_ = false;
  flip_v_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transform2D::~Transform2D() {
  SharedDtor();
}

void Transform2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Transform2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform2D_descriptor_;
}

const Transform2D& Transform2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_azmodel_2eproto();
  return *default_instance_;
}

Transform2D* Transform2D::default_instance_ = NULL;

Transform2D* Transform2D::New() const {
  return new Transform2D;
}

void Transform2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scale_x_ = 1;
    scale_y_ = 1;
    offset_x_ = 0;
    offset_y_ = 0;
    rotate_z_ = 0;
    position_x_ = 0;
    position_y_ = 0;
    flip_h_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flip_v_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transform2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale_x = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_x_)));
          set_has_scale_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scale_y;
        break;
      }

      // optional float scale_y = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_y_)));
          set_has_scale_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_offset_x;
        break;
      }

      // optional float offset_x = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
          set_has_offset_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_offset_y;
        break;
      }

      // optional float offset_y = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
          set_has_offset_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rotate_z;
        break;
      }

      // optional float rotate_z = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotate_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotate_z_)));
          set_has_rotate_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_position_x;
        break;
      }

      // optional float position_x = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_position_y;
        break;
      }

      // optional float position_y = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flip_h;
        break;
      }

      // optional bool flip_h = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_h_)));
          set_has_flip_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_flip_v;
        break;
      }

      // optional bool flip_v = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_v_)));
          set_has_flip_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transform2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float scale_x = 1 [default = 1];
  if (has_scale_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale_x(), output);
  }

  // optional float scale_y = 2 [default = 1];
  if (has_scale_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale_y(), output);
  }

  // optional float offset_x = 3 [default = 0];
  if (has_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offset_x(), output);
  }

  // optional float offset_y = 4 [default = 0];
  if (has_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset_y(), output);
  }

  // optional float rotate_z = 5 [default = 0];
  if (has_rotate_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotate_z(), output);
  }

  // optional float position_x = 6 [default = 0];
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->position_x(), output);
  }

  // optional float position_y = 7 [default = 0];
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->position_y(), output);
  }

  // optional bool flip_h = 8 [default = false];
  if (has_flip_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->flip_h(), output);
  }

  // optional bool flip_v = 9 [default = false];
  if (has_flip_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flip_v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transform2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float scale_x = 1 [default = 1];
  if (has_scale_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale_x(), target);
  }

  // optional float scale_y = 2 [default = 1];
  if (has_scale_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale_y(), target);
  }

  // optional float offset_x = 3 [default = 0];
  if (has_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offset_x(), target);
  }

  // optional float offset_y = 4 [default = 0];
  if (has_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offset_y(), target);
  }

  // optional float rotate_z = 5 [default = 0];
  if (has_rotate_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotate_z(), target);
  }

  // optional float position_x = 6 [default = 0];
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->position_x(), target);
  }

  // optional float position_y = 7 [default = 0];
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->position_y(), target);
  }

  // optional bool flip_h = 8 [default = false];
  if (has_flip_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->flip_h(), target);
  }

  // optional bool flip_v = 9 [default = false];
  if (has_flip_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flip_v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transform2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale_x = 1 [default = 1];
    if (has_scale_x()) {
      total_size += 1 + 4;
    }

    // optional float scale_y = 2 [default = 1];
    if (has_scale_y()) {
      total_size += 1 + 4;
    }

    // optional float offset_x = 3 [default = 0];
    if (has_offset_x()) {
      total_size += 1 + 4;
    }

    // optional float offset_y = 4 [default = 0];
    if (has_offset_y()) {
      total_size += 1 + 4;
    }

    // optional float rotate_z = 5 [default = 0];
    if (has_rotate_z()) {
      total_size += 1 + 4;
    }

    // optional float position_x = 6 [default = 0];
    if (has_position_x()) {
      total_size += 1 + 4;
    }

    // optional float position_y = 7 [default = 0];
    if (has_position_y()) {
      total_size += 1 + 4;
    }

    // optional bool flip_h = 8 [default = false];
    if (has_flip_h()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool flip_v = 9 [default = false];
    if (has_flip_v()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transform2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transform2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transform2D::MergeFrom(const Transform2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale_x()) {
      set_scale_x(from.scale_x());
    }
    if (from.has_scale_y()) {
      set_scale_y(from.scale_y());
    }
    if (from.has_offset_x()) {
      set_offset_x(from.offset_x());
    }
    if (from.has_offset_y()) {
      set_offset_y(from.offset_y());
    }
    if (from.has_rotate_z()) {
      set_rotate_z(from.rotate_z());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_flip_h()) {
      set_flip_h(from.flip_h());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flip_v()) {
      set_flip_v(from.flip_v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transform2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform2D::CopyFrom(const Transform2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform2D::IsInitialized() const {

  return true;
}

void Transform2D::Swap(Transform2D* other) {
  if (other != this) {
    std::swap(scale_x_, other->scale_x_);
    std::swap(scale_y_, other->scale_y_);
    std::swap(offset_x_, other->offset_x_);
    std::swap(offset_y_, other->offset_y_);
    std::swap(rotate_z_, other->rotate_z_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(flip_h_, other->flip_h_);
    std::swap(flip_v_, other->flip_v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transform2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform2D_descriptor_;
  metadata.reflection = Transform2D_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace azModel

// @@protoc_insertion_point(global_scope)
