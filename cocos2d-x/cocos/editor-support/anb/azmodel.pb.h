// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: azmodel.proto

#ifndef PROTOBUF_azmodel_2eproto__INCLUDED
#define PROTOBUF_azmodel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace azModel {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_azmodel_2eproto();
void protobuf_AssignDesc_azmodel_2eproto();
void protobuf_ShutdownFile_azmodel_2eproto();

class Type;
class Base;
class Vertex2D;
class Bone2D;
class Sprite;
class Bitmap;
class Transform2D;

enum BLEND_MODE {
  NONE = 0,
  ALPHA = 1,
  SCREEN = 2,
  MULTIPLY = 3,
  ADD = 4,
  SUB = 5,
  LIGHTEN = 6,
  OVERDRAW = 7
};
bool BLEND_MODE_IsValid(int value);
const BLEND_MODE BLEND_MODE_MIN = NONE;
const BLEND_MODE BLEND_MODE_MAX = OVERDRAW;
const int BLEND_MODE_ARRAYSIZE = BLEND_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* BLEND_MODE_descriptor();
inline const ::std::string& BLEND_MODE_Name(BLEND_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    BLEND_MODE_descriptor(), value);
}
inline bool BLEND_MODE_Parse(
    const ::std::string& name, BLEND_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BLEND_MODE>(
    BLEND_MODE_descriptor(), name, value);
}
enum SHAPE_TYPE {
  BOX = 0,
  CIRCLE = 1
};
bool SHAPE_TYPE_IsValid(int value);
const SHAPE_TYPE SHAPE_TYPE_MIN = BOX;
const SHAPE_TYPE SHAPE_TYPE_MAX = CIRCLE;
const int SHAPE_TYPE_ARRAYSIZE = SHAPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SHAPE_TYPE_descriptor();
inline const ::std::string& SHAPE_TYPE_Name(SHAPE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SHAPE_TYPE_descriptor(), value);
}
inline bool SHAPE_TYPE_Parse(
    const ::std::string& name, SHAPE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SHAPE_TYPE>(
    SHAPE_TYPE_descriptor(), name, value);
}
// ===================================================================

class Type : public ::google::protobuf::Message {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Type& default_instance();

  void Swap(Type* other);

  // implements Message ----------------------------------------------

  Type* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Type)
  // @@protoc_insertion_point(class_scope:azModel.Type)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_azmodel_2eproto();
  friend void protobuf_AssignDesc_azmodel_2eproto();
  friend void protobuf_ShutdownFile_azmodel_2eproto();

  void InitAsDefaultInstance();
  static Type* default_instance_;
};
// -------------------------------------------------------------------

class Base : public ::google::protobuf::Message {
 public:
  Base();
  virtual ~Base();

  Base(const Base& from);

  inline Base& operator=(const Base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Base& default_instance();

  void Swap(Base* other);

  // implements Message ----------------------------------------------

  Base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Base& from);
  void MergeFrom(const Base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rtid = 1 [default = 0];
  inline bool has_rtid() const;
  inline void clear_rtid();
  static const int kRtidFieldNumber = 1;
  inline ::google::protobuf::uint64 rtid() const;
  inline void set_rtid(::google::protobuf::uint64 value);

  // optional uint64 parent_rtid = 2 [default = 0];
  inline bool has_parent_rtid() const;
  inline void clear_parent_rtid();
  static const int kParentRtidFieldNumber = 2;
  inline ::google::protobuf::uint64 parent_rtid() const;
  inline void set_parent_rtid(::google::protobuf::uint64 value);

  // optional bool apply = 3 [default = true];
  inline bool has_apply() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 3;
  inline bool apply() const;
  inline void set_apply(bool value);

  // optional string name = 4 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:azModel.Base)
 private:
  inline void set_has_rtid();
  inline void clear_has_rtid();
  inline void set_has_parent_rtid();
  inline void clear_has_parent_rtid();
  inline void set_has_apply();
  inline void clear_has_apply();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 rtid_;
  ::google::protobuf::uint64 parent_rtid_;
  ::std::string* name_;
  bool apply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_azmodel_2eproto();
  friend void protobuf_AssignDesc_azmodel_2eproto();
  friend void protobuf_ShutdownFile_azmodel_2eproto();

  void InitAsDefaultInstance();
  static Base* default_instance_;
};
// -------------------------------------------------------------------

class Vertex2D : public ::google::protobuf::Message {
 public:
  Vertex2D();
  virtual ~Vertex2D();

  Vertex2D(const Vertex2D& from);

  inline Vertex2D& operator=(const Vertex2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex2D& default_instance();

  void Swap(Vertex2D* other);

  // implements Message ----------------------------------------------

  Vertex2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vertex2D& from);
  void MergeFrom(const Vertex2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float u = 3;
  inline bool has_u() const;
  inline void clear_u();
  static const int kUFieldNumber = 3;
  inline float u() const;
  inline void set_u(float value);

  // optional float v = 4;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 4;
  inline float v() const;
  inline void set_v(float value);

  // optional uint32 c = 5;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 5;
  inline ::google::protobuf::uint32 c() const;
  inline void set_c(::google::protobuf::uint32 value);

  // repeated uint32 bone_id = 6;
  inline int bone_id_size() const;
  inline void clear_bone_id();
  static const int kBoneIdFieldNumber = 6;
  inline ::google::protobuf::uint32 bone_id(int index) const;
  inline void set_bone_id(int index, ::google::protobuf::uint32 value);
  inline void add_bone_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bone_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bone_id();

  // repeated float bone_influence = 7;
  inline int bone_influence_size() const;
  inline void clear_bone_influence();
  static const int kBoneInfluenceFieldNumber = 7;
  inline float bone_influence(int index) const;
  inline void set_bone_influence(int index, float value);
  inline void add_bone_influence(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bone_influence() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bone_influence();

  // @@protoc_insertion_point(class_scope:azModel.Vertex2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_u();
  inline void clear_has_u();
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_c();
  inline void clear_has_c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float u_;
  float v_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bone_id_;
  ::google::protobuf::RepeatedField< float > bone_influence_;
  ::google::protobuf::uint32 c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_azmodel_2eproto();
  friend void protobuf_AssignDesc_azmodel_2eproto();
  friend void protobuf_ShutdownFile_azmodel_2eproto();

  void InitAsDefaultInstance();
  static Vertex2D* default_instance_;
};
// -------------------------------------------------------------------

class Bone2D : public ::google::protobuf::Message {
 public:
  Bone2D();
  virtual ~Bone2D();

  Bone2D(const Bone2D& from);

  inline Bone2D& operator=(const Bone2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bone2D& default_instance();

  void Swap(Bone2D* other);

  // implements Message ----------------------------------------------

  Bone2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bone2D& from);
  void MergeFrom(const Bone2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale_x = 1 [default = 1];
  inline bool has_scale_x() const;
  inline void clear_scale_x();
  static const int kScaleXFieldNumber = 1;
  inline float scale_x() const;
  inline void set_scale_x(float value);

  // optional float scale_y = 2 [default = 1];
  inline bool has_scale_y() const;
  inline void clear_scale_y();
  static const int kScaleYFieldNumber = 2;
  inline float scale_y() const;
  inline void set_scale_y(float value);

  // optional float rotate_z = 5 [default = 0];
  inline bool has_rotate_z() const;
  inline void clear_rotate_z();
  static const int kRotateZFieldNumber = 5;
  inline float rotate_z() const;
  inline void set_rotate_z(float value);

  // optional float position_x = 6 [default = 0];
  inline bool has_position_x() const;
  inline void clear_position_x();
  static const int kPositionXFieldNumber = 6;
  inline float position_x() const;
  inline void set_position_x(float value);

  // optional float position_y = 7 [default = 0];
  inline bool has_position_y() const;
  inline void clear_position_y();
  static const int kPositionYFieldNumber = 7;
  inline float position_y() const;
  inline void set_position_y(float value);

  // @@protoc_insertion_point(class_scope:azModel.Bone2D)
 private:
  inline void set_has_scale_x();
  inline void clear_has_scale_x();
  inline void set_has_scale_y();
  inline void clear_has_scale_y();
  inline void set_has_rotate_z();
  inline void clear_has_rotate_z();
  inline void set_has_position_x();
  inline void clear_has_position_x();
  inline void set_has_position_y();
  inline void clear_has_position_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float scale_x_;
  float scale_y_;
  float rotate_z_;
  float position_x_;
  float position_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_azmodel_2eproto();
  friend void protobuf_AssignDesc_azmodel_2eproto();
  friend void protobuf_ShutdownFile_azmodel_2eproto();

  void InitAsDefaultInstance();
  static Bone2D* default_instance_;
};
// -------------------------------------------------------------------

class Sprite : public ::google::protobuf::Message {
 public:
  Sprite();
  virtual ~Sprite();

  Sprite(const Sprite& from);

  inline Sprite& operator=(const Sprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sprite& default_instance();

  void Swap(Sprite* other);

  // implements Message ----------------------------------------------

  Sprite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sprite& from);
  void MergeFrom(const Sprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .azModel.Base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::azModel::Base& base() const;
  inline ::azModel::Base* mutable_base();
  inline ::azModel::Base* release_base();
  inline void set_allocated_base(::azModel::Base* base);

  // optional int32 left = 2;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 2;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);

  // optional int32 top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);

  // optional int32 right = 4;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 4;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);

  // optional int32 bottom = 5;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 5;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);

  static const int kTypeFieldNumber = 10;
  static ::google::protobuf::internal::ExtensionIdentifier< ::azModel::Type,
      ::google::protobuf::internal::MessageTypeTraits< ::azModel::Sprite >, 11, false >
    type;
  // @@protoc_insertion_point(class_scope:azModel.Sprite)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_bottom();
  inline void clear_has_bottom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::azModel::Base* base_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 bottom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_azmodel_2eproto();
  friend void protobuf_AssignDesc_azmodel_2eproto();
  friend void protobuf_ShutdownFile_azmodel_2eproto();

  void InitAsDefaultInstance();
  static Sprite* default_instance_;
};
// -------------------------------------------------------------------

class Bitmap : public ::google::protobuf::Message {
 public:
  Bitmap();
  virtual ~Bitmap();

  Bitmap(const Bitmap& from);

  inline Bitmap& operator=(const Bitmap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bitmap& default_instance();

  void Swap(Bitmap* other);

  // implements Message ----------------------------------------------

  Bitmap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bitmap& from);
  void MergeFrom(const Bitmap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .azModel.Base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::azModel::Base& base() const;
  inline ::azModel::Base* mutable_base();
  inline ::azModel::Base* release_base();
  inline void set_allocated_base(::azModel::Base* base);

  // repeated .azModel.Sprite sprite_list = 2;
  inline int sprite_list_size() const;
  inline void clear_sprite_list();
  static const int kSpriteListFieldNumber = 2;
  inline const ::azModel::Sprite& sprite_list(int index) const;
  inline ::azModel::Sprite* mutable_sprite_list(int index);
  inline ::azModel::Sprite* add_sprite_list();
  inline const ::google::protobuf::RepeatedPtrField< ::azModel::Sprite >&
      sprite_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::azModel::Sprite >*
      mutable_sprite_list();

  static const int kTypeFieldNumber = 11;
  static ::google::protobuf::internal::ExtensionIdentifier< ::azModel::Type,
      ::google::protobuf::internal::MessageTypeTraits< ::azModel::Bitmap >, 11, false >
    type;
  // @@protoc_insertion_point(class_scope:azModel.Bitmap)
 private:
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::azModel::Base* base_;
  ::google::protobuf::RepeatedPtrField< ::azModel::Sprite > sprite_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_azmodel_2eproto();
  friend void protobuf_AssignDesc_azmodel_2eproto();
  friend void protobuf_ShutdownFile_azmodel_2eproto();

  void InitAsDefaultInstance();
  static Bitmap* default_instance_;
};
// -------------------------------------------------------------------

class Transform2D : public ::google::protobuf::Message {
 public:
  Transform2D();
  virtual ~Transform2D();

  Transform2D(const Transform2D& from);

  inline Transform2D& operator=(const Transform2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform2D& default_instance();

  void Swap(Transform2D* other);

  // implements Message ----------------------------------------------

  Transform2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform2D& from);
  void MergeFrom(const Transform2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale_x = 1 [default = 1];
  inline bool has_scale_x() const;
  inline void clear_scale_x();
  static const int kScaleXFieldNumber = 1;
  inline float scale_x() const;
  inline void set_scale_x(float value);

  // optional float scale_y = 2 [default = 1];
  inline bool has_scale_y() const;
  inline void clear_scale_y();
  static const int kScaleYFieldNumber = 2;
  inline float scale_y() const;
  inline void set_scale_y(float value);

  // optional float offset_x = 3 [default = 0];
  inline bool has_offset_x() const;
  inline void clear_offset_x();
  static const int kOffsetXFieldNumber = 3;
  inline float offset_x() const;
  inline void set_offset_x(float value);

  // optional float offset_y = 4 [default = 0];
  inline bool has_offset_y() const;
  inline void clear_offset_y();
  static const int kOffsetYFieldNumber = 4;
  inline float offset_y() const;
  inline void set_offset_y(float value);

  // optional float rotate_z = 5 [default = 0];
  inline bool has_rotate_z() const;
  inline void clear_rotate_z();
  static const int kRotateZFieldNumber = 5;
  inline float rotate_z() const;
  inline void set_rotate_z(float value);

  // optional float position_x = 6 [default = 0];
  inline bool has_position_x() const;
  inline void clear_position_x();
  static const int kPositionXFieldNumber = 6;
  inline float position_x() const;
  inline void set_position_x(float value);

  // optional float position_y = 7 [default = 0];
  inline bool has_position_y() const;
  inline void clear_position_y();
  static const int kPositionYFieldNumber = 7;
  inline float position_y() const;
  inline void set_position_y(float value);

  // optional bool flip_h = 8 [default = false];
  inline bool has_flip_h() const;
  inline void clear_flip_h();
  static const int kFlipHFieldNumber = 8;
  inline bool flip_h() const;
  inline void set_flip_h(bool value);

  // optional bool flip_v = 9 [default = false];
  inline bool has_flip_v() const;
  inline void clear_flip_v();
  static const int kFlipVFieldNumber = 9;
  inline bool flip_v() const;
  inline void set_flip_v(bool value);

  static const int kTypeFieldNumber = 20;
  static ::google::protobuf::internal::ExtensionIdentifier< ::azModel::Type,
      ::google::protobuf::internal::MessageTypeTraits< ::azModel::Transform2D >, 11, false >
    type;
  // @@protoc_insertion_point(class_scope:azModel.Transform2D)
 private:
  inline void set_has_scale_x();
  inline void clear_has_scale_x();
  inline void set_has_scale_y();
  inline void clear_has_scale_y();
  inline void set_has_offset_x();
  inline void clear_has_offset_x();
  inline void set_has_offset_y();
  inline void clear_has_offset_y();
  inline void set_has_rotate_z();
  inline void clear_has_rotate_z();
  inline void set_has_position_x();
  inline void clear_has_position_x();
  inline void set_has_position_y();
  inline void clear_has_position_y();
  inline void set_has_flip_h();
  inline void clear_has_flip_h();
  inline void set_has_flip_v();
  inline void clear_has_flip_v();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float scale_x_;
  float scale_y_;
  float offset_x_;
  float offset_y_;
  float rotate_z_;
  float position_x_;
  float position_y_;
  bool flip_h_;
  bool flip_v_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_azmodel_2eproto();
  friend void protobuf_AssignDesc_azmodel_2eproto();
  friend void protobuf_ShutdownFile_azmodel_2eproto();

  void InitAsDefaultInstance();
  static Transform2D* default_instance_;
};
// ===================================================================


// ===================================================================

// Type

// -------------------------------------------------------------------

// Base

// optional uint64 rtid = 1 [default = 0];
inline bool Base::has_rtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Base::set_has_rtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Base::clear_has_rtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Base::clear_rtid() {
  rtid_ = GOOGLE_ULONGLONG(0);
  clear_has_rtid();
}
inline ::google::protobuf::uint64 Base::rtid() const {
  return rtid_;
}
inline void Base::set_rtid(::google::protobuf::uint64 value) {
  set_has_rtid();
  rtid_ = value;
}

// optional uint64 parent_rtid = 2 [default = 0];
inline bool Base::has_parent_rtid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Base::set_has_parent_rtid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Base::clear_has_parent_rtid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Base::clear_parent_rtid() {
  parent_rtid_ = GOOGLE_ULONGLONG(0);
  clear_has_parent_rtid();
}
inline ::google::protobuf::uint64 Base::parent_rtid() const {
  return parent_rtid_;
}
inline void Base::set_parent_rtid(::google::protobuf::uint64 value) {
  set_has_parent_rtid();
  parent_rtid_ = value;
}

// optional bool apply = 3 [default = true];
inline bool Base::has_apply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Base::set_has_apply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Base::clear_has_apply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Base::clear_apply() {
  apply_ = true;
  clear_has_apply();
}
inline bool Base::apply() const {
  return apply_;
}
inline void Base::set_apply(bool value) {
  set_has_apply();
  apply_ = value;
}

// optional string name = 4 [default = ""];
inline bool Base::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Base::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Base::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Base::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Base::name() const {
  return *name_;
}
inline void Base::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Base::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Base::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Base::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Base::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Base::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Vertex2D

// optional float x = 1;
inline bool Vertex2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vertex2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vertex2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vertex2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vertex2D::x() const {
  return x_;
}
inline void Vertex2D::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vertex2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vertex2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vertex2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vertex2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vertex2D::y() const {
  return y_;
}
inline void Vertex2D::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float u = 3;
inline bool Vertex2D::has_u() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vertex2D::set_has_u() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vertex2D::clear_has_u() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vertex2D::clear_u() {
  u_ = 0;
  clear_has_u();
}
inline float Vertex2D::u() const {
  return u_;
}
inline void Vertex2D::set_u(float value) {
  set_has_u();
  u_ = value;
}

// optional float v = 4;
inline bool Vertex2D::has_v() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vertex2D::set_has_v() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vertex2D::clear_has_v() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vertex2D::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline float Vertex2D::v() const {
  return v_;
}
inline void Vertex2D::set_v(float value) {
  set_has_v();
  v_ = value;
}

// optional uint32 c = 5;
inline bool Vertex2D::has_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Vertex2D::set_has_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Vertex2D::clear_has_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Vertex2D::clear_c() {
  c_ = 0u;
  clear_has_c();
}
inline ::google::protobuf::uint32 Vertex2D::c() const {
  return c_;
}
inline void Vertex2D::set_c(::google::protobuf::uint32 value) {
  set_has_c();
  c_ = value;
}

// repeated uint32 bone_id = 6;
inline int Vertex2D::bone_id_size() const {
  return bone_id_.size();
}
inline void Vertex2D::clear_bone_id() {
  bone_id_.Clear();
}
inline ::google::protobuf::uint32 Vertex2D::bone_id(int index) const {
  return bone_id_.Get(index);
}
inline void Vertex2D::set_bone_id(int index, ::google::protobuf::uint32 value) {
  bone_id_.Set(index, value);
}
inline void Vertex2D::add_bone_id(::google::protobuf::uint32 value) {
  bone_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Vertex2D::bone_id() const {
  return bone_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Vertex2D::mutable_bone_id() {
  return &bone_id_;
}

// repeated float bone_influence = 7;
inline int Vertex2D::bone_influence_size() const {
  return bone_influence_.size();
}
inline void Vertex2D::clear_bone_influence() {
  bone_influence_.Clear();
}
inline float Vertex2D::bone_influence(int index) const {
  return bone_influence_.Get(index);
}
inline void Vertex2D::set_bone_influence(int index, float value) {
  bone_influence_.Set(index, value);
}
inline void Vertex2D::add_bone_influence(float value) {
  bone_influence_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Vertex2D::bone_influence() const {
  return bone_influence_;
}
inline ::google::protobuf::RepeatedField< float >*
Vertex2D::mutable_bone_influence() {
  return &bone_influence_;
}

// -------------------------------------------------------------------

// Bone2D

// optional float scale_x = 1 [default = 1];
inline bool Bone2D::has_scale_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bone2D::set_has_scale_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bone2D::clear_has_scale_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bone2D::clear_scale_x() {
  scale_x_ = 1;
  clear_has_scale_x();
}
inline float Bone2D::scale_x() const {
  return scale_x_;
}
inline void Bone2D::set_scale_x(float value) {
  set_has_scale_x();
  scale_x_ = value;
}

// optional float scale_y = 2 [default = 1];
inline bool Bone2D::has_scale_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bone2D::set_has_scale_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bone2D::clear_has_scale_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bone2D::clear_scale_y() {
  scale_y_ = 1;
  clear_has_scale_y();
}
inline float Bone2D::scale_y() const {
  return scale_y_;
}
inline void Bone2D::set_scale_y(float value) {
  set_has_scale_y();
  scale_y_ = value;
}

// optional float rotate_z = 5 [default = 0];
inline bool Bone2D::has_rotate_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bone2D::set_has_rotate_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bone2D::clear_has_rotate_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bone2D::clear_rotate_z() {
  rotate_z_ = 0;
  clear_has_rotate_z();
}
inline float Bone2D::rotate_z() const {
  return rotate_z_;
}
inline void Bone2D::set_rotate_z(float value) {
  set_has_rotate_z();
  rotate_z_ = value;
}

// optional float position_x = 6 [default = 0];
inline bool Bone2D::has_position_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bone2D::set_has_position_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bone2D::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bone2D::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
inline float Bone2D::position_x() const {
  return position_x_;
}
inline void Bone2D::set_position_x(float value) {
  set_has_position_x();
  position_x_ = value;
}

// optional float position_y = 7 [default = 0];
inline bool Bone2D::has_position_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bone2D::set_has_position_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bone2D::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bone2D::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
inline float Bone2D::position_y() const {
  return position_y_;
}
inline void Bone2D::set_position_y(float value) {
  set_has_position_y();
  position_y_ = value;
}

// -------------------------------------------------------------------

// Sprite

// required .azModel.Base base = 1;
inline bool Sprite::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sprite::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sprite::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sprite::clear_base() {
  if (base_ != NULL) base_->::azModel::Base::Clear();
  clear_has_base();
}
inline const ::azModel::Base& Sprite::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::azModel::Base* Sprite::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::azModel::Base;
  return base_;
}
inline ::azModel::Base* Sprite::release_base() {
  clear_has_base();
  ::azModel::Base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Sprite::set_allocated_base(::azModel::Base* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional int32 left = 2;
inline bool Sprite::has_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sprite::set_has_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sprite::clear_has_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sprite::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 Sprite::left() const {
  return left_;
}
inline void Sprite::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
}

// optional int32 top = 3;
inline bool Sprite::has_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sprite::set_has_top() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sprite::clear_has_top() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sprite::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 Sprite::top() const {
  return top_;
}
inline void Sprite::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
}

// optional int32 right = 4;
inline bool Sprite::has_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sprite::set_has_right() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sprite::clear_has_right() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sprite::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 Sprite::right() const {
  return right_;
}
inline void Sprite::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
}

// optional int32 bottom = 5;
inline bool Sprite::has_bottom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sprite::set_has_bottom() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sprite::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sprite::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline ::google::protobuf::int32 Sprite::bottom() const {
  return bottom_;
}
inline void Sprite::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
}

// -------------------------------------------------------------------

// Bitmap

// required .azModel.Base base = 1;
inline bool Bitmap::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bitmap::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bitmap::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bitmap::clear_base() {
  if (base_ != NULL) base_->::azModel::Base::Clear();
  clear_has_base();
}
inline const ::azModel::Base& Bitmap::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::azModel::Base* Bitmap::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::azModel::Base;
  return base_;
}
inline ::azModel::Base* Bitmap::release_base() {
  clear_has_base();
  ::azModel::Base* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Bitmap::set_allocated_base(::azModel::Base* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// repeated .azModel.Sprite sprite_list = 2;
inline int Bitmap::sprite_list_size() const {
  return sprite_list_.size();
}
inline void Bitmap::clear_sprite_list() {
  sprite_list_.Clear();
}
inline const ::azModel::Sprite& Bitmap::sprite_list(int index) const {
  return sprite_list_.Get(index);
}
inline ::azModel::Sprite* Bitmap::mutable_sprite_list(int index) {
  return sprite_list_.Mutable(index);
}
inline ::azModel::Sprite* Bitmap::add_sprite_list() {
  return sprite_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::azModel::Sprite >&
Bitmap::sprite_list() const {
  return sprite_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::azModel::Sprite >*
Bitmap::mutable_sprite_list() {
  return &sprite_list_;
}

// -------------------------------------------------------------------

// Transform2D

// optional float scale_x = 1 [default = 1];
inline bool Transform2D::has_scale_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transform2D::set_has_scale_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transform2D::clear_has_scale_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transform2D::clear_scale_x() {
  scale_x_ = 1;
  clear_has_scale_x();
}
inline float Transform2D::scale_x() const {
  return scale_x_;
}
inline void Transform2D::set_scale_x(float value) {
  set_has_scale_x();
  scale_x_ = value;
}

// optional float scale_y = 2 [default = 1];
inline bool Transform2D::has_scale_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transform2D::set_has_scale_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transform2D::clear_has_scale_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transform2D::clear_scale_y() {
  scale_y_ = 1;
  clear_has_scale_y();
}
inline float Transform2D::scale_y() const {
  return scale_y_;
}
inline void Transform2D::set_scale_y(float value) {
  set_has_scale_y();
  scale_y_ = value;
}

// optional float offset_x = 3 [default = 0];
inline bool Transform2D::has_offset_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transform2D::set_has_offset_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transform2D::clear_has_offset_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transform2D::clear_offset_x() {
  offset_x_ = 0;
  clear_has_offset_x();
}
inline float Transform2D::offset_x() const {
  return offset_x_;
}
inline void Transform2D::set_offset_x(float value) {
  set_has_offset_x();
  offset_x_ = value;
}

// optional float offset_y = 4 [default = 0];
inline bool Transform2D::has_offset_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transform2D::set_has_offset_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transform2D::clear_has_offset_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transform2D::clear_offset_y() {
  offset_y_ = 0;
  clear_has_offset_y();
}
inline float Transform2D::offset_y() const {
  return offset_y_;
}
inline void Transform2D::set_offset_y(float value) {
  set_has_offset_y();
  offset_y_ = value;
}

// optional float rotate_z = 5 [default = 0];
inline bool Transform2D::has_rotate_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transform2D::set_has_rotate_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transform2D::clear_has_rotate_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transform2D::clear_rotate_z() {
  rotate_z_ = 0;
  clear_has_rotate_z();
}
inline float Transform2D::rotate_z() const {
  return rotate_z_;
}
inline void Transform2D::set_rotate_z(float value) {
  set_has_rotate_z();
  rotate_z_ = value;
}

// optional float position_x = 6 [default = 0];
inline bool Transform2D::has_position_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transform2D::set_has_position_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transform2D::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transform2D::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
inline float Transform2D::position_x() const {
  return position_x_;
}
inline void Transform2D::set_position_x(float value) {
  set_has_position_x();
  position_x_ = value;
}

// optional float position_y = 7 [default = 0];
inline bool Transform2D::has_position_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transform2D::set_has_position_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transform2D::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transform2D::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
inline float Transform2D::position_y() const {
  return position_y_;
}
inline void Transform2D::set_position_y(float value) {
  set_has_position_y();
  position_y_ = value;
}

// optional bool flip_h = 8 [default = false];
inline bool Transform2D::has_flip_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transform2D::set_has_flip_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transform2D::clear_has_flip_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transform2D::clear_flip_h() {
  flip_h_ = false;
  clear_has_flip_h();
}
inline bool Transform2D::flip_h() const {
  return flip_h_;
}
inline void Transform2D::set_flip_h(bool value) {
  set_has_flip_h();
  flip_h_ = value;
}

// optional bool flip_v = 9 [default = false];
inline bool Transform2D::has_flip_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transform2D::set_has_flip_v() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transform2D::clear_has_flip_v() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transform2D::clear_flip_v() {
  flip_v_ = false;
  clear_has_flip_v();
}
inline bool Transform2D::flip_v() const {
  return flip_v_;
}
inline void Transform2D::set_flip_v(bool value) {
  set_has_flip_v();
  flip_v_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace azModel

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::azModel::BLEND_MODE>() {
  return ::azModel::BLEND_MODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::azModel::SHAPE_TYPE>() {
  return ::azModel::SHAPE_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_azmodel_2eproto__INCLUDED
