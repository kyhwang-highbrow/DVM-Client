// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maker {

namespace {

const ::google::protobuf::Descriptor* COLOR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COLOR_reflection_ = NULL;
const ::google::protobuf::Descriptor* FILE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FILE_reflection_ = NULL;
const ::google::protobuf::Descriptor* FILE_IMAGE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FILE_IMAGE_reflection_ = NULL;
const ::google::protobuf::Descriptor* FILE_SOUND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FILE_SOUND_reflection_ = NULL;
const ::google::protobuf::Descriptor* FILE_BMFONT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FILE_BMFONT_reflection_ = NULL;
const ::google::protobuf::Descriptor* FILE_TTF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FILE_TTF_reflection_ = NULL;
const ::google::protobuf::Descriptor* FILE_VISUAL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FILE_VISUAL_reflection_ = NULL;
const ::google::protobuf::Descriptor* FILE_PLIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FILE_PLIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* NAME_VISUAL_GROUP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NAME_VISUAL_GROUP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NAME_VISUAL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NAME_VISUAL_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClippingNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClippingNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerGradient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerGradient_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelSystemFont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelSystemFont_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelTTF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelTTF_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelBMFont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelBMFont_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextFieldTTF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextFieldTTF_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Button_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Button_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sprite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scale9Sprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scale9Sprite_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableView_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProgressTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgressTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Visual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visual_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocketNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocketNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Particle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Particle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotatePlate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotatePlate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Properties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Properties_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DOCK_POINT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ANCHOR_POINT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BLEND_FUNCTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEXT_ALIGNMENT_H_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEXT_ALIGNMENT_V_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FILL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PROGRESS_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SCROLL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PICK_PART_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STROKE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SHADOW_DIRECTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BUTTON_IMAGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDITBOX_INPUT_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDITBOX_INPUT_FLAG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDITBOX_RETURN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NODE_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ROTATE_PLATE_ORIGIN_DIR_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RELATIVE_SIZE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STENCIL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SCREEN_UI_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ENTITY_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EVENT_TO_TOOL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EVENT_TO_VIEWER_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_maker_2eproto() {
  protobuf_AddDesc_maker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maker.proto");
  GOOGLE_CHECK(file != NULL);
  COLOR_descriptor_ = file->message_type(0);
  static const int COLOR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLOR, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLOR, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLOR, b_),
  };
  COLOR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COLOR_descriptor_,
      COLOR::default_instance_,
      COLOR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLOR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLOR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COLOR));
  FILE_descriptor_ = file->message_type(1);
  static const int FILE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE, path_),
  };
  FILE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FILE_descriptor_,
      FILE::default_instance_,
      FILE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FILE));
  FILE_IMAGE_descriptor_ = file->message_type(2);
  static const int FILE_IMAGE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_IMAGE, path_),
  };
  FILE_IMAGE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FILE_IMAGE_descriptor_,
      FILE_IMAGE::default_instance_,
      FILE_IMAGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_IMAGE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_IMAGE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FILE_IMAGE));
  FILE_SOUND_descriptor_ = file->message_type(3);
  static const int FILE_SOUND_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_SOUND, path_),
  };
  FILE_SOUND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FILE_SOUND_descriptor_,
      FILE_SOUND::default_instance_,
      FILE_SOUND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_SOUND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_SOUND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FILE_SOUND));
  FILE_BMFONT_descriptor_ = file->message_type(4);
  static const int FILE_BMFONT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_BMFONT, path_),
  };
  FILE_BMFONT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FILE_BMFONT_descriptor_,
      FILE_BMFONT::default_instance_,
      FILE_BMFONT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_BMFONT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_BMFONT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FILE_BMFONT));
  FILE_TTF_descriptor_ = file->message_type(5);
  static const int FILE_TTF_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_TTF, path_),
  };
  FILE_TTF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FILE_TTF_descriptor_,
      FILE_TTF::default_instance_,
      FILE_TTF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_TTF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_TTF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FILE_TTF));
  FILE_VISUAL_descriptor_ = file->message_type(6);
  static const int FILE_VISUAL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_VISUAL, path_),
  };
  FILE_VISUAL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FILE_VISUAL_descriptor_,
      FILE_VISUAL::default_instance_,
      FILE_VISUAL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_VISUAL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_VISUAL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FILE_VISUAL));
  FILE_PLIST_descriptor_ = file->message_type(7);
  static const int FILE_PLIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_PLIST, path_),
  };
  FILE_PLIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FILE_PLIST_descriptor_,
      FILE_PLIST::default_instance_,
      FILE_PLIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_PLIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FILE_PLIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FILE_PLIST));
  NAME_VISUAL_GROUP_descriptor_ = file->message_type(8);
  static const int NAME_VISUAL_GROUP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAME_VISUAL_GROUP, name_),
  };
  NAME_VISUAL_GROUP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NAME_VISUAL_GROUP_descriptor_,
      NAME_VISUAL_GROUP::default_instance_,
      NAME_VISUAL_GROUP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAME_VISUAL_GROUP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAME_VISUAL_GROUP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NAME_VISUAL_GROUP));
  NAME_VISUAL_descriptor_ = file->message_type(9);
  static const int NAME_VISUAL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAME_VISUAL, name_),
  };
  NAME_VISUAL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NAME_VISUAL_descriptor_,
      NAME_VISUAL::default_instance_,
      NAME_VISUAL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAME_VISUAL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAME_VISUAL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NAME_VISUAL));
  Node_descriptor_ = file->message_type(10);
  static const int Node_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, ui_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, dock_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, anchor_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, relative_size_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, rel_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, rel_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, scale_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, scale_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, skew_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, skew_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, action_delay_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, action_delay_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, action_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, screen_ui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, lua_name_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  ClippingNode_descriptor_ = file->message_type(11);
  static const int ClippingNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClippingNode, stencil_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClippingNode, stencil_img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClippingNode, alpha_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClippingNode, is_invert_),
  };
  ClippingNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClippingNode_descriptor_,
      ClippingNode::default_instance_,
      ClippingNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClippingNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClippingNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClippingNode));
  LayerColor_descriptor_ = file->message_type(12);
  static const int LayerColor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerColor, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerColor, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerColor, src_blend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerColor, dest_blend_),
  };
  LayerColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerColor_descriptor_,
      LayerColor::default_instance_,
      LayerColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerColor));
  LayerGradient_descriptor_ = file->message_type(13);
  static const int LayerGradient_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, src_blend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, dest_blend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, start_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, end_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, start_opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, end_opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, angle_),
  };
  LayerGradient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerGradient_descriptor_,
      LayerGradient::default_instance_,
      LayerGradient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerGradient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerGradient));
  LabelSystemFont_descriptor_ = file->message_type(14);
  static const int LabelSystemFont_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, h_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, v_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, dimension_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, dimension_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, has_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, shadow_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, shadow_opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, shadow_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, shadow_distance_),
  };
  LabelSystemFont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelSystemFont_descriptor_,
      LabelSystemFont::default_instance_,
      LabelSystemFont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSystemFont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelSystemFont));
  LabelTTF_descriptor_ = file->message_type(15);
  static const int LabelTTF_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, h_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, v_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, dimension_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, dimension_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, letter_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, has_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, stroke_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, stroke_detail_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, is_sharp_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, stroke_tickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, stroke_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, has_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, shadow_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, shadow_opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, shadow_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, shadow_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, use_auto_fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, has_bold_),
  };
  LabelTTF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelTTF_descriptor_,
      LabelTTF::default_instance_,
      LabelTTF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelTTF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelTTF));
  LabelBMFont_descriptor_ = file->message_type(16);
  static const int LabelBMFont_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, h_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, v_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, dimension_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, dimension_height_),
  };
  LabelBMFont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelBMFont_descriptor_,
      LabelBMFont::default_instance_,
      LabelBMFont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelBMFont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelBMFont));
  TextFieldTTF_descriptor_ = file->message_type(17);
  static const int TextFieldTTF_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, h_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, v_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, dimension_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, dimension_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, has_stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, stroke_tickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, stroke_color_),
  };
  TextFieldTTF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextFieldTTF_descriptor_,
      TextFieldTTF::default_instance_,
      TextFieldTTF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextFieldTTF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextFieldTTF));
  EditBox_descriptor_ = file->message_type(18);
  static const int EditBox_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, input_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, input_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, return_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, max_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, font_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, placeholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, placeholder_font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, placeholder_font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, placeholder_font_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, normal_bg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, pressed_bg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, disabled_bg_),
  };
  EditBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditBox_descriptor_,
      EditBox::default_instance_,
      EditBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditBox));
  Button_descriptor_ = file->message_type(19);
  static const int Button_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, disable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, image_type_),
  };
  Button_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Button_descriptor_,
      Button::default_instance_,
      Button_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Button));
  Sprite_descriptor_ = file->message_type(20);
  static const int Sprite_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, flip_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, flip_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, src_blend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, dest_blend_),
  };
  Sprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sprite_descriptor_,
      Sprite::default_instance_,
      Sprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sprite));
  Scale9Sprite_descriptor_ = file->message_type(21);
  static const int Scale9Sprite_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, center_rect_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, center_rect_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, center_rect_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, center_rect_height_),
  };
  Scale9Sprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scale9Sprite_descriptor_,
      Scale9Sprite::default_instance_,
      Scale9Sprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale9Sprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scale9Sprite));
  TableView_descriptor_ = file->message_type(22);
  static const int TableView_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, scroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, bounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, view_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, view_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, cell_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, cell_height_),
  };
  TableView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableView_descriptor_,
      TableView::default_instance_,
      TableView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableView));
  ProgressTimer_descriptor_ = file->message_type(23);
  static const int ProgressTimer_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, flip_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, flip_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, src_blend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, dest_blend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, progress_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, mid_point_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, mid_point_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, percentage_),
  };
  ProgressTimer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgressTimer_descriptor_,
      ProgressTimer::default_instance_,
      ProgressTimer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressTimer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgressTimer));
  Visual_descriptor_ = file->message_type(24);
  static const int Visual_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, auto_play_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, is_repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, visual_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, opacity_),
  };
  Visual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Visual_descriptor_,
      Visual::default_instance_,
      Visual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Visual));
  SocketNode_descriptor_ = file->message_type(25);
  static const int SocketNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketNode, socket_name_),
  };
  SocketNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocketNode_descriptor_,
      SocketNode::default_instance_,
      SocketNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocketNode));
  Particle_descriptor_ = file->message_type(26);
  static const int Particle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, file_name_),
  };
  Particle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Particle_descriptor_,
      Particle::default_instance_,
      Particle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Particle));
  RotatePlate_descriptor_ = file->message_type(27);
  static const int RotatePlate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatePlate, radius_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatePlate, radius_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatePlate, min_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatePlate, max_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatePlate, origin_dir_),
  };
  RotatePlate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotatePlate_descriptor_,
      RotatePlate::default_instance_,
      RotatePlate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatePlate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatePlate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotatePlate));
  Properties_descriptor_ = file->message_type(28);
  static const int Properties_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, layer_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, layer_gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, label_syatem_font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, label_ttf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, text_field_ttf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, edit_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, table_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, rotate_plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, sprite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, scale_9_sprite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, progress_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, visual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, clipping_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, socket_node_),
  };
  Properties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Properties_descriptor_,
      Properties::default_instance_,
      Properties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Properties));
  Entity_descriptor_ = file->message_type(29);
  static const int Entity_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, expand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, parent_selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, prev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, dest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, dest_parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, lua_name_duplicated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, children_),
  };
  Entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entity));
  CMD_descriptor_ = file->message_type(30);
  static const int CMD_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, window_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, window_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, viewer_event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, update_to_cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, dont_append_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, can_merge_prev_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, backup_entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, enum_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, socket_node_list_),
  };
  CMD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_descriptor_,
      CMD::default_instance_,
      CMD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD));
  DOCK_POINT_descriptor_ = file->enum_type(0);
  ANCHOR_POINT_descriptor_ = file->enum_type(1);
  BLEND_FUNCTION_descriptor_ = file->enum_type(2);
  TEXT_ALIGNMENT_H_descriptor_ = file->enum_type(3);
  TEXT_ALIGNMENT_V_descriptor_ = file->enum_type(4);
  FILL_TYPE_descriptor_ = file->enum_type(5);
  PROGRESS_TYPE_descriptor_ = file->enum_type(6);
  SCROLL_TYPE_descriptor_ = file->enum_type(7);
  PICK_PART_descriptor_ = file->enum_type(8);
  STROKE_TYPE_descriptor_ = file->enum_type(9);
  SHADOW_DIRECTION_descriptor_ = file->enum_type(10);
  BUTTON_IMAGE_TYPE_descriptor_ = file->enum_type(11);
  EDITBOX_INPUT_MODE_descriptor_ = file->enum_type(12);
  EDITBOX_INPUT_FLAG_descriptor_ = file->enum_type(13);
  EDITBOX_RETURN_TYPE_descriptor_ = file->enum_type(14);
  NODE_ACTION_TYPE_descriptor_ = file->enum_type(15);
  ROTATE_PLATE_ORIGIN_DIR_descriptor_ = file->enum_type(16);
  RELATIVE_SIZE_TYPE_descriptor_ = file->enum_type(17);
  STENCIL_TYPE_descriptor_ = file->enum_type(18);
  SCREEN_UI_TYPE_descriptor_ = file->enum_type(19);
  ENTITY_TYPE_descriptor_ = file->enum_type(20);
  CMD_TYPE_descriptor_ = file->enum_type(21);
  EVENT_TO_TOOL_descriptor_ = file->enum_type(22);
  EVENT_TO_VIEWER_descriptor_ = file->enum_type(23);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COLOR_descriptor_, &COLOR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILE_descriptor_, &FILE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILE_IMAGE_descriptor_, &FILE_IMAGE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILE_SOUND_descriptor_, &FILE_SOUND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILE_BMFONT_descriptor_, &FILE_BMFONT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILE_TTF_descriptor_, &FILE_TTF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILE_VISUAL_descriptor_, &FILE_VISUAL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FILE_PLIST_descriptor_, &FILE_PLIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NAME_VISUAL_GROUP_descriptor_, &NAME_VISUAL_GROUP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NAME_VISUAL_descriptor_, &NAME_VISUAL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClippingNode_descriptor_, &ClippingNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerColor_descriptor_, &LayerColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerGradient_descriptor_, &LayerGradient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelSystemFont_descriptor_, &LabelSystemFont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelTTF_descriptor_, &LabelTTF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelBMFont_descriptor_, &LabelBMFont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextFieldTTF_descriptor_, &TextFieldTTF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditBox_descriptor_, &EditBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Button_descriptor_, &Button::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sprite_descriptor_, &Sprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scale9Sprite_descriptor_, &Scale9Sprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableView_descriptor_, &TableView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgressTimer_descriptor_, &ProgressTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Visual_descriptor_, &Visual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocketNode_descriptor_, &SocketNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Particle_descriptor_, &Particle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotatePlate_descriptor_, &RotatePlate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Properties_descriptor_, &Properties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_descriptor_, &CMD::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maker_2eproto() {
  delete COLOR::default_instance_;
  delete COLOR_reflection_;
  delete FILE::default_instance_;
  delete FILE_reflection_;
  delete FILE_IMAGE::default_instance_;
  delete FILE_IMAGE_reflection_;
  delete FILE_SOUND::default_instance_;
  delete FILE_SOUND_reflection_;
  delete FILE_BMFONT::default_instance_;
  delete FILE_BMFONT_reflection_;
  delete FILE_TTF::default_instance_;
  delete FILE_TTF_reflection_;
  delete FILE_VISUAL::default_instance_;
  delete FILE_VISUAL_reflection_;
  delete FILE_PLIST::default_instance_;
  delete FILE_PLIST_reflection_;
  delete NAME_VISUAL_GROUP::default_instance_;
  delete NAME_VISUAL_GROUP_reflection_;
  delete NAME_VISUAL::default_instance_;
  delete NAME_VISUAL_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete ClippingNode::default_instance_;
  delete ClippingNode_reflection_;
  delete LayerColor::default_instance_;
  delete LayerColor_reflection_;
  delete LayerGradient::default_instance_;
  delete LayerGradient_reflection_;
  delete LabelSystemFont::default_instance_;
  delete LabelSystemFont_reflection_;
  delete LabelSystemFont::_default_font_name_;
  delete LabelSystemFont::_default_text_;
  delete LabelTTF::default_instance_;
  delete LabelTTF_reflection_;
  delete LabelTTF::_default_text_;
  delete LabelBMFont::default_instance_;
  delete LabelBMFont_reflection_;
  delete LabelBMFont::_default_text_;
  delete TextFieldTTF::default_instance_;
  delete TextFieldTTF_reflection_;
  delete TextFieldTTF::_default_text_;
  delete EditBox::default_instance_;
  delete EditBox_reflection_;
  delete EditBox::_default_font_name_;
  delete EditBox::_default_placeholder_;
  delete EditBox::_default_placeholder_font_name_;
  delete Button::default_instance_;
  delete Button_reflection_;
  delete Sprite::default_instance_;
  delete Sprite_reflection_;
  delete Scale9Sprite::default_instance_;
  delete Scale9Sprite_reflection_;
  delete TableView::default_instance_;
  delete TableView_reflection_;
  delete ProgressTimer::default_instance_;
  delete ProgressTimer_reflection_;
  delete Visual::default_instance_;
  delete Visual_reflection_;
  delete SocketNode::default_instance_;
  delete SocketNode_reflection_;
  delete Particle::default_instance_;
  delete Particle_reflection_;
  delete RotatePlate::default_instance_;
  delete RotatePlate_reflection_;
  delete Properties::default_instance_;
  delete Properties_reflection_;
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete CMD::default_instance_;
  delete CMD_reflection_;
}

void protobuf_AddDesc_maker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013maker.proto\022\005maker\"7\n\005COLOR\022\016\n\001r\030\001 \002(\005"
    ":\003255\022\016\n\001g\030\002 \002(\005:\003255\022\016\n\001b\030\003 \002(\005:\003255\"\026\n"
    "\004FILE\022\016\n\004path\030\001 \002(\t:\000\"\034\n\nFILE_IMAGE\022\016\n\004p"
    "ath\030\001 \002(\t:\000\"\034\n\nFILE_SOUND\022\016\n\004path\030\001 \002(\t:"
    "\000\"\035\n\013FILE_BMFONT\022\016\n\004path\030\001 \002(\t:\000\"\032\n\010FILE"
    "_TTF\022\016\n\004path\030\001 \002(\t:\000\"\035\n\013FILE_VISUAL\022\016\n\004p"
    "ath\030\001 \002(\t:\000\"\034\n\nFILE_PLIST\022\016\n\004path\030\001 \002(\t:"
    "\000\"#\n\021NAME_VISUAL_GROUP\022\016\n\004name\030\001 \002(\t:\000\"\035"
    "\n\013NAME_VISUAL\022\016\n\004name\030\001 \002(\t:\000\"\320\005\n\004Node\022\021"
    "\n\007ui_name\030\001 \001(\t:\000\022\016\n\004flag\030\002 \001(\t:\000\022\014\n\001x\030\003"
    " \001(\002:\0010\022\014\n\001y\030\004 \001(\002:\0010\022:\n\ndock_point\030\005 \001("
    "\0162\021.maker.DOCK_POINT:\023DOCK__MIDDLE_CENTE"
    "R\022@\n\014anchor_point\030\006 \001(\0162\023.maker.ANCHOR_P"
    "OINT:\025ANCHOR__MIDDLE_CENTER\022O\n\022relative_"
    "size_type\030\007 \001(\0162\031.maker.RELATIVE_SIZE_TY"
    "PE:\030RELATIVE_SIZE_TYPE__NONE\022\024\n\trel_widt"
    "h\030\010 \001(\005:\0010\022\025\n\nrel_height\030\t \001(\005:\0010\022\022\n\005wid"
    "th\030\n \001(\005:\003100\022\023\n\006height\030\013 \001(\005:\003100\022\022\n\007sc"
    "ale_x\030\014 \001(\002:\0011\022\022\n\007scale_y\030\r \001(\002:\0011\022\021\n\006sk"
    "ew_x\030\016 \001(\002:\0010\022\021\n\006skew_y\030\017 \001(\002:\0010\022\023\n\010rota"
    "tion\030\020 \001(\002:\0010\022\025\n\007visible\030\021 \001(\010:\004true\022D\n\013"
    "action_type\030\022 \001(\0162\027.maker.NODE_ACTION_TY"
    "PE:\026NODE_ACTION_TYPE__NONE\022\031\n\016action_del"
    "ay_1\030\023 \001(\002:\0010\022\031\n\016action_delay_2\030\024 \001(\002:\0010"
    "\022\032\n\017action_duration\030\025 \001(\002:\0010\022>\n\tscreen_u"
    "i\030\026 \001(\0162\025.maker.SCREEN_UI_TYPE:\024SCREEN_U"
    "I_TYPE__NONE\022\022\n\010lua_name\030\027 \001(\t:\000\"\237\001\n\014Cli"
    "ppingNode\0221\n\014stencil_type\030\001 \001(\0162\023.maker."
    "STENCIL_TYPE:\006SQUARE\022&\n\013stencil_img\030\002 \001("
    "\0132\021.maker.FILE_IMAGE\022\032\n\017alpha_threshold\030"
    "\003 \001(\002:\0011\022\030\n\tis_invert\030\004 \001(\010:\005false\"\310\001\n\nL"
    "ayerColor\022\033\n\005color\030\001 \001(\0132\014.maker.COLOR\022\024"
    "\n\007opacity\030\002 \001(\005:\003255\022=\n\tsrc_blend\030\003 \001(\0162"
    "\025.maker.BLEND_FUNCTION:\023BLEND__GL_SRC_AL"
    "PHA\022H\n\ndest_blend\030\004 \001(\0162\025.maker.BLEND_FU"
    "NCTION:\035BLEND__GL_ONE_MINUS_SRC_ALPHA\"\327\002"
    "\n\rLayerGradient\022\033\n\005color\030\001 \001(\0132\014.maker.C"
    "OLOR\022\024\n\007opacity\030\002 \001(\005:\003255\022=\n\tsrc_blend\030"
    "\003 \001(\0162\025.maker.BLEND_FUNCTION:\023BLEND__GL_"
    "SRC_ALPHA\022H\n\ndest_blend\030\004 \001(\0162\025.maker.BL"
    "END_FUNCTION:\035BLEND__GL_ONE_MINUS_SRC_AL"
    "PHA\022!\n\013start_color\030\005 \001(\0132\014.maker.COLOR\022\037"
    "\n\tend_color\030\006 \001(\0132\014.maker.COLOR\022\032\n\rstart"
    "_opacity\030\007 \001(\005:\003255\022\030\n\013end_opacity\030\010 \001(\005"
    ":\003255\022\020\n\005angle\030\t \001(\002:\0010\"\231\004\n\017LabelSystemF"
    "ont\022\034\n\tfont_name\030\001 \001(\t:\tHelvetica\022\025\n\tfon"
    "t_size\030\002 \001(\005:\00210\022#\n\004text\030\003 \001(\t:\025New Labe"
    "l System Font\022B\n\013h_alignment\030\004 \001(\0162\027.mak"
    "er.TEXT_ALIGNMENT_H:\024TEXT_ALIGN_H__CENTE"
    "R\022B\n\013v_alignment\030\005 \001(\0162\027.maker.TEXT_ALIG"
    "NMENT_V:\024TEXT_ALIGN_V__CENTER\022\033\n\005color\030\006"
    " \001(\0132\014.maker.COLOR\022\024\n\007opacity\030\007 \001(\005:\003255"
    "\022\032\n\017dimension_width\030\010 \001(\005:\0010\022\033\n\020dimensio"
    "n_height\030\t \001(\005:\0010\022\031\n\nhas_shadow\030\037 \001(\010:\005f"
    "alse\022\"\n\014shadow_color\030  \001(\0132\014.maker.COLOR"
    "\022\033\n\016shadow_opacity\030! \001(\005:\003255\022@\n\020shadow_"
    "direction\030\" \001(\0162\027.maker.SHADOW_DIRECTION"
    ":\rSHADOW_DIR_90\022\032\n\017shadow_distance\030# \001(\002"
    ":\0015\"\274\006\n\010LabelTTF\022\"\n\tfont_name\030\001 \001(\0132\017.ma"
    "ker.FILE_TTF\022\025\n\tfont_size\030\002 \001(\005:\00210\022\033\n\004t"
    "ext\030\003 \001(\t:\rNew Label TTF\022B\n\013h_alignment\030"
    "\004 \001(\0162\027.maker.TEXT_ALIGNMENT_H:\024TEXT_ALI"
    "GN_H__CENTER\022B\n\013v_alignment\030\005 \001(\0162\027.make"
    "r.TEXT_ALIGNMENT_V:\024TEXT_ALIGN_V__CENTER"
    "\022\033\n\005color\030\006 \001(\0132\014.maker.COLOR\022\024\n\007opacity"
    "\030\007 \001(\005:\003255\022\032\n\017dimension_width\030\010 \001(\005:\0010\022"
    "\033\n\020dimension_height\030\t \001(\005:\0010\022\031\n\016letter_s"
    "pacing\030\n \001(\002:\0010\022\031\n\nhas_stroke\030\025 \001(\010:\005fal"
    "se\022<\n\013stroke_type\030\026 \001(\0162\022.maker.STROKE_T"
    "YPE:\023STROKE_TYPE__NORMAL\022\036\n\023stroke_detai"
    "l_level\030\027 \001(\005:\0010\022\033\n\ris_sharp_text\030\030 \001(\010:"
    "\004true\022\032\n\017stroke_tickness\030\031 \001(\002:\0011\022\"\n\014str"
    "oke_color\030\032 \001(\0132\014.maker.COLOR\022\031\n\nhas_sha"
    "dow\030\037 \001(\010:\005false\022\"\n\014shadow_color\030  \001(\0132\014"
    ".maker.COLOR\022\033\n\016shadow_opacity\030! \001(\005:\00325"
    "5\022@\n\020shadow_direction\030\" \001(\0162\027.maker.SHAD"
    "OW_DIRECTION:\rSHADOW_DIR_90\022\032\n\017shadow_di"
    "stance\030# \001(\002:\0015\022 \n\021use_auto_fontsize\030) \001"
    "(\010:\005false\022\027\n\010has_bold\030* \001(\010:\005false\"\337\002\n\013L"
    "abelBMFont\022%\n\tfont_name\030\001 \001(\0132\022.maker.FI"
    "LE_BMFONT\022\025\n\tfont_size\030\002 \001(\005:\00210\022\036\n\004text"
    "\030\003 \001(\t:\020New Label BMFont\022B\n\013h_alignment\030"
    "\004 \001(\0162\027.maker.TEXT_ALIGNMENT_H:\024TEXT_ALI"
    "GN_H__CENTER\022B\n\013v_alignment\030\005 \001(\0162\027.make"
    "r.TEXT_ALIGNMENT_V:\024TEXT_ALIGN_V__CENTER"
    "\022\033\n\005color\030\006 \001(\0132\014.maker.COLOR\022\024\n\007opacity"
    "\030\007 \001(\005:\003255\022\032\n\017dimension_width\030\010 \001(\005:\0010\022"
    "\033\n\020dimension_height\030\t \001(\005:\0010\"\265\003\n\014TextFie"
    "ldTTF\022\"\n\tfont_name\030\001 \001(\0132\017.maker.FILE_TT"
    "F\022\025\n\tfont_size\030\002 \001(\005:\00210\022\033\n\004text\030\003 \001(\t:\r"
    "New TextField\022B\n\013h_alignment\030\004 \001(\0162\027.mak"
    "er.TEXT_ALIGNMENT_H:\024TEXT_ALIGN_H__CENTE"
    "R\022B\n\013v_alignment\030\005 \001(\0162\027.maker.TEXT_ALIG"
    "NMENT_V:\024TEXT_ALIGN_V__CENTER\022\033\n\005color\030\006"
    " \001(\0132\014.maker.COLOR\022\024\n\007opacity\030\007 \001(\005:\003255"
    "\022\032\n\017dimension_width\030\010 \001(\005:\0010\022\033\n\020dimensio"
    "n_height\030\t \001(\005:\0010\022\031\n\nhas_stroke\030\n \001(\010:\005f"
    "alse\022\032\n\017stroke_tickness\030\013 \001(\002:\0011\022\"\n\014stro"
    "ke_color\030\014 \001(\0132\014.maker.COLOR\"\275\005\n\007EditBox"
    "\022\025\n\006enable\030\001 \001(\010:\005false\022N\n\ninput_mode\030\002 "
    "\001(\0162\031.maker.EDITBOX_INPUT_MODE:\037EDITBOX_"
    "INPUT_MODE__SINGLE_LINE\022]\n\ninput_flag\030\003 "
    "\001(\0162\031.maker.EDITBOX_INPUT_FLAG:.EDITBOX_"
    "INPUT_FLAG__INTIAL_CAPS_ALL_CHARACTERS\022J"
    "\n\013return_type\030\004 \001(\0162\032.maker.EDITBOX_RETU"
    "RN_TYPE:\031EDITBOX_RETURN_TYPE__DONE\022\025\n\nma"
    "x_length\030\005 \001(\005:\0010\022\016\n\004text\030\006 \001(\t:\000\022\034\n\tfon"
    "t_name\030\007 \001(\t:\tHelvetica\022\025\n\tfont_size\030\010 \001"
    "(\005:\00220\022 \n\nfont_color\030\t \001(\0132\014.maker.COLOR"
    "\0222\n\013placeholder\030\n \001(\t:\035\355\205\215\354\212\244\355\212\270\353\245\274 \354\236\205\353"
    "\240\245\355\225\230\354\204\270\354\232\224.\022(\n\025placeholder_font_name\030\013 "
    "\001(\t:\tHelvetica\022!\n\025placeholder_font_size\030"
    "\014 \001(\005:\00220\022,\n\026placeholder_font_color\030\r \001("
    "\0132\014.maker.COLOR\022$\n\tnormal_bg\030\016 \001(\0132\021.mak"
    "er.FILE_IMAGE\022%\n\npressed_bg\030\017 \001(\0132\021.make"
    "r.FILE_IMAGE\022&\n\013disabled_bg\030\020 \001(\0132\021.make"
    "r.FILE_IMAGE\"\323\001\n\006Button\022\024\n\006enable\030\001 \001(\010:"
    "\004true\022!\n\006normal\030\002 \001(\0132\021.maker.FILE_IMAGE"
    "\022#\n\010selected\030\003 \001(\0132\021.maker.FILE_IMAGE\022\"\n"
    "\007disable\030\004 \001(\0132\021.maker.FILE_IMAGE\022G\n\nima"
    "ge_type\030\005 \001(\0162\030.maker.BUTTON_IMAGE_TYPE:"
    "\031BUTTON_IMAGE_TYPE__SPRITE\"\230\002\n\006Sprite\022$\n"
    "\tfile_name\030\001 \001(\0132\021.maker.FILE_IMAGE\022\033\n\005c"
    "olor\030\002 \001(\0132\014.maker.COLOR\022\024\n\007opacity\030\003 \001("
    "\005:\003255\022\025\n\006flip_x\030\004 \001(\010:\005false\022\025\n\006flip_y\030"
    "\005 \001(\010:\005false\022=\n\tsrc_blend\030\006 \001(\0162\025.maker."
    "BLEND_FUNCTION:\023BLEND__GL_SRC_ALPHA\022H\n\nd"
    "est_blend\030\007 \001(\0162\025.maker.BLEND_FUNCTION:\035"
    "BLEND__GL_ONE_MINUS_SRC_ALPHA\"\330\001\n\014Scale9"
    "Sprite\022$\n\tfile_name\030\001 \001(\0132\021.maker.FILE_I"
    "MAGE\022\033\n\005color\030\002 \001(\0132\014.maker.COLOR\022\024\n\007opa"
    "city\030\003 \001(\005:\003255\022\030\n\rcenter_rect_x\030\004 \001(\005:\001"
    "0\022\030\n\rcenter_rect_y\030\005 \001(\005:\0010\022\034\n\021center_re"
    "ct_width\030\006 \001(\005:\0010\022\035\n\022center_rect_height\030"
    "\007 \001(\005:\0010\"\267\001\n\tTableView\0220\n\006scroll\030\001 \001(\0162\022"
    ".maker.SCROLL_TYPE:\014SCROLL__BOTH\022\024\n\006boun"
    "ce\030\002 \001(\010:\004true\022\027\n\nview_width\030\003 \001(\005:\003200\022"
    "\030\n\013view_height\030\004 \001(\005:\003200\022\026\n\ncell_width\030"
    "\005 \001(\005:\00260\022\027\n\013cell_height\030\006 \001(\005:\00260\"\255\003\n\rP"
    "rogressTimer\022$\n\tfile_name\030\001 \001(\0132\021.maker."
    "FILE_IMAGE\022\033\n\005color\030\002 \001(\0132\014.maker.COLOR\022"
    "\024\n\007opacity\030\003 \001(\005:\003255\022\025\n\006flip_x\030\004 \001(\010:\005f"
    "alse\022\025\n\006flip_y\030\005 \001(\010:\005false\022=\n\tsrc_blend"
    "\030\006 \001(\0162\025.maker.BLEND_FUNCTION:\023BLEND__GL"
    "_SRC_ALPHA\022H\n\ndest_blend\030\007 \001(\0162\025.maker.B"
    "LEND_FUNCTION:\035BLEND__GL_ONE_MINUS_SRC_A"
    "LPHA\022@\n\rprogress_type\030\010 \001(\0162\024.maker.PROG"
    "RESS_TYPE:\023PROGRESS__RADIAL_CW\022\030\n\013mid_po"
    "int_x\030\t \001(\002:\0030.5\022\030\n\013mid_point_y\030\n \001(\002:\0030"
    ".5\022\026\n\npercentage\030\013 \001(\005:\00275\"\273\001\n\006Visual\022%\n"
    "\tfile_name\030\001 \001(\0132\022.maker.FILE_VISUAL\022\027\n\t"
    "auto_play\030\002 \001(\010:\004true\022\027\n\tis_repeat\030\003 \001(\010"
    ":\004true\022%\n\tvisual_id\030\004 \001(\0132\022.maker.NAME_V"
    "ISUAL\022\033\n\005color\030\006 \001(\0132\014.maker.COLOR\022\024\n\007op"
    "acity\030\007 \001(\005:\003255\"!\n\nSocketNode\022\023\n\013socket"
    "_name\030\001 \001(\t\"0\n\010Particle\022$\n\tfile_name\030\001 \001"
    "(\0132\021.maker.FILE_PLIST\"\273\001\n\013RotatePlate\022\025\n"
    "\010radius_x\030\001 \001(\002:\003100\022\024\n\010radius_y\030\002 \001(\002:\002"
    "50\022\026\n\tmin_scale\030\003 \001(\002:\0030.5\022\024\n\tmax_scale\030"
    "\004 \001(\002:\0011\022Q\n\norigin_dir\030\005 \001(\0162\036.maker.ROT"
    "ATE_PLATE_ORIGIN_DIR:\035ROTATE_PLATE_ORIGI"
    "N_DIR__DOWN\"\322\005\n\nProperties\022.\n\004type\030\001 \002(\016"
    "2\022.maker.ENTITY_TYPE:\014ENTITY__Node\022\031\n\004no"
    "de\030\n \001(\0132\013.maker.Node\022&\n\013layer_color\030\013 \001"
    "(\0132\021.maker.LayerColor\022,\n\016layer_gradient\030"
    "\014 \001(\0132\024.maker.LayerGradient\0221\n\021label_sya"
    "tem_font\030\r \001(\0132\026.maker.LabelSystemFont\022\""
    "\n\tlabel_ttf\030\016 \001(\0132\017.maker.LabelTTF\022+\n\016te"
    "xt_field_ttf\030\017 \001(\0132\023.maker.TextFieldTTF\022"
    " \n\010edit_box\030\020 \001(\0132\016.maker.EditBox\022$\n\ntab"
    "le_view\030\021 \001(\0132\020.maker.TableView\022(\n\014rotat"
    "e_plate\030\022 \001(\0132\022.maker.RotatePlate\022\035\n\006but"
    "ton\030\023 \001(\0132\r.maker.Button\022\035\n\006sprite\030\024 \001(\013"
    "2\r.maker.Sprite\022+\n\016scale_9_sprite\030\025 \001(\0132"
    "\023.maker.Scale9Sprite\022,\n\016progress_timer\030\026"
    " \001(\0132\024.maker.ProgressTimer\022\035\n\006visual\030\027 \001"
    "(\0132\r.maker.Visual\022!\n\010particle\030\030 \001(\0132\017.ma"
    "ker.Particle\022*\n\rclipping_node\030\031 \001(\0132\023.ma"
    "ker.ClippingNode\022&\n\013socket_node\030d \001(\0132\021."
    "maker.SocketNode\"\253\002\n\006Entity\022\r\n\002id\030\001 \002(\004:"
    "\0010\022\024\n\006expand\030\002 \002(\010:\004true\022\027\n\010selected\030\003 \001"
    "(\010:\005false\022\036\n\017parent_selected\030\004 \001(\010:\005fals"
    "e\022\024\n\tparent_id\030\006 \001(\004:\0010\022\022\n\007prev_id\030\007 \002(\004"
    ":\0010\022\022\n\007dest_id\030\010 \001(\004:\0010\022\031\n\016dest_parent_i"
    "d\030\t \001(\004:\0010\022\"\n\023lua_name_duplicated\030\n \001(\010:"
    "\005false\022%\n\nproperties\030\024 \001(\0132\021.maker.Prope"
    "rties\022\037\n\010children\030\036 \003(\0132\r.maker.Entity\"\325"
    "\003\n\003CMD\022\r\n\002id\030\001 \002(\004:\0010\022*\n\004type\030\002 \002(\0162\017.ma"
    "ker.CMD_TYPE:\013CMD__Create\022\023\n\010window_x\030\n "
    "\001(\005:\0010\022\023\n\010window_y\030\013 \001(\005:\0010\0223\n\010event_id\030"
    "\016 \001(\0162\024.maker.EVENT_TO_TOOL:\013EVENT__None"
    "\022C\n\017viewer_event_id\030\017 \001(\0162\026.maker.EVENT_"
    "TO_VIEWER:\022VIEWER_EVENT__None\022\025\n\013descrip"
    "tion\030\020 \001(\t:\000\022\033\n\020update_to_cmd_id\030\021 \001(\004:\001"
    "0\022\"\n\023dont_append_history\030\022 \001(\010:\005false\022!\n"
    "\022can_merge_prev_cmd\030\023 \001(\010:\005false\022\037\n\010enti"
    "ties\030\024 \003(\0132\r.maker.Entity\022&\n\017backup_enti"
    "ties\030\025 \003(\0132\r.maker.Entity\022\021\n\tenum_list\030\036"
    " \003(\t\022\030\n\020socket_node_list\030\037 \003(\t*\333\001\n\nDOCK_"
    "POINT\022\025\n\021DOCK__BOTTOM_LEFT\020\000\022\027\n\023DOCK__BO"
    "TTOM_CENTER\020\001\022\026\n\022DOCK__BOTTOM_RIGHT\020\002\022\025\n"
    "\021DOCK__MIDDLE_LEFT\020\003\022\027\n\023DOCK__MIDDLE_CEN"
    "TER\020\004\022\026\n\022DOCK__MIDDLE_RIGHT\020\005\022\022\n\016DOCK__T"
    "OP_LEFT\020\006\022\024\n\020DOCK__TOP_CENTER\020\007\022\023\n\017DOCK_"
    "_TOP_RIGHT\020\010*\357\001\n\014ANCHOR_POINT\022\027\n\023ANCHOR_"
    "_BOTTOM_LEFT\020\000\022\031\n\025ANCHOR__BOTTOM_CENTER\020"
    "\001\022\030\n\024ANCHOR__BOTTOM_RIGHT\020\002\022\027\n\023ANCHOR__M"
    "IDDLE_LEFT\020\003\022\031\n\025ANCHOR__MIDDLE_CENTER\020\004\022"
    "\030\n\024ANCHOR__MIDDLE_RIGHT\020\005\022\024\n\020ANCHOR__TOP"
    "_LEFT\020\006\022\026\n\022ANCHOR__TOP_CENTER\020\007\022\025\n\021ANCHO"
    "R__TOP_RIGHT\020\010*\322\002\n\016BLEND_FUNCTION\022\022\n\016BLE"
    "ND__GL_ZERO\020\000\022\021\n\rBLEND__GL_ONE\020\001\022\030\n\023BLEN"
    "D__GL_SRC_COLOR\020\200\006\022\030\n\023BLEND__GL_DST_COLO"
    "R\020\206\006\022\"\n\035BLEND__GL_ONE_MINUS_SRC_COLOR\020\201\006"
    "\022\"\n\035BLEND__GL_ONE_MINUS_DST_COLOR\020\207\006\022\030\n\023"
    "BLEND__GL_SRC_ALPHA\020\202\006\022\030\n\023BLEND__GL_DST_"
    "ALPHA\020\204\006\022\"\n\035BLEND__GL_ONE_MINUS_SRC_ALPH"
    "A\020\203\006\022\"\n\035BLEND__GL_ONE_MINUS_DST_ALPHA\020\205\006"
    "\022!\n\034BLEND__GL_SRC_ALPHA_SATURATE\020\210\006*]\n\020T"
    "EXT_ALIGNMENT_H\022\026\n\022TEXT_ALIGN_H__LEFT\020\000\022"
    "\030\n\024TEXT_ALIGN_H__CENTER\020\001\022\027\n\023TEXT_ALIGN_"
    "H__RIGHT\020\002*]\n\020TEXT_ALIGNMENT_V\022\025\n\021TEXT_A"
    "LIGN_V__TOP\020\000\022\030\n\024TEXT_ALIGN_V__CENTER\020\001\022"
    "\030\n\024TEXT_ALIGN_V__BOTTOM\020\002*0\n\tFILL_TYPE\022\021"
    "\n\rFILL__STRETCH\020\000\022\020\n\014FILL__REPEAT\020\001*\266\001\n\r"
    "PROGRESS_TYPE\022\027\n\023PROGRESS__RADIAL_CW\020\000\022\030"
    "\n\024PROGRESS__RADIAL_CCW\020\001\022\033\n\027PROGRESS__TO"
    "P_TO_BOTTOM\020\002\022\033\n\027PROGRESS__BOTTOM_TO_TOP"
    "\020\003\022\033\n\027PROGRESS__LEFT_TO_RIGHT\020\004\022\033\n\027PROGR"
    "ESS__RIGHT_TO_LEFT\020\005*_\n\013SCROLL_TYPE\022\020\n\014S"
    "CROLL__NONE\020\000\022\024\n\020SCROLL__VERTICAL\020\001\022\026\n\022S"
    "CROLL__HORIZONTAL\020\002\022\020\n\014SCROLL__BOTH\020\003*\253\002"
    "\n\tPICK_PART\022\023\n\017PICK_PART__NONE\020\000\022\025\n\021PICK"
    "_PART__CENTER\020\001\022\022\n\016PICK_PART__TOP\020\002\022\025\n\021P"
    "ICK_PART__BOTTOM\020\003\022\023\n\017PICK_PART__LEFT\020\004\022"
    "\024\n\020PICK_PART__RIGHT\020\005\022\032\n\026PICK_PART__LEFT"
    "_BOTTOM\020\006\022\027\n\023PICK_PART__LEFT_TOP\020\007\022\033\n\027PI"
    "CK_PART__RIGHT_BOTTOM\020\010\022\030\n\024PICK_PART__RI"
    "GHT_TOP\020\t\022\031\n\025PICK_PART__SELECT_BOX\020\n\022\025\n\021"
    "PICK_PART__SCROLL\020\013*\?\n\013STROKE_TYPE\022\027\n\023ST"
    "ROKE_TYPE__NORMAL\020\000\022\027\n\023STROKE_TYPE__CUST"
    "OM\020\001*e\n\020SHADOW_DIRECTION\022\021\n\rSHADOW_DIR_9"
    "0\020\000\022\022\n\016SHADOW_DIR_135\020\001\022\021\n\rSHADOW_DIR_45"
    "\020\002\022\027\n\023SHADOW_DIR_MINUS_90\020\003*W\n\021BUTTON_IM"
    "AGE_TYPE\022\035\n\031BUTTON_IMAGE_TYPE__SPRITE\020\000\022"
    "#\n\037BUTTON_IMAGE_TYPE__SCALE9SPRITE\020\001*\202\002\n"
    "\022EDITBOX_INPUT_MODE\022\033\n\027EDITBOX_INPUT_MOD"
    "E__ANY\020\000\022%\n!EDITBOX_INPUT_MODE__EMAIL_AD"
    "DRESS\020\001\022\037\n\033EDITBOX_INPUT_MODE__NUMERIC\020\002"
    "\022$\n EDITBOX_INPUT_MODE__PHONE_NUMBER\020\003\022\033"
    "\n\027EDITBOX_INPUT_MODE__URL\020\004\022\037\n\033EDITBOX_I"
    "NPUT_MODE__DECIMAL\020\005\022#\n\037EDITBOX_INPUT_MO"
    "DE__SINGLE_LINE\020\006*\347\001\n\022EDITBOX_INPUT_FLAG"
    "\022 \n\034EDITBOX_INPUT_FLAG__PASSWORD\020\000\022!\n\035ED"
    "ITBOX_INPUT_FLAG__SENSITIVE\020\001\022)\n%EDITBOX"
    "_INPUT_FLAG__INITIAL_CAPS_WORD\020\002\022-\n)EDIT"
    "BOX_INPUT_FLAG__INITIAL_CAPS_SENTENCE\020\003\022"
    "2\n.EDITBOX_INPUT_FLAG__INTIAL_CAPS_ALL_C"
    "HARACTERS\020\004*\263\001\n\023EDITBOX_RETURN_TYPE\022 \n\034E"
    "DITBOX_RETURN_TYPE__DEFAULT\020\000\022\035\n\031EDITBOX"
    "_RETURN_TYPE__DONE\020\001\022\035\n\031EDITBOX_RETURN_T"
    "YPE__SEND\020\002\022\037\n\033EDITBOX_RETURN_TYPE__SEAR"
    "CH\020\003\022\033\n\027EDITBOX_RETURN_TYPE__GO\020\004*\335\002\n\020NO"
    "DE_ACTION_TYPE\022\032\n\026NODE_ACTION_TYPE__NONE"
    "\020\000\022\032\n\026NODE_ACTION_TYPE__LEFT\020\001\022\033\n\027NODE_A"
    "CTION_TYPE__RIGHT\020\002\022\031\n\025NODE_ACTION_TYPE_"
    "_TOP\020\003\022\034\n\030NODE_ACTION_TYPE__BOTTOM\020\004\022\033\n\027"
    "NODE_ACTION_TYPE__SCALE\020\005\022\035\n\031NODE_ACTION"
    "_TYPE__OPACITY\020\006\022\037\n\033NODE_ACTION_TYPE__OP"
    "ACITY_R\020\007\022\036\n\032NODE_ACTION_TYPE__CUSTOM_1\020"
    "\010\022\036\n\032NODE_ACTION_TYPE__CUSTOM_2\020\t\022\036\n\032NOD"
    "E_ACTION_TYPE__CUSTOM_3\020\n*\244\001\n\027ROTATE_PLA"
    "TE_ORIGIN_DIR\022!\n\035ROTATE_PLATE_ORIGIN_DIR"
    "__DOWN\020\000\022\037\n\033ROTATE_PLATE_ORIGIN_DIR__UP\020"
    "\001\022!\n\035ROTATE_PLATE_ORIGIN_DIR__LEFT\020\002\022\"\n\036"
    "ROTATE_PLATE_ORIGIN_DIR__RIGHT\020\003*\264\001\n\022REL"
    "ATIVE_SIZE_TYPE\022\034\n\030RELATIVE_SIZE_TYPE__N"
    "ONE\020\000\022 \n\034RELATIVE_SIZE_TYPE__VERTICAL\020\001\022"
    "\"\n\036RELATIVE_SIZE_TYPE__HORIZONTAL\020\002\022\034\n\030R"
    "ELATIVE_SIZE_TYPE__BOTH\020\003\022\034\n\030RELATIVE_SI"
    "ZE_TYPE__ROOT\020\004*&\n\014STENCIL_TYPE\022\n\n\006SQUAR"
    "E\020\000\022\n\n\006CUSTOM\020\001*y\n\016SCREEN_UI_TYPE\022\030\n\024SCR"
    "EEN_UI_TYPE__NONE\020\000\022\032\n\026SCREEN_UI_TYPE__B"
    "OTTOM\020\001\022\027\n\023SCREEN_UI_TYPE__TOP\020\002\022\030\n\024SCRE"
    "EN_UI_TYPE__BOTH\020\003*\311\003\n\013ENTITY_TYPE\022\020\n\014EN"
    "TITY__Node\020\n\022\030\n\024ENTITY__ClippingNode\020\013\022\026"
    "\n\022ENTITY__LayerColor\020\r\022\031\n\025ENTITY__LayerG"
    "radient\020\016\022\033\n\027ENTITY__LabelSystemFont\020\020\022\024"
    "\n\020ENTITY__LabelTTF\020\021\022\030\n\024ENTITY__TextFiel"
    "dTTF\020\022\022\023\n\017ENTITY__EditBox\020\024\022\025\n\021ENTITY__T"
    "ableView\020\025\022\027\n\023ENTITY__RotatePlate\020\026\022\020\n\014E"
    "NTITY__Menu\020\030\022\022\n\016ENTITY__Button\020\031\022\022\n\016ENT"
    "ITY__Sprite\020\033\022\030\n\024ENTITY__Scale9Sprite\020\034\022"
    "\031\n\025ENTITY__ProgressTimer\020\035\022\022\n\016ENTITY__Vi"
    "sual\020\037\022\024\n\020ENTITY__Particle\020 \022\027\n\022ENTITY__"
    "NoNeedNode\020\310\001\022\027\n\022ENTITY__SocketNode\020\311\001*\240"
    "\003\n\010CMD_TYPE\022\017\n\013CMD__Create\020\001\022\017\n\013CMD__Rem"
    "ove\020\002\022\017\n\013CMD__Modify\020\003\022\r\n\tCMD__Move\020\004\022\r\n"
    "\tCMD__Copy\020\005\022\014\n\010CMD__Cut\020\006\022\016\n\nCMD__Paste"
    "\020\007\022\022\n\016CMD__SelectOne\020\n\022\025\n\021CMD__SelectApp"
    "end\020\013\022\030\n\024CMD__SelectBoxAppend\020\014\022\026\n\022CMD__"
    "SizeToContent\020\r\022\r\n\tCMD__Undo\020\024\022\r\n\tCMD__R"
    "edo\020\025\022\020\n\014CMD__History\020\026\022\021\n\rCMD__LuaNames"
    "\020\027\022\026\n\022CMD__ApplyToViewer\020\036\022\024\n\020CMD__Clear"
    "Viewer\020\037\022\026\n\022CMD__EventToViewer\020 \022\024\n\020CMD_"
    "_ApplyToTool\020(\022\024\n\020CMD__EventToTool\020)\022\023\n\017"
    "CMD__MoveViewer\0202*\351\002\n\rEVENT_TO_TOOL\022\017\n\013E"
    "VENT__None\020\001\022\017\n\013EVENT__Save\020\013\022\021\n\rEVENT__"
    "SaveAs\020\014\022\017\n\013EVENT__Open\020\r\022\020\n\014EVENT__Clos"
    "e\020\016\022\017\n\013EVENT__Copy\020\025\022\016\n\nEVENT__Cut\020\026\022\020\n\014"
    "EVENT__Paste\020\027\022\021\n\rEVENT__Remove\020\030\022\035\n\031EVE"
    "NT__ToggleDisplayStats\020\036\022\025\n\021EVENT__Reope"
    "nView\020(\022\031\n\025EVENT__NextResolution\020)\022\031\n\025EV"
    "ENT__PrevResolution\020*\022\031\n\025EVENT__SpecReso"
    "lution\020+\022\031\n\025EVENT__ConfResolution\020,\022\030\n\024E"
    "VENT__ToggleVisible\0202*\235\002\n\017EVENT_TO_VIEWE"
    "R\022\026\n\022VIEWER_EVENT__None\020\001\022\035\n\031VIEWER_EVEN"
    "T__StrokeSize1\020\013\022\035\n\031VIEWER_EVENT__Stroke"
    "Size2\020\014\022\035\n\031VIEWER_EVENT__StrokeSize3\020\r\022\035"
    "\n\031VIEWER_EVENT__StrokeSize4\020\016\022\033\n\027VIEWER_"
    "EVENT__GridOnOff\020\024\022\035\n\031VIEWER_EVENT__Grid"
    "Opacity\020\025\022\033\n\027VIEWER_EVENT__ResetZoom\020\026\022\035"
    "\n\031VIEWER_EVENT__ResetScroll\020\027", 12909);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maker.proto", &protobuf_RegisterTypes);
  COLOR::default_instance_ = new COLOR();
  FILE::default_instance_ = new FILE();
  FILE_IMAGE::default_instance_ = new FILE_IMAGE();
  FILE_SOUND::default_instance_ = new FILE_SOUND();
  FILE_BMFONT::default_instance_ = new FILE_BMFONT();
  FILE_TTF::default_instance_ = new FILE_TTF();
  FILE_VISUAL::default_instance_ = new FILE_VISUAL();
  FILE_PLIST::default_instance_ = new FILE_PLIST();
  NAME_VISUAL_GROUP::default_instance_ = new NAME_VISUAL_GROUP();
  NAME_VISUAL::default_instance_ = new NAME_VISUAL();
  Node::default_instance_ = new Node();
  ClippingNode::default_instance_ = new ClippingNode();
  LayerColor::default_instance_ = new LayerColor();
  LayerGradient::default_instance_ = new LayerGradient();
  LabelSystemFont::_default_font_name_ =
      new ::std::string("Helvetica", 9);
  LabelSystemFont::_default_text_ =
      new ::std::string("New Label System Font", 21);
  LabelSystemFont::default_instance_ = new LabelSystemFont();
  LabelTTF::_default_text_ =
      new ::std::string("New Label TTF", 13);
  LabelTTF::default_instance_ = new LabelTTF();
  LabelBMFont::_default_text_ =
      new ::std::string("New Label BMFont", 16);
  LabelBMFont::default_instance_ = new LabelBMFont();
  TextFieldTTF::_default_text_ =
      new ::std::string("New TextField", 13);
  TextFieldTTF::default_instance_ = new TextFieldTTF();
  EditBox::_default_font_name_ =
      new ::std::string("Helvetica", 9);
  EditBox::_default_placeholder_ =
      new ::std::string("\355\205\215\354\212\244\355\212\270\353\245\274 \354\236\205\353\240\245\355\225\230\354\204\270\354\232\224.", 29);
  EditBox::_default_placeholder_font_name_ =
      new ::std::string("Helvetica", 9);
  EditBox::default_instance_ = new EditBox();
  Button::default_instance_ = new Button();
  Sprite::default_instance_ = new Sprite();
  Scale9Sprite::default_instance_ = new Scale9Sprite();
  TableView::default_instance_ = new TableView();
  ProgressTimer::default_instance_ = new ProgressTimer();
  Visual::default_instance_ = new Visual();
  SocketNode::default_instance_ = new SocketNode();
  Particle::default_instance_ = new Particle();
  RotatePlate::default_instance_ = new RotatePlate();
  Properties::default_instance_ = new Properties();
  Entity::default_instance_ = new Entity();
  CMD::default_instance_ = new CMD();
  COLOR::default_instance_->InitAsDefaultInstance();
  FILE::default_instance_->InitAsDefaultInstance();
  FILE_IMAGE::default_instance_->InitAsDefaultInstance();
  FILE_SOUND::default_instance_->InitAsDefaultInstance();
  FILE_BMFONT::default_instance_->InitAsDefaultInstance();
  FILE_TTF::default_instance_->InitAsDefaultInstance();
  FILE_VISUAL::default_instance_->InitAsDefaultInstance();
  FILE_PLIST::default_instance_->InitAsDefaultInstance();
  NAME_VISUAL_GROUP::default_instance_->InitAsDefaultInstance();
  NAME_VISUAL::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  ClippingNode::default_instance_->InitAsDefaultInstance();
  LayerColor::default_instance_->InitAsDefaultInstance();
  LayerGradient::default_instance_->InitAsDefaultInstance();
  LabelSystemFont::default_instance_->InitAsDefaultInstance();
  LabelTTF::default_instance_->InitAsDefaultInstance();
  LabelBMFont::default_instance_->InitAsDefaultInstance();
  TextFieldTTF::default_instance_->InitAsDefaultInstance();
  EditBox::default_instance_->InitAsDefaultInstance();
  Button::default_instance_->InitAsDefaultInstance();
  Sprite::default_instance_->InitAsDefaultInstance();
  Scale9Sprite::default_instance_->InitAsDefaultInstance();
  TableView::default_instance_->InitAsDefaultInstance();
  ProgressTimer::default_instance_->InitAsDefaultInstance();
  Visual::default_instance_->InitAsDefaultInstance();
  SocketNode::default_instance_->InitAsDefaultInstance();
  Particle::default_instance_->InitAsDefaultInstance();
  RotatePlate::default_instance_->InitAsDefaultInstance();
  Properties::default_instance_->InitAsDefaultInstance();
  Entity::default_instance_->InitAsDefaultInstance();
  CMD::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maker_2eproto {
  StaticDescriptorInitializer_maker_2eproto() {
    protobuf_AddDesc_maker_2eproto();
  }
} static_descriptor_initializer_maker_2eproto_;
const ::google::protobuf::EnumDescriptor* DOCK_POINT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOCK_POINT_descriptor_;
}
bool DOCK_POINT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ANCHOR_POINT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ANCHOR_POINT_descriptor_;
}
bool ANCHOR_POINT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BLEND_FUNCTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BLEND_FUNCTION_descriptor_;
}
bool BLEND_FUNCTION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEXT_ALIGNMENT_H_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEXT_ALIGNMENT_H_descriptor_;
}
bool TEXT_ALIGNMENT_H_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEXT_ALIGNMENT_V_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEXT_ALIGNMENT_V_descriptor_;
}
bool TEXT_ALIGNMENT_V_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FILL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILL_TYPE_descriptor_;
}
bool FILL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PROGRESS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PROGRESS_TYPE_descriptor_;
}
bool PROGRESS_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SCROLL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCROLL_TYPE_descriptor_;
}
bool SCROLL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PICK_PART_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PICK_PART_descriptor_;
}
bool PICK_PART_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STROKE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STROKE_TYPE_descriptor_;
}
bool STROKE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SHADOW_DIRECTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHADOW_DIRECTION_descriptor_;
}
bool SHADOW_DIRECTION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BUTTON_IMAGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUTTON_IMAGE_TYPE_descriptor_;
}
bool BUTTON_IMAGE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDITBOX_INPUT_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDITBOX_INPUT_MODE_descriptor_;
}
bool EDITBOX_INPUT_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDITBOX_INPUT_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDITBOX_INPUT_FLAG_descriptor_;
}
bool EDITBOX_INPUT_FLAG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDITBOX_RETURN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDITBOX_RETURN_TYPE_descriptor_;
}
bool EDITBOX_RETURN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NODE_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NODE_ACTION_TYPE_descriptor_;
}
bool NODE_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ROTATE_PLATE_ORIGIN_DIR_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROTATE_PLATE_ORIGIN_DIR_descriptor_;
}
bool ROTATE_PLATE_ORIGIN_DIR_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RELATIVE_SIZE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RELATIVE_SIZE_TYPE_descriptor_;
}
bool RELATIVE_SIZE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STENCIL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STENCIL_TYPE_descriptor_;
}
bool STENCIL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SCREEN_UI_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCREEN_UI_TYPE_descriptor_;
}
bool SCREEN_UI_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENTITY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENTITY_TYPE_descriptor_;
}
bool ENTITY_TYPE_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 200:
    case 201:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CMD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_TYPE_descriptor_;
}
bool CMD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 21:
    case 22:
    case 23:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVENT_TO_TOOL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVENT_TO_TOOL_descriptor_;
}
bool EVENT_TO_TOOL_IsValid(int value) {
  switch(value) {
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 21:
    case 22:
    case 23:
    case 24:
    case 30:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVENT_TO_VIEWER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVENT_TO_VIEWER_descriptor_;
}
bool EVENT_TO_VIEWER_IsValid(int value) {
  switch(value) {
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int COLOR::kRFieldNumber;
const int COLOR::kGFieldNumber;
const int COLOR::kBFieldNumber;
#endif  // !_MSC_VER

COLOR::COLOR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void COLOR::InitAsDefaultInstance() {
}

COLOR::COLOR(const COLOR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void COLOR::SharedCtor() {
  _cached_size_ = 0;
  r_ = 255;
  g_ = 255;
  b_ = 255;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COLOR::~COLOR() {
  SharedDtor();
}

void COLOR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void COLOR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COLOR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COLOR_descriptor_;
}

const COLOR& COLOR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

COLOR* COLOR::default_instance_ = NULL;

COLOR* COLOR::New() const {
  return new COLOR;
}

void COLOR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 255;
    g_ = 255;
    b_ = 255;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COLOR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 r = 1 [default = 255];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // required int32 g = 2 [default = 255];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // required int32 b = 3 [default = 255];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void COLOR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 r = 1 [default = 255];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // required int32 g = 2 [default = 255];
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // required int32 b = 3 [default = 255];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* COLOR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 r = 1 [default = 255];
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // required int32 g = 2 [default = 255];
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // required int32 b = 3 [default = 255];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int COLOR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 r = 1 [default = 255];
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // required int32 g = 2 [default = 255];
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // required int32 b = 3 [default = 255];
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COLOR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COLOR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COLOR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COLOR::MergeFrom(const COLOR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COLOR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COLOR::CopyFrom(const COLOR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COLOR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void COLOR::Swap(COLOR* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COLOR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COLOR_descriptor_;
  metadata.reflection = COLOR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FILE::kPathFieldNumber;
#endif  // !_MSC_VER

FILE::FILE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FILE::InitAsDefaultInstance() {
}

FILE::FILE(const FILE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FILE::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FILE::~FILE() {
  SharedDtor();
}

void FILE::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FILE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FILE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_descriptor_;
}

const FILE& FILE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

FILE* FILE::default_instance_ = NULL;

FILE* FILE::New() const {
  return new FILE;
}

void FILE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FILE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FILE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FILE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FILE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FILE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FILE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FILE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FILE::MergeFrom(const FILE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FILE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE::CopyFrom(const FILE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FILE::Swap(FILE* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FILE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FILE_descriptor_;
  metadata.reflection = FILE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FILE_IMAGE::kPathFieldNumber;
#endif  // !_MSC_VER

FILE_IMAGE::FILE_IMAGE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FILE_IMAGE::InitAsDefaultInstance() {
}

FILE_IMAGE::FILE_IMAGE(const FILE_IMAGE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FILE_IMAGE::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FILE_IMAGE::~FILE_IMAGE() {
  SharedDtor();
}

void FILE_IMAGE::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FILE_IMAGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FILE_IMAGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_IMAGE_descriptor_;
}

const FILE_IMAGE& FILE_IMAGE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

FILE_IMAGE* FILE_IMAGE::default_instance_ = NULL;

FILE_IMAGE* FILE_IMAGE::New() const {
  return new FILE_IMAGE;
}

void FILE_IMAGE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FILE_IMAGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FILE_IMAGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FILE_IMAGE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FILE_IMAGE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FILE_IMAGE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FILE_IMAGE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FILE_IMAGE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FILE_IMAGE::MergeFrom(const FILE_IMAGE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FILE_IMAGE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE_IMAGE::CopyFrom(const FILE_IMAGE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE_IMAGE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FILE_IMAGE::Swap(FILE_IMAGE* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FILE_IMAGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FILE_IMAGE_descriptor_;
  metadata.reflection = FILE_IMAGE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FILE_SOUND::kPathFieldNumber;
#endif  // !_MSC_VER

FILE_SOUND::FILE_SOUND()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FILE_SOUND::InitAsDefaultInstance() {
}

FILE_SOUND::FILE_SOUND(const FILE_SOUND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FILE_SOUND::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FILE_SOUND::~FILE_SOUND() {
  SharedDtor();
}

void FILE_SOUND::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FILE_SOUND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FILE_SOUND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_SOUND_descriptor_;
}

const FILE_SOUND& FILE_SOUND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

FILE_SOUND* FILE_SOUND::default_instance_ = NULL;

FILE_SOUND* FILE_SOUND::New() const {
  return new FILE_SOUND;
}

void FILE_SOUND::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FILE_SOUND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FILE_SOUND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FILE_SOUND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FILE_SOUND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FILE_SOUND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FILE_SOUND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FILE_SOUND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FILE_SOUND::MergeFrom(const FILE_SOUND& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FILE_SOUND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE_SOUND::CopyFrom(const FILE_SOUND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE_SOUND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FILE_SOUND::Swap(FILE_SOUND* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FILE_SOUND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FILE_SOUND_descriptor_;
  metadata.reflection = FILE_SOUND_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FILE_BMFONT::kPathFieldNumber;
#endif  // !_MSC_VER

FILE_BMFONT::FILE_BMFONT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FILE_BMFONT::InitAsDefaultInstance() {
}

FILE_BMFONT::FILE_BMFONT(const FILE_BMFONT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FILE_BMFONT::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FILE_BMFONT::~FILE_BMFONT() {
  SharedDtor();
}

void FILE_BMFONT::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FILE_BMFONT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FILE_BMFONT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_BMFONT_descriptor_;
}

const FILE_BMFONT& FILE_BMFONT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

FILE_BMFONT* FILE_BMFONT::default_instance_ = NULL;

FILE_BMFONT* FILE_BMFONT::New() const {
  return new FILE_BMFONT;
}

void FILE_BMFONT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FILE_BMFONT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FILE_BMFONT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FILE_BMFONT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FILE_BMFONT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FILE_BMFONT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FILE_BMFONT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FILE_BMFONT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FILE_BMFONT::MergeFrom(const FILE_BMFONT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FILE_BMFONT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE_BMFONT::CopyFrom(const FILE_BMFONT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE_BMFONT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FILE_BMFONT::Swap(FILE_BMFONT* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FILE_BMFONT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FILE_BMFONT_descriptor_;
  metadata.reflection = FILE_BMFONT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FILE_TTF::kPathFieldNumber;
#endif  // !_MSC_VER

FILE_TTF::FILE_TTF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FILE_TTF::InitAsDefaultInstance() {
}

FILE_TTF::FILE_TTF(const FILE_TTF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FILE_TTF::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FILE_TTF::~FILE_TTF() {
  SharedDtor();
}

void FILE_TTF::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FILE_TTF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FILE_TTF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_TTF_descriptor_;
}

const FILE_TTF& FILE_TTF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

FILE_TTF* FILE_TTF::default_instance_ = NULL;

FILE_TTF* FILE_TTF::New() const {
  return new FILE_TTF;
}

void FILE_TTF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FILE_TTF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FILE_TTF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FILE_TTF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FILE_TTF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FILE_TTF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FILE_TTF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FILE_TTF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FILE_TTF::MergeFrom(const FILE_TTF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FILE_TTF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE_TTF::CopyFrom(const FILE_TTF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE_TTF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FILE_TTF::Swap(FILE_TTF* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FILE_TTF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FILE_TTF_descriptor_;
  metadata.reflection = FILE_TTF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FILE_VISUAL::kPathFieldNumber;
#endif  // !_MSC_VER

FILE_VISUAL::FILE_VISUAL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FILE_VISUAL::InitAsDefaultInstance() {
}

FILE_VISUAL::FILE_VISUAL(const FILE_VISUAL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FILE_VISUAL::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FILE_VISUAL::~FILE_VISUAL() {
  SharedDtor();
}

void FILE_VISUAL::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FILE_VISUAL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FILE_VISUAL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_VISUAL_descriptor_;
}

const FILE_VISUAL& FILE_VISUAL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

FILE_VISUAL* FILE_VISUAL::default_instance_ = NULL;

FILE_VISUAL* FILE_VISUAL::New() const {
  return new FILE_VISUAL;
}

void FILE_VISUAL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FILE_VISUAL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FILE_VISUAL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FILE_VISUAL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FILE_VISUAL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FILE_VISUAL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FILE_VISUAL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FILE_VISUAL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FILE_VISUAL::MergeFrom(const FILE_VISUAL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FILE_VISUAL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE_VISUAL::CopyFrom(const FILE_VISUAL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE_VISUAL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FILE_VISUAL::Swap(FILE_VISUAL* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FILE_VISUAL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FILE_VISUAL_descriptor_;
  metadata.reflection = FILE_VISUAL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FILE_PLIST::kPathFieldNumber;
#endif  // !_MSC_VER

FILE_PLIST::FILE_PLIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FILE_PLIST::InitAsDefaultInstance() {
}

FILE_PLIST::FILE_PLIST(const FILE_PLIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FILE_PLIST::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FILE_PLIST::~FILE_PLIST() {
  SharedDtor();
}

void FILE_PLIST::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FILE_PLIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FILE_PLIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_PLIST_descriptor_;
}

const FILE_PLIST& FILE_PLIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

FILE_PLIST* FILE_PLIST::default_instance_ = NULL;

FILE_PLIST* FILE_PLIST::New() const {
  return new FILE_PLIST;
}

void FILE_PLIST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FILE_PLIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FILE_PLIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FILE_PLIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1 [default = ""];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FILE_PLIST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1 [default = ""];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FILE_PLIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FILE_PLIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FILE_PLIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FILE_PLIST::MergeFrom(const FILE_PLIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FILE_PLIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE_PLIST::CopyFrom(const FILE_PLIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE_PLIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FILE_PLIST::Swap(FILE_PLIST* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FILE_PLIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FILE_PLIST_descriptor_;
  metadata.reflection = FILE_PLIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NAME_VISUAL_GROUP::kNameFieldNumber;
#endif  // !_MSC_VER

NAME_VISUAL_GROUP::NAME_VISUAL_GROUP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NAME_VISUAL_GROUP::InitAsDefaultInstance() {
}

NAME_VISUAL_GROUP::NAME_VISUAL_GROUP(const NAME_VISUAL_GROUP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NAME_VISUAL_GROUP::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NAME_VISUAL_GROUP::~NAME_VISUAL_GROUP() {
  SharedDtor();
}

void NAME_VISUAL_GROUP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NAME_VISUAL_GROUP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NAME_VISUAL_GROUP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NAME_VISUAL_GROUP_descriptor_;
}

const NAME_VISUAL_GROUP& NAME_VISUAL_GROUP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

NAME_VISUAL_GROUP* NAME_VISUAL_GROUP::default_instance_ = NULL;

NAME_VISUAL_GROUP* NAME_VISUAL_GROUP::New() const {
  return new NAME_VISUAL_GROUP;
}

void NAME_VISUAL_GROUP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NAME_VISUAL_GROUP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NAME_VISUAL_GROUP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NAME_VISUAL_GROUP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NAME_VISUAL_GROUP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NAME_VISUAL_GROUP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NAME_VISUAL_GROUP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NAME_VISUAL_GROUP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NAME_VISUAL_GROUP::MergeFrom(const NAME_VISUAL_GROUP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NAME_VISUAL_GROUP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAME_VISUAL_GROUP::CopyFrom(const NAME_VISUAL_GROUP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAME_VISUAL_GROUP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NAME_VISUAL_GROUP::Swap(NAME_VISUAL_GROUP* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NAME_VISUAL_GROUP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NAME_VISUAL_GROUP_descriptor_;
  metadata.reflection = NAME_VISUAL_GROUP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NAME_VISUAL::kNameFieldNumber;
#endif  // !_MSC_VER

NAME_VISUAL::NAME_VISUAL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NAME_VISUAL::InitAsDefaultInstance() {
}

NAME_VISUAL::NAME_VISUAL(const NAME_VISUAL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NAME_VISUAL::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NAME_VISUAL::~NAME_VISUAL() {
  SharedDtor();
}

void NAME_VISUAL::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NAME_VISUAL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NAME_VISUAL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NAME_VISUAL_descriptor_;
}

const NAME_VISUAL& NAME_VISUAL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

NAME_VISUAL* NAME_VISUAL::default_instance_ = NULL;

NAME_VISUAL* NAME_VISUAL::New() const {
  return new NAME_VISUAL;
}

void NAME_VISUAL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NAME_VISUAL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NAME_VISUAL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NAME_VISUAL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NAME_VISUAL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NAME_VISUAL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NAME_VISUAL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NAME_VISUAL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NAME_VISUAL::MergeFrom(const NAME_VISUAL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NAME_VISUAL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAME_VISUAL::CopyFrom(const NAME_VISUAL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAME_VISUAL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NAME_VISUAL::Swap(NAME_VISUAL* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NAME_VISUAL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NAME_VISUAL_descriptor_;
  metadata.reflection = NAME_VISUAL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kUiNameFieldNumber;
const int Node::kFlagFieldNumber;
const int Node::kXFieldNumber;
const int Node::kYFieldNumber;
const int Node::kDockPointFieldNumber;
const int Node::kAnchorPointFieldNumber;
const int Node::kRelativeSizeTypeFieldNumber;
const int Node::kRelWidthFieldNumber;
const int Node::kRelHeightFieldNumber;
const int Node::kWidthFieldNumber;
const int Node::kHeightFieldNumber;
const int Node::kScaleXFieldNumber;
const int Node::kScaleYFieldNumber;
const int Node::kSkewXFieldNumber;
const int Node::kSkewYFieldNumber;
const int Node::kRotationFieldNumber;
const int Node::kVisibleFieldNumber;
const int Node::kActionTypeFieldNumber;
const int Node::kActionDelay1FieldNumber;
const int Node::kActionDelay2FieldNumber;
const int Node::kActionDurationFieldNumber;
const int Node::kScreenUiFieldNumber;
const int Node::kLuaNameFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  ui_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  dock_point_ = 4;
  anchor_point_ = 4;
  relative_size_type_ = 0;
  rel_width_ = 0;
  rel_height_ = 0;
  width_ = 100;
  height_ = 100;
  scale_x_ = 1;
  scale_y_ = 1;
  skew_x_ = 0;
  skew_y_ = 0;
  rotation_ = 0;
  visible_ = true;
  action_type_ = 0;
  action_delay_1_ = 0;
  action_delay_2_ = 0;
  action_duration_ = 0;
  screen_ui_ = 0;
  lua_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (ui_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ui_name_;
  }
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (lua_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lua_name_;
  }
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ui_name()) {
      if (ui_name_ != &::google::protobuf::internal::kEmptyString) {
        ui_name_->clear();
      }
    }
    if (has_flag()) {
      if (flag_ != &::google::protobuf::internal::kEmptyString) {
        flag_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    dock_point_ = 4;
    anchor_point_ = 4;
    relative_size_type_ = 0;
    rel_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rel_height_ = 0;
    width_ = 100;
    height_ = 100;
    scale_x_ = 1;
    scale_y_ = 1;
    skew_x_ = 0;
    skew_y_ = 0;
    rotation_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    visible_ = true;
    action_type_ = 0;
    action_delay_1_ = 0;
    action_delay_2_ = 0;
    action_duration_ = 0;
    screen_ui_ = 0;
    if (has_lua_name()) {
      if (lua_name_ != &::google::protobuf::internal::kEmptyString) {
        lua_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ui_name = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ui_name().data(), this->ui_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flag;
        break;
      }

      // optional string flag = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // optional float x = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // optional float y = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dock_point;
        break;
      }

      // optional .maker.DOCK_POINT dock_point = 5 [default = DOCK__MIDDLE_CENTER];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dock_point:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::DOCK_POINT_IsValid(value)) {
            set_dock_point(static_cast< ::maker::DOCK_POINT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_anchor_point;
        break;
      }

      // optional .maker.ANCHOR_POINT anchor_point = 6 [default = ANCHOR__MIDDLE_CENTER];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anchor_point:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::ANCHOR_POINT_IsValid(value)) {
            set_anchor_point(static_cast< ::maker::ANCHOR_POINT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_relative_size_type;
        break;
      }

      // optional .maker.RELATIVE_SIZE_TYPE relative_size_type = 7 [default = RELATIVE_SIZE_TYPE__NONE];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relative_size_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::RELATIVE_SIZE_TYPE_IsValid(value)) {
            set_relative_size_type(static_cast< ::maker::RELATIVE_SIZE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rel_width;
        break;
      }

      // optional int32 rel_width = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rel_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rel_width_)));
          set_has_rel_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rel_height;
        break;
      }

      // optional int32 rel_height = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rel_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rel_height_)));
          set_has_rel_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_width;
        break;
      }

      // optional int32 width = 10 [default = 100];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_height;
        break;
      }

      // optional int32 height = 11 [default = 100];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_scale_x;
        break;
      }

      // optional float scale_x = 12 [default = 1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_x_)));
          set_has_scale_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_scale_y;
        break;
      }

      // optional float scale_y = 13 [default = 1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_y_)));
          set_has_scale_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_skew_x;
        break;
      }

      // optional float skew_x = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skew_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skew_x_)));
          set_has_skew_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_skew_y;
        break;
      }

      // optional float skew_y = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skew_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skew_y_)));
          set_has_skew_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_rotation;
        break;
      }

      // optional float rotation = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_visible;
        break;
      }

      // optional bool visible = 17 [default = true];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_action_type;
        break;
      }

      // optional .maker.NODE_ACTION_TYPE action_type = 18 [default = NODE_ACTION_TYPE__NONE];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::NODE_ACTION_TYPE_IsValid(value)) {
            set_action_type(static_cast< ::maker::NODE_ACTION_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_action_delay_1;
        break;
      }

      // optional float action_delay_1 = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_action_delay_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &action_delay_1_)));
          set_has_action_delay_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_action_delay_2;
        break;
      }

      // optional float action_delay_2 = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_action_delay_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &action_delay_2_)));
          set_has_action_delay_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_action_duration;
        break;
      }

      // optional float action_duration = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_action_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &action_duration_)));
          set_has_action_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_screen_ui;
        break;
      }

      // optional .maker.SCREEN_UI_TYPE screen_ui = 22 [default = SCREEN_UI_TYPE__NONE];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_ui:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::SCREEN_UI_TYPE_IsValid(value)) {
            set_screen_ui(static_cast< ::maker::SCREEN_UI_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_lua_name;
        break;
      }

      // optional string lua_name = 23 [default = ""];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lua_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lua_name().data(), this->lua_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ui_name = 1 [default = ""];
  if (has_ui_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ui_name().data(), this->ui_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ui_name(), output);
  }

  // optional string flag = 2 [default = ""];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->flag(), output);
  }

  // optional float x = 3 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional .maker.DOCK_POINT dock_point = 5 [default = DOCK__MIDDLE_CENTER];
  if (has_dock_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dock_point(), output);
  }

  // optional .maker.ANCHOR_POINT anchor_point = 6 [default = ANCHOR__MIDDLE_CENTER];
  if (has_anchor_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->anchor_point(), output);
  }

  // optional .maker.RELATIVE_SIZE_TYPE relative_size_type = 7 [default = RELATIVE_SIZE_TYPE__NONE];
  if (has_relative_size_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->relative_size_type(), output);
  }

  // optional int32 rel_width = 8 [default = 0];
  if (has_rel_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rel_width(), output);
  }

  // optional int32 rel_height = 9 [default = 0];
  if (has_rel_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rel_height(), output);
  }

  // optional int32 width = 10 [default = 100];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->width(), output);
  }

  // optional int32 height = 11 [default = 100];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->height(), output);
  }

  // optional float scale_x = 12 [default = 1];
  if (has_scale_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->scale_x(), output);
  }

  // optional float scale_y = 13 [default = 1];
  if (has_scale_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->scale_y(), output);
  }

  // optional float skew_x = 14 [default = 0];
  if (has_skew_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->skew_x(), output);
  }

  // optional float skew_y = 15 [default = 0];
  if (has_skew_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->skew_y(), output);
  }

  // optional float rotation = 16 [default = 0];
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->rotation(), output);
  }

  // optional bool visible = 17 [default = true];
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->visible(), output);
  }

  // optional .maker.NODE_ACTION_TYPE action_type = 18 [default = NODE_ACTION_TYPE__NONE];
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->action_type(), output);
  }

  // optional float action_delay_1 = 19 [default = 0];
  if (has_action_delay_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->action_delay_1(), output);
  }

  // optional float action_delay_2 = 20 [default = 0];
  if (has_action_delay_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->action_delay_2(), output);
  }

  // optional float action_duration = 21 [default = 0];
  if (has_action_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->action_duration(), output);
  }

  // optional .maker.SCREEN_UI_TYPE screen_ui = 22 [default = SCREEN_UI_TYPE__NONE];
  if (has_screen_ui()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->screen_ui(), output);
  }

  // optional string lua_name = 23 [default = ""];
  if (has_lua_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua_name().data(), this->lua_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->lua_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ui_name = 1 [default = ""];
  if (has_ui_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ui_name().data(), this->ui_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ui_name(), target);
  }

  // optional string flag = 2 [default = ""];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flag(), target);
  }

  // optional float x = 3 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional .maker.DOCK_POINT dock_point = 5 [default = DOCK__MIDDLE_CENTER];
  if (has_dock_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dock_point(), target);
  }

  // optional .maker.ANCHOR_POINT anchor_point = 6 [default = ANCHOR__MIDDLE_CENTER];
  if (has_anchor_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->anchor_point(), target);
  }

  // optional .maker.RELATIVE_SIZE_TYPE relative_size_type = 7 [default = RELATIVE_SIZE_TYPE__NONE];
  if (has_relative_size_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->relative_size_type(), target);
  }

  // optional int32 rel_width = 8 [default = 0];
  if (has_rel_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rel_width(), target);
  }

  // optional int32 rel_height = 9 [default = 0];
  if (has_rel_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rel_height(), target);
  }

  // optional int32 width = 10 [default = 100];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->width(), target);
  }

  // optional int32 height = 11 [default = 100];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->height(), target);
  }

  // optional float scale_x = 12 [default = 1];
  if (has_scale_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->scale_x(), target);
  }

  // optional float scale_y = 13 [default = 1];
  if (has_scale_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->scale_y(), target);
  }

  // optional float skew_x = 14 [default = 0];
  if (has_skew_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->skew_x(), target);
  }

  // optional float skew_y = 15 [default = 0];
  if (has_skew_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->skew_y(), target);
  }

  // optional float rotation = 16 [default = 0];
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->rotation(), target);
  }

  // optional bool visible = 17 [default = true];
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->visible(), target);
  }

  // optional .maker.NODE_ACTION_TYPE action_type = 18 [default = NODE_ACTION_TYPE__NONE];
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->action_type(), target);
  }

  // optional float action_delay_1 = 19 [default = 0];
  if (has_action_delay_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->action_delay_1(), target);
  }

  // optional float action_delay_2 = 20 [default = 0];
  if (has_action_delay_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->action_delay_2(), target);
  }

  // optional float action_duration = 21 [default = 0];
  if (has_action_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->action_duration(), target);
  }

  // optional .maker.SCREEN_UI_TYPE screen_ui = 22 [default = SCREEN_UI_TYPE__NONE];
  if (has_screen_ui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->screen_ui(), target);
  }

  // optional string lua_name = 23 [default = ""];
  if (has_lua_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua_name().data(), this->lua_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->lua_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ui_name = 1 [default = ""];
    if (has_ui_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui_name());
    }

    // optional string flag = 2 [default = ""];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag());
    }

    // optional float x = 3 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional .maker.DOCK_POINT dock_point = 5 [default = DOCK__MIDDLE_CENTER];
    if (has_dock_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dock_point());
    }

    // optional .maker.ANCHOR_POINT anchor_point = 6 [default = ANCHOR__MIDDLE_CENTER];
    if (has_anchor_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor_point());
    }

    // optional .maker.RELATIVE_SIZE_TYPE relative_size_type = 7 [default = RELATIVE_SIZE_TYPE__NONE];
    if (has_relative_size_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relative_size_type());
    }

    // optional int32 rel_width = 8 [default = 0];
    if (has_rel_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rel_width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rel_height = 9 [default = 0];
    if (has_rel_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rel_height());
    }

    // optional int32 width = 10 [default = 100];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 11 [default = 100];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional float scale_x = 12 [default = 1];
    if (has_scale_x()) {
      total_size += 1 + 4;
    }

    // optional float scale_y = 13 [default = 1];
    if (has_scale_y()) {
      total_size += 1 + 4;
    }

    // optional float skew_x = 14 [default = 0];
    if (has_skew_x()) {
      total_size += 1 + 4;
    }

    // optional float skew_y = 15 [default = 0];
    if (has_skew_y()) {
      total_size += 1 + 4;
    }

    // optional float rotation = 16 [default = 0];
    if (has_rotation()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool visible = 17 [default = true];
    if (has_visible()) {
      total_size += 2 + 1;
    }

    // optional .maker.NODE_ACTION_TYPE action_type = 18 [default = NODE_ACTION_TYPE__NONE];
    if (has_action_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }

    // optional float action_delay_1 = 19 [default = 0];
    if (has_action_delay_1()) {
      total_size += 2 + 4;
    }

    // optional float action_delay_2 = 20 [default = 0];
    if (has_action_delay_2()) {
      total_size += 2 + 4;
    }

    // optional float action_duration = 21 [default = 0];
    if (has_action_duration()) {
      total_size += 2 + 4;
    }

    // optional .maker.SCREEN_UI_TYPE screen_ui = 22 [default = SCREEN_UI_TYPE__NONE];
    if (has_screen_ui()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->screen_ui());
    }

    // optional string lua_name = 23 [default = ""];
    if (has_lua_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ui_name()) {
      set_ui_name(from.ui_name());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dock_point()) {
      set_dock_point(from.dock_point());
    }
    if (from.has_anchor_point()) {
      set_anchor_point(from.anchor_point());
    }
    if (from.has_relative_size_type()) {
      set_relative_size_type(from.relative_size_type());
    }
    if (from.has_rel_width()) {
      set_rel_width(from.rel_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rel_height()) {
      set_rel_height(from.rel_height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_scale_x()) {
      set_scale_x(from.scale_x());
    }
    if (from.has_scale_y()) {
      set_scale_y(from.scale_y());
    }
    if (from.has_skew_x()) {
      set_skew_x(from.skew_x());
    }
    if (from.has_skew_y()) {
      set_skew_y(from.skew_y());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_action_delay_1()) {
      set_action_delay_1(from.action_delay_1());
    }
    if (from.has_action_delay_2()) {
      set_action_delay_2(from.action_delay_2());
    }
    if (from.has_action_duration()) {
      set_action_duration(from.action_duration());
    }
    if (from.has_screen_ui()) {
      set_screen_ui(from.screen_ui());
    }
    if (from.has_lua_name()) {
      set_lua_name(from.lua_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(ui_name_, other->ui_name_);
    std::swap(flag_, other->flag_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(dock_point_, other->dock_point_);
    std::swap(anchor_point_, other->anchor_point_);
    std::swap(relative_size_type_, other->relative_size_type_);
    std::swap(rel_width_, other->rel_width_);
    std::swap(rel_height_, other->rel_height_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(scale_x_, other->scale_x_);
    std::swap(scale_y_, other->scale_y_);
    std::swap(skew_x_, other->skew_x_);
    std::swap(skew_y_, other->skew_y_);
    std::swap(rotation_, other->rotation_);
    std::swap(visible_, other->visible_);
    std::swap(action_type_, other->action_type_);
    std::swap(action_delay_1_, other->action_delay_1_);
    std::swap(action_delay_2_, other->action_delay_2_);
    std::swap(action_duration_, other->action_duration_);
    std::swap(screen_ui_, other->screen_ui_);
    std::swap(lua_name_, other->lua_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClippingNode::kStencilTypeFieldNumber;
const int ClippingNode::kStencilImgFieldNumber;
const int ClippingNode::kAlphaThresholdFieldNumber;
const int ClippingNode::kIsInvertFieldNumber;
#endif  // !_MSC_VER

ClippingNode::ClippingNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClippingNode::InitAsDefaultInstance() {
  stencil_img_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
}

ClippingNode::ClippingNode(const ClippingNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClippingNode::SharedCtor() {
  _cached_size_ = 0;
  stencil_type_ = 0;
  stencil_img_ = NULL;
  alpha_threshold_ = 1;
  is_invert_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClippingNode::~ClippingNode() {
  SharedDtor();
}

void ClippingNode::SharedDtor() {
  if (this != default_instance_) {
    delete stencil_img_;
  }
}

void ClippingNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClippingNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClippingNode_descriptor_;
}

const ClippingNode& ClippingNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

ClippingNode* ClippingNode::default_instance_ = NULL;

ClippingNode* ClippingNode::New() const {
  return new ClippingNode;
}

void ClippingNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stencil_type_ = 0;
    if (has_stencil_img()) {
      if (stencil_img_ != NULL) stencil_img_->::maker::FILE_IMAGE::Clear();
    }
    alpha_threshold_ = 1;
    is_invert_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClippingNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.STENCIL_TYPE stencil_type = 1 [default = SQUARE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::STENCIL_TYPE_IsValid(value)) {
            set_stencil_type(static_cast< ::maker::STENCIL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stencil_img;
        break;
      }

      // optional .maker.FILE_IMAGE stencil_img = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stencil_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stencil_img()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alpha_threshold;
        break;
      }

      // optional float alpha_threshold = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_threshold_)));
          set_has_alpha_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_invert;
        break;
      }

      // optional bool is_invert = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_invert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invert_)));
          set_has_is_invert();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClippingNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.STENCIL_TYPE stencil_type = 1 [default = SQUARE];
  if (has_stencil_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stencil_type(), output);
  }

  // optional .maker.FILE_IMAGE stencil_img = 2;
  if (has_stencil_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stencil_img(), output);
  }

  // optional float alpha_threshold = 3 [default = 1];
  if (has_alpha_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha_threshold(), output);
  }

  // optional bool is_invert = 4 [default = false];
  if (has_is_invert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_invert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClippingNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.STENCIL_TYPE stencil_type = 1 [default = SQUARE];
  if (has_stencil_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stencil_type(), target);
  }

  // optional .maker.FILE_IMAGE stencil_img = 2;
  if (has_stencil_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stencil_img(), target);
  }

  // optional float alpha_threshold = 3 [default = 1];
  if (has_alpha_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha_threshold(), target);
  }

  // optional bool is_invert = 4 [default = false];
  if (has_is_invert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_invert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClippingNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.STENCIL_TYPE stencil_type = 1 [default = SQUARE];
    if (has_stencil_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stencil_type());
    }

    // optional .maker.FILE_IMAGE stencil_img = 2;
    if (has_stencil_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stencil_img());
    }

    // optional float alpha_threshold = 3 [default = 1];
    if (has_alpha_threshold()) {
      total_size += 1 + 4;
    }

    // optional bool is_invert = 4 [default = false];
    if (has_is_invert()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClippingNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClippingNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClippingNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClippingNode::MergeFrom(const ClippingNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stencil_type()) {
      set_stencil_type(from.stencil_type());
    }
    if (from.has_stencil_img()) {
      mutable_stencil_img()->::maker::FILE_IMAGE::MergeFrom(from.stencil_img());
    }
    if (from.has_alpha_threshold()) {
      set_alpha_threshold(from.alpha_threshold());
    }
    if (from.has_is_invert()) {
      set_is_invert(from.is_invert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClippingNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClippingNode::CopyFrom(const ClippingNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClippingNode::IsInitialized() const {

  if (has_stencil_img()) {
    if (!this->stencil_img().IsInitialized()) return false;
  }
  return true;
}

void ClippingNode::Swap(ClippingNode* other) {
  if (other != this) {
    std::swap(stencil_type_, other->stencil_type_);
    std::swap(stencil_img_, other->stencil_img_);
    std::swap(alpha_threshold_, other->alpha_threshold_);
    std::swap(is_invert_, other->is_invert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClippingNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClippingNode_descriptor_;
  metadata.reflection = ClippingNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerColor::kColorFieldNumber;
const int LayerColor::kOpacityFieldNumber;
const int LayerColor::kSrcBlendFieldNumber;
const int LayerColor::kDestBlendFieldNumber;
#endif  // !_MSC_VER

LayerColor::LayerColor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayerColor::InitAsDefaultInstance() {
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

LayerColor::LayerColor(const LayerColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayerColor::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  opacity_ = 255;
  src_blend_ = 770;
  dest_blend_ = 771;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerColor::~LayerColor() {
  SharedDtor();
}

void LayerColor::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
  }
}

void LayerColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerColor_descriptor_;
}

const LayerColor& LayerColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

LayerColor* LayerColor::default_instance_ = NULL;

LayerColor* LayerColor::New() const {
  return new LayerColor;
}

void LayerColor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    src_blend_ = 770;
    dest_blend_ = 771;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.COLOR color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 2 [default = 255];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_src_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_dest_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.COLOR color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->color(), output);
  }

  // optional int32 opacity = 2 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opacity(), output);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->src_blend(), output);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dest_blend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayerColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.COLOR color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->color(), target);
  }

  // optional int32 opacity = 2 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opacity(), target);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->src_blend(), target);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dest_blend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayerColor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.COLOR color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 2 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
    if (has_src_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_blend());
    }

    // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
    if (has_dest_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest_blend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerColor::MergeFrom(const LayerColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_src_blend()) {
      set_src_blend(from.src_blend());
    }
    if (from.has_dest_blend()) {
      set_dest_blend(from.dest_blend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerColor::CopyFrom(const LayerColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerColor::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void LayerColor::Swap(LayerColor* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(src_blend_, other->src_blend_);
    std::swap(dest_blend_, other->dest_blend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerColor_descriptor_;
  metadata.reflection = LayerColor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerGradient::kColorFieldNumber;
const int LayerGradient::kOpacityFieldNumber;
const int LayerGradient::kSrcBlendFieldNumber;
const int LayerGradient::kDestBlendFieldNumber;
const int LayerGradient::kStartColorFieldNumber;
const int LayerGradient::kEndColorFieldNumber;
const int LayerGradient::kStartOpacityFieldNumber;
const int LayerGradient::kEndOpacityFieldNumber;
const int LayerGradient::kAngleFieldNumber;
#endif  // !_MSC_VER

LayerGradient::LayerGradient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayerGradient::InitAsDefaultInstance() {
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  start_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  end_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

LayerGradient::LayerGradient(const LayerGradient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayerGradient::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  opacity_ = 255;
  src_blend_ = 770;
  dest_blend_ = 771;
  start_color_ = NULL;
  end_color_ = NULL;
  start_opacity_ = 255;
  end_opacity_ = 255;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerGradient::~LayerGradient() {
  SharedDtor();
}

void LayerGradient::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete start_color_;
    delete end_color_;
  }
}

void LayerGradient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerGradient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerGradient_descriptor_;
}

const LayerGradient& LayerGradient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

LayerGradient* LayerGradient::default_instance_ = NULL;

LayerGradient* LayerGradient::New() const {
  return new LayerGradient;
}

void LayerGradient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    src_blend_ = 770;
    dest_blend_ = 771;
    if (has_start_color()) {
      if (start_color_ != NULL) start_color_->::maker::COLOR::Clear();
    }
    if (has_end_color()) {
      if (end_color_ != NULL) end_color_->::maker::COLOR::Clear();
    }
    start_opacity_ = 255;
    end_opacity_ = 255;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerGradient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.COLOR color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 2 [default = 255];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_src_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_dest_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_color;
        break;
      }

      // optional .maker.COLOR start_color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_color;
        break;
      }

      // optional .maker.COLOR end_color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_start_opacity;
        break;
      }

      // optional int32 start_opacity = 7 [default = 255];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_opacity_)));
          set_has_start_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_opacity;
        break;
      }

      // optional int32 end_opacity = 8 [default = 255];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_opacity_)));
          set_has_end_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_angle;
        break;
      }

      // optional float angle = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerGradient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.COLOR color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->color(), output);
  }

  // optional int32 opacity = 2 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opacity(), output);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->src_blend(), output);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dest_blend(), output);
  }

  // optional .maker.COLOR start_color = 5;
  if (has_start_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_color(), output);
  }

  // optional .maker.COLOR end_color = 6;
  if (has_end_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_color(), output);
  }

  // optional int32 start_opacity = 7 [default = 255];
  if (has_start_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->start_opacity(), output);
  }

  // optional int32 end_opacity = 8 [default = 255];
  if (has_end_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->end_opacity(), output);
  }

  // optional float angle = 9 [default = 0];
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayerGradient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.COLOR color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->color(), target);
  }

  // optional int32 opacity = 2 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opacity(), target);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->src_blend(), target);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dest_blend(), target);
  }

  // optional .maker.COLOR start_color = 5;
  if (has_start_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_color(), target);
  }

  // optional .maker.COLOR end_color = 6;
  if (has_end_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_color(), target);
  }

  // optional int32 start_opacity = 7 [default = 255];
  if (has_start_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->start_opacity(), target);
  }

  // optional int32 end_opacity = 8 [default = 255];
  if (has_end_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->end_opacity(), target);
  }

  // optional float angle = 9 [default = 0];
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayerGradient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.COLOR color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 2 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional .maker.BLEND_FUNCTION src_blend = 3 [default = BLEND__GL_SRC_ALPHA];
    if (has_src_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_blend());
    }

    // optional .maker.BLEND_FUNCTION dest_blend = 4 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
    if (has_dest_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest_blend());
    }

    // optional .maker.COLOR start_color = 5;
    if (has_start_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_color());
    }

    // optional .maker.COLOR end_color = 6;
    if (has_end_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_color());
    }

    // optional int32 start_opacity = 7 [default = 255];
    if (has_start_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_opacity());
    }

    // optional int32 end_opacity = 8 [default = 255];
    if (has_end_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_opacity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float angle = 9 [default = 0];
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerGradient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerGradient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerGradient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerGradient::MergeFrom(const LayerGradient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_src_blend()) {
      set_src_blend(from.src_blend());
    }
    if (from.has_dest_blend()) {
      set_dest_blend(from.dest_blend());
    }
    if (from.has_start_color()) {
      mutable_start_color()->::maker::COLOR::MergeFrom(from.start_color());
    }
    if (from.has_end_color()) {
      mutable_end_color()->::maker::COLOR::MergeFrom(from.end_color());
    }
    if (from.has_start_opacity()) {
      set_start_opacity(from.start_opacity());
    }
    if (from.has_end_opacity()) {
      set_end_opacity(from.end_opacity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerGradient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerGradient::CopyFrom(const LayerGradient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerGradient::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_start_color()) {
    if (!this->start_color().IsInitialized()) return false;
  }
  if (has_end_color()) {
    if (!this->end_color().IsInitialized()) return false;
  }
  return true;
}

void LayerGradient::Swap(LayerGradient* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(src_blend_, other->src_blend_);
    std::swap(dest_blend_, other->dest_blend_);
    std::swap(start_color_, other->start_color_);
    std::swap(end_color_, other->end_color_);
    std::swap(start_opacity_, other->start_opacity_);
    std::swap(end_opacity_, other->end_opacity_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerGradient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerGradient_descriptor_;
  metadata.reflection = LayerGradient_reflection_;
  return metadata;
}


// ===================================================================

::std::string* LabelSystemFont::_default_font_name_ = NULL;
::std::string* LabelSystemFont::_default_text_ = NULL;
#ifndef _MSC_VER
const int LabelSystemFont::kFontNameFieldNumber;
const int LabelSystemFont::kFontSizeFieldNumber;
const int LabelSystemFont::kTextFieldNumber;
const int LabelSystemFont::kHAlignmentFieldNumber;
const int LabelSystemFont::kVAlignmentFieldNumber;
const int LabelSystemFont::kColorFieldNumber;
const int LabelSystemFont::kOpacityFieldNumber;
const int LabelSystemFont::kDimensionWidthFieldNumber;
const int LabelSystemFont::kDimensionHeightFieldNumber;
const int LabelSystemFont::kHasShadowFieldNumber;
const int LabelSystemFont::kShadowColorFieldNumber;
const int LabelSystemFont::kShadowOpacityFieldNumber;
const int LabelSystemFont::kShadowDirectionFieldNumber;
const int LabelSystemFont::kShadowDistanceFieldNumber;
#endif  // !_MSC_VER

LabelSystemFont::LabelSystemFont()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelSystemFont::InitAsDefaultInstance() {
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  shadow_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

LabelSystemFont::LabelSystemFont(const LabelSystemFont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelSystemFont::SharedCtor() {
  _cached_size_ = 0;
  font_name_ = const_cast< ::std::string*>(_default_font_name_);
  font_size_ = 10;
  text_ = const_cast< ::std::string*>(_default_text_);
  h_alignment_ = 1;
  v_alignment_ = 1;
  color_ = NULL;
  opacity_ = 255;
  dimension_width_ = 0;
  dimension_height_ = 0;
  has_shadow_ = false;
  shadow_color_ = NULL;
  shadow_opacity_ = 255;
  shadow_direction_ = 0;
  shadow_distance_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelSystemFont::~LabelSystemFont() {
  SharedDtor();
}

void LabelSystemFont::SharedDtor() {
  if (font_name_ != _default_font_name_) {
    delete font_name_;
  }
  if (text_ != _default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
    delete color_;
    delete shadow_color_;
  }
}

void LabelSystemFont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSystemFont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelSystemFont_descriptor_;
}

const LabelSystemFont& LabelSystemFont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

LabelSystemFont* LabelSystemFont::default_instance_ = NULL;

LabelSystemFont* LabelSystemFont::New() const {
  return new LabelSystemFont;
}

void LabelSystemFont::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_font_name()) {
      if (font_name_ != _default_font_name_) {
        font_name_->assign(*_default_font_name_);
      }
    }
    font_size_ = 10;
    if (has_text()) {
      if (text_ != _default_text_) {
        text_->assign(*_default_text_);
      }
    }
    h_alignment_ = 1;
    v_alignment_ = 1;
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    dimension_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dimension_height_ = 0;
    has_shadow_ = false;
    if (has_shadow_color()) {
      if (shadow_color_ != NULL) shadow_color_->::maker::COLOR::Clear();
    }
    shadow_opacity_ = 255;
    shadow_direction_ = 0;
    shadow_distance_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelSystemFont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string font_name = 1 [default = "Helvetica"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_font_size;
        break;
      }

      // optional int32 font_size = 2 [default = 10];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3 [default = "New Label System Font"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_H_IsValid(value)) {
            set_h_alignment(static_cast< ::maker::TEXT_ALIGNMENT_H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_v_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_V_IsValid(value)) {
            set_v_alignment(static_cast< ::maker::TEXT_ALIGNMENT_V >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 7 [default = 255];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dimension_width;
        break;
      }

      // optional int32 dimension_width = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_width_)));
          set_has_dimension_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dimension_height;
        break;
      }

      // optional int32 dimension_height = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_height_)));
          set_has_dimension_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_has_shadow;
        break;
      }

      // optional bool has_shadow = 31 [default = false];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_shadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_shadow_)));
          set_has_has_shadow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_shadow_color;
        break;
      }

      // optional .maker.COLOR shadow_color = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_shadow_opacity;
        break;
      }

      // optional int32 shadow_opacity = 33 [default = 255];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadow_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shadow_opacity_)));
          set_has_shadow_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_shadow_direction;
        break;
      }

      // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadow_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::SHADOW_DIRECTION_IsValid(value)) {
            set_shadow_direction(static_cast< ::maker::SHADOW_DIRECTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_shadow_distance;
        break;
      }

      // optional float shadow_distance = 35 [default = 5];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shadow_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadow_distance_)));
          set_has_shadow_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelSystemFont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string font_name = 1 [default = "Helvetica"];
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->font_name(), output);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->font_size(), output);
  }

  // optional string text = 3 [default = "New Label System Font"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->h_alignment(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->v_alignment(), output);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->color(), output);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->opacity(), output);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dimension_width(), output);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dimension_height(), output);
  }

  // optional bool has_shadow = 31 [default = false];
  if (has_has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->has_shadow(), output);
  }

  // optional .maker.COLOR shadow_color = 32;
  if (has_shadow_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->shadow_color(), output);
  }

  // optional int32 shadow_opacity = 33 [default = 255];
  if (has_shadow_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->shadow_opacity(), output);
  }

  // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
  if (has_shadow_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->shadow_direction(), output);
  }

  // optional float shadow_distance = 35 [default = 5];
  if (has_shadow_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->shadow_distance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelSystemFont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string font_name = 1 [default = "Helvetica"];
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->font_name(), target);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->font_size(), target);
  }

  // optional string text = 3 [default = "New Label System Font"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->h_alignment(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->v_alignment(), target);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->color(), target);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->opacity(), target);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dimension_width(), target);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dimension_height(), target);
  }

  // optional bool has_shadow = 31 [default = false];
  if (has_has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->has_shadow(), target);
  }

  // optional .maker.COLOR shadow_color = 32;
  if (has_shadow_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->shadow_color(), target);
  }

  // optional int32 shadow_opacity = 33 [default = 255];
  if (has_shadow_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->shadow_opacity(), target);
  }

  // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
  if (has_shadow_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->shadow_direction(), target);
  }

  // optional float shadow_distance = 35 [default = 5];
  if (has_shadow_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->shadow_distance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelSystemFont::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string font_name = 1 [default = "Helvetica"];
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional int32 font_size = 2 [default = 10];
    if (has_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_size());
    }

    // optional string text = 3 [default = "New Label System Font"];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
    if (has_h_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->h_alignment());
    }

    // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
    if (has_v_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->v_alignment());
    }

    // optional .maker.COLOR color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 7 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional int32 dimension_width = 8 [default = 0];
    if (has_dimension_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dimension_height = 9 [default = 0];
    if (has_dimension_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_height());
    }

    // optional bool has_shadow = 31 [default = false];
    if (has_has_shadow()) {
      total_size += 2 + 1;
    }

    // optional .maker.COLOR shadow_color = 32;
    if (has_shadow_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow_color());
    }

    // optional int32 shadow_opacity = 33 [default = 255];
    if (has_shadow_opacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shadow_opacity());
    }

    // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
    if (has_shadow_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shadow_direction());
    }

    // optional float shadow_distance = 35 [default = 5];
    if (has_shadow_distance()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSystemFont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelSystemFont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelSystemFont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelSystemFont::MergeFrom(const LabelSystemFont& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_font_name()) {
      set_font_name(from.font_name());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_h_alignment()) {
      set_h_alignment(from.h_alignment());
    }
    if (from.has_v_alignment()) {
      set_v_alignment(from.v_alignment());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_dimension_width()) {
      set_dimension_width(from.dimension_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dimension_height()) {
      set_dimension_height(from.dimension_height());
    }
    if (from.has_has_shadow()) {
      set_has_shadow(from.has_shadow());
    }
    if (from.has_shadow_color()) {
      mutable_shadow_color()->::maker::COLOR::MergeFrom(from.shadow_color());
    }
    if (from.has_shadow_opacity()) {
      set_shadow_opacity(from.shadow_opacity());
    }
    if (from.has_shadow_direction()) {
      set_shadow_direction(from.shadow_direction());
    }
    if (from.has_shadow_distance()) {
      set_shadow_distance(from.shadow_distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelSystemFont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSystemFont::CopyFrom(const LabelSystemFont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSystemFont::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_shadow_color()) {
    if (!this->shadow_color().IsInitialized()) return false;
  }
  return true;
}

void LabelSystemFont::Swap(LabelSystemFont* other) {
  if (other != this) {
    std::swap(font_name_, other->font_name_);
    std::swap(font_size_, other->font_size_);
    std::swap(text_, other->text_);
    std::swap(h_alignment_, other->h_alignment_);
    std::swap(v_alignment_, other->v_alignment_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(dimension_width_, other->dimension_width_);
    std::swap(dimension_height_, other->dimension_height_);
    std::swap(has_shadow_, other->has_shadow_);
    std::swap(shadow_color_, other->shadow_color_);
    std::swap(shadow_opacity_, other->shadow_opacity_);
    std::swap(shadow_direction_, other->shadow_direction_);
    std::swap(shadow_distance_, other->shadow_distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelSystemFont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelSystemFont_descriptor_;
  metadata.reflection = LabelSystemFont_reflection_;
  return metadata;
}


// ===================================================================

::std::string* LabelTTF::_default_text_ = NULL;
#ifndef _MSC_VER
const int LabelTTF::kFontNameFieldNumber;
const int LabelTTF::kFontSizeFieldNumber;
const int LabelTTF::kTextFieldNumber;
const int LabelTTF::kHAlignmentFieldNumber;
const int LabelTTF::kVAlignmentFieldNumber;
const int LabelTTF::kColorFieldNumber;
const int LabelTTF::kOpacityFieldNumber;
const int LabelTTF::kDimensionWidthFieldNumber;
const int LabelTTF::kDimensionHeightFieldNumber;
const int LabelTTF::kLetterSpacingFieldNumber;
const int LabelTTF::kHasStrokeFieldNumber;
const int LabelTTF::kStrokeTypeFieldNumber;
const int LabelTTF::kStrokeDetailLevelFieldNumber;
const int LabelTTF::kIsSharpTextFieldNumber;
const int LabelTTF::kStrokeTicknessFieldNumber;
const int LabelTTF::kStrokeColorFieldNumber;
const int LabelTTF::kHasShadowFieldNumber;
const int LabelTTF::kShadowColorFieldNumber;
const int LabelTTF::kShadowOpacityFieldNumber;
const int LabelTTF::kShadowDirectionFieldNumber;
const int LabelTTF::kShadowDistanceFieldNumber;
const int LabelTTF::kUseAutoFontsizeFieldNumber;
const int LabelTTF::kHasBoldFieldNumber;
#endif  // !_MSC_VER

LabelTTF::LabelTTF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelTTF::InitAsDefaultInstance() {
  font_name_ = const_cast< ::maker::FILE_TTF*>(&::maker::FILE_TTF::default_instance());
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  stroke_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  shadow_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

LabelTTF::LabelTTF(const LabelTTF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelTTF::SharedCtor() {
  _cached_size_ = 0;
  font_name_ = NULL;
  font_size_ = 10;
  text_ = const_cast< ::std::string*>(_default_text_);
  h_alignment_ = 1;
  v_alignment_ = 1;
  color_ = NULL;
  opacity_ = 255;
  dimension_width_ = 0;
  dimension_height_ = 0;
  letter_spacing_ = 0;
  has_stroke_ = false;
  stroke_type_ = 0;
  stroke_detail_level_ = 0;
  is_sharp_text_ = true;
  stroke_tickness_ = 1;
  stroke_color_ = NULL;
  has_shadow_ = false;
  shadow_color_ = NULL;
  shadow_opacity_ = 255;
  shadow_direction_ = 0;
  shadow_distance_ = 5;
  use_auto_fontsize_ = false;
  has_bold_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelTTF::~LabelTTF() {
  SharedDtor();
}

void LabelTTF::SharedDtor() {
  if (text_ != _default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
    delete font_name_;
    delete color_;
    delete stroke_color_;
    delete shadow_color_;
  }
}

void LabelTTF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelTTF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelTTF_descriptor_;
}

const LabelTTF& LabelTTF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

LabelTTF* LabelTTF::default_instance_ = NULL;

LabelTTF* LabelTTF::New() const {
  return new LabelTTF;
}

void LabelTTF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_font_name()) {
      if (font_name_ != NULL) font_name_->::maker::FILE_TTF::Clear();
    }
    font_size_ = 10;
    if (has_text()) {
      if (text_ != _default_text_) {
        text_->assign(*_default_text_);
      }
    }
    h_alignment_ = 1;
    v_alignment_ = 1;
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    dimension_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dimension_height_ = 0;
    letter_spacing_ = 0;
    has_stroke_ = false;
    stroke_type_ = 0;
    stroke_detail_level_ = 0;
    is_sharp_text_ = true;
    stroke_tickness_ = 1;
    if (has_stroke_color()) {
      if (stroke_color_ != NULL) stroke_color_->::maker::COLOR::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    has_shadow_ = false;
    if (has_shadow_color()) {
      if (shadow_color_ != NULL) shadow_color_->::maker::COLOR::Clear();
    }
    shadow_opacity_ = 255;
    shadow_direction_ = 0;
    shadow_distance_ = 5;
    use_auto_fontsize_ = false;
    has_bold_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelTTF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_TTF font_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_font_size;
        break;
      }

      // optional int32 font_size = 2 [default = 10];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3 [default = "New Label TTF"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_H_IsValid(value)) {
            set_h_alignment(static_cast< ::maker::TEXT_ALIGNMENT_H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_v_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_V_IsValid(value)) {
            set_v_alignment(static_cast< ::maker::TEXT_ALIGNMENT_V >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 7 [default = 255];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dimension_width;
        break;
      }

      // optional int32 dimension_width = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_width_)));
          set_has_dimension_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dimension_height;
        break;
      }

      // optional int32 dimension_height = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_height_)));
          set_has_dimension_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_letter_spacing;
        break;
      }

      // optional float letter_spacing = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_letter_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &letter_spacing_)));
          set_has_letter_spacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_has_stroke;
        break;
      }

      // optional bool has_stroke = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_stroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_stroke_)));
          set_has_has_stroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_stroke_type;
        break;
      }

      // optional .maker.STROKE_TYPE stroke_type = 22 [default = STROKE_TYPE__NORMAL];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stroke_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::STROKE_TYPE_IsValid(value)) {
            set_stroke_type(static_cast< ::maker::STROKE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_stroke_detail_level;
        break;
      }

      // optional int32 stroke_detail_level = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stroke_detail_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stroke_detail_level_)));
          set_has_stroke_detail_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_sharp_text;
        break;
      }

      // optional bool is_sharp_text = 24 [default = true];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sharp_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sharp_text_)));
          set_has_is_sharp_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_stroke_tickness;
        break;
      }

      // optional float stroke_tickness = 25 [default = 1];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stroke_tickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stroke_tickness_)));
          set_has_stroke_tickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_stroke_color;
        break;
      }

      // optional .maker.COLOR stroke_color = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stroke_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroke_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_has_shadow;
        break;
      }

      // optional bool has_shadow = 31 [default = false];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_shadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_shadow_)));
          set_has_has_shadow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_shadow_color;
        break;
      }

      // optional .maker.COLOR shadow_color = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_shadow_opacity;
        break;
      }

      // optional int32 shadow_opacity = 33 [default = 255];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadow_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shadow_opacity_)));
          set_has_shadow_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_shadow_direction;
        break;
      }

      // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadow_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::SHADOW_DIRECTION_IsValid(value)) {
            set_shadow_direction(static_cast< ::maker::SHADOW_DIRECTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_shadow_distance;
        break;
      }

      // optional float shadow_distance = 35 [default = 5];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shadow_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadow_distance_)));
          set_has_shadow_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_use_auto_fontsize;
        break;
      }

      // optional bool use_auto_fontsize = 41 [default = false];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_auto_fontsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_fontsize_)));
          set_has_use_auto_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_has_bold;
        break;
      }

      // optional bool has_bold = 42 [default = false];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_bold_)));
          set_has_has_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelTTF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_TTF font_name = 1;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->font_name(), output);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->font_size(), output);
  }

  // optional string text = 3 [default = "New Label TTF"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->h_alignment(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->v_alignment(), output);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->color(), output);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->opacity(), output);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dimension_width(), output);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dimension_height(), output);
  }

  // optional float letter_spacing = 10 [default = 0];
  if (has_letter_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->letter_spacing(), output);
  }

  // optional bool has_stroke = 21 [default = false];
  if (has_has_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->has_stroke(), output);
  }

  // optional .maker.STROKE_TYPE stroke_type = 22 [default = STROKE_TYPE__NORMAL];
  if (has_stroke_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->stroke_type(), output);
  }

  // optional int32 stroke_detail_level = 23 [default = 0];
  if (has_stroke_detail_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->stroke_detail_level(), output);
  }

  // optional bool is_sharp_text = 24 [default = true];
  if (has_is_sharp_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_sharp_text(), output);
  }

  // optional float stroke_tickness = 25 [default = 1];
  if (has_stroke_tickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->stroke_tickness(), output);
  }

  // optional .maker.COLOR stroke_color = 26;
  if (has_stroke_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->stroke_color(), output);
  }

  // optional bool has_shadow = 31 [default = false];
  if (has_has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->has_shadow(), output);
  }

  // optional .maker.COLOR shadow_color = 32;
  if (has_shadow_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->shadow_color(), output);
  }

  // optional int32 shadow_opacity = 33 [default = 255];
  if (has_shadow_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->shadow_opacity(), output);
  }

  // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
  if (has_shadow_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->shadow_direction(), output);
  }

  // optional float shadow_distance = 35 [default = 5];
  if (has_shadow_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->shadow_distance(), output);
  }

  // optional bool use_auto_fontsize = 41 [default = false];
  if (has_use_auto_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->use_auto_fontsize(), output);
  }

  // optional bool has_bold = 42 [default = false];
  if (has_has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->has_bold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelTTF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_TTF font_name = 1;
  if (has_font_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->font_name(), target);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->font_size(), target);
  }

  // optional string text = 3 [default = "New Label TTF"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->h_alignment(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->v_alignment(), target);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->color(), target);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->opacity(), target);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dimension_width(), target);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dimension_height(), target);
  }

  // optional float letter_spacing = 10 [default = 0];
  if (has_letter_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->letter_spacing(), target);
  }

  // optional bool has_stroke = 21 [default = false];
  if (has_has_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->has_stroke(), target);
  }

  // optional .maker.STROKE_TYPE stroke_type = 22 [default = STROKE_TYPE__NORMAL];
  if (has_stroke_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->stroke_type(), target);
  }

  // optional int32 stroke_detail_level = 23 [default = 0];
  if (has_stroke_detail_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->stroke_detail_level(), target);
  }

  // optional bool is_sharp_text = 24 [default = true];
  if (has_is_sharp_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_sharp_text(), target);
  }

  // optional float stroke_tickness = 25 [default = 1];
  if (has_stroke_tickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->stroke_tickness(), target);
  }

  // optional .maker.COLOR stroke_color = 26;
  if (has_stroke_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->stroke_color(), target);
  }

  // optional bool has_shadow = 31 [default = false];
  if (has_has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->has_shadow(), target);
  }

  // optional .maker.COLOR shadow_color = 32;
  if (has_shadow_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->shadow_color(), target);
  }

  // optional int32 shadow_opacity = 33 [default = 255];
  if (has_shadow_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->shadow_opacity(), target);
  }

  // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
  if (has_shadow_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->shadow_direction(), target);
  }

  // optional float shadow_distance = 35 [default = 5];
  if (has_shadow_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->shadow_distance(), target);
  }

  // optional bool use_auto_fontsize = 41 [default = false];
  if (has_use_auto_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->use_auto_fontsize(), target);
  }

  // optional bool has_bold = 42 [default = false];
  if (has_has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->has_bold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelTTF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_TTF font_name = 1;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font_name());
    }

    // optional int32 font_size = 2 [default = 10];
    if (has_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_size());
    }

    // optional string text = 3 [default = "New Label TTF"];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
    if (has_h_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->h_alignment());
    }

    // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
    if (has_v_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->v_alignment());
    }

    // optional .maker.COLOR color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 7 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional int32 dimension_width = 8 [default = 0];
    if (has_dimension_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dimension_height = 9 [default = 0];
    if (has_dimension_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_height());
    }

    // optional float letter_spacing = 10 [default = 0];
    if (has_letter_spacing()) {
      total_size += 1 + 4;
    }

    // optional bool has_stroke = 21 [default = false];
    if (has_has_stroke()) {
      total_size += 2 + 1;
    }

    // optional .maker.STROKE_TYPE stroke_type = 22 [default = STROKE_TYPE__NORMAL];
    if (has_stroke_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stroke_type());
    }

    // optional int32 stroke_detail_level = 23 [default = 0];
    if (has_stroke_detail_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stroke_detail_level());
    }

    // optional bool is_sharp_text = 24 [default = true];
    if (has_is_sharp_text()) {
      total_size += 2 + 1;
    }

    // optional float stroke_tickness = 25 [default = 1];
    if (has_stroke_tickness()) {
      total_size += 2 + 4;
    }

    // optional .maker.COLOR stroke_color = 26;
    if (has_stroke_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroke_color());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool has_shadow = 31 [default = false];
    if (has_has_shadow()) {
      total_size += 2 + 1;
    }

    // optional .maker.COLOR shadow_color = 32;
    if (has_shadow_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow_color());
    }

    // optional int32 shadow_opacity = 33 [default = 255];
    if (has_shadow_opacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shadow_opacity());
    }

    // optional .maker.SHADOW_DIRECTION shadow_direction = 34 [default = SHADOW_DIR_90];
    if (has_shadow_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shadow_direction());
    }

    // optional float shadow_distance = 35 [default = 5];
    if (has_shadow_distance()) {
      total_size += 2 + 4;
    }

    // optional bool use_auto_fontsize = 41 [default = false];
    if (has_use_auto_fontsize()) {
      total_size += 2 + 1;
    }

    // optional bool has_bold = 42 [default = false];
    if (has_has_bold()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelTTF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelTTF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelTTF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelTTF::MergeFrom(const LabelTTF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_font_name()) {
      mutable_font_name()->::maker::FILE_TTF::MergeFrom(from.font_name());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_h_alignment()) {
      set_h_alignment(from.h_alignment());
    }
    if (from.has_v_alignment()) {
      set_v_alignment(from.v_alignment());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_dimension_width()) {
      set_dimension_width(from.dimension_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dimension_height()) {
      set_dimension_height(from.dimension_height());
    }
    if (from.has_letter_spacing()) {
      set_letter_spacing(from.letter_spacing());
    }
    if (from.has_has_stroke()) {
      set_has_stroke(from.has_stroke());
    }
    if (from.has_stroke_type()) {
      set_stroke_type(from.stroke_type());
    }
    if (from.has_stroke_detail_level()) {
      set_stroke_detail_level(from.stroke_detail_level());
    }
    if (from.has_is_sharp_text()) {
      set_is_sharp_text(from.is_sharp_text());
    }
    if (from.has_stroke_tickness()) {
      set_stroke_tickness(from.stroke_tickness());
    }
    if (from.has_stroke_color()) {
      mutable_stroke_color()->::maker::COLOR::MergeFrom(from.stroke_color());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_has_shadow()) {
      set_has_shadow(from.has_shadow());
    }
    if (from.has_shadow_color()) {
      mutable_shadow_color()->::maker::COLOR::MergeFrom(from.shadow_color());
    }
    if (from.has_shadow_opacity()) {
      set_shadow_opacity(from.shadow_opacity());
    }
    if (from.has_shadow_direction()) {
      set_shadow_direction(from.shadow_direction());
    }
    if (from.has_shadow_distance()) {
      set_shadow_distance(from.shadow_distance());
    }
    if (from.has_use_auto_fontsize()) {
      set_use_auto_fontsize(from.use_auto_fontsize());
    }
    if (from.has_has_bold()) {
      set_has_bold(from.has_bold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelTTF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelTTF::CopyFrom(const LabelTTF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelTTF::IsInitialized() const {

  if (has_font_name()) {
    if (!this->font_name().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_stroke_color()) {
    if (!this->stroke_color().IsInitialized()) return false;
  }
  if (has_shadow_color()) {
    if (!this->shadow_color().IsInitialized()) return false;
  }
  return true;
}

void LabelTTF::Swap(LabelTTF* other) {
  if (other != this) {
    std::swap(font_name_, other->font_name_);
    std::swap(font_size_, other->font_size_);
    std::swap(text_, other->text_);
    std::swap(h_alignment_, other->h_alignment_);
    std::swap(v_alignment_, other->v_alignment_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(dimension_width_, other->dimension_width_);
    std::swap(dimension_height_, other->dimension_height_);
    std::swap(letter_spacing_, other->letter_spacing_);
    std::swap(has_stroke_, other->has_stroke_);
    std::swap(stroke_type_, other->stroke_type_);
    std::swap(stroke_detail_level_, other->stroke_detail_level_);
    std::swap(is_sharp_text_, other->is_sharp_text_);
    std::swap(stroke_tickness_, other->stroke_tickness_);
    std::swap(stroke_color_, other->stroke_color_);
    std::swap(has_shadow_, other->has_shadow_);
    std::swap(shadow_color_, other->shadow_color_);
    std::swap(shadow_opacity_, other->shadow_opacity_);
    std::swap(shadow_direction_, other->shadow_direction_);
    std::swap(shadow_distance_, other->shadow_distance_);
    std::swap(use_auto_fontsize_, other->use_auto_fontsize_);
    std::swap(has_bold_, other->has_bold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelTTF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelTTF_descriptor_;
  metadata.reflection = LabelTTF_reflection_;
  return metadata;
}


// ===================================================================

::std::string* LabelBMFont::_default_text_ = NULL;
#ifndef _MSC_VER
const int LabelBMFont::kFontNameFieldNumber;
const int LabelBMFont::kFontSizeFieldNumber;
const int LabelBMFont::kTextFieldNumber;
const int LabelBMFont::kHAlignmentFieldNumber;
const int LabelBMFont::kVAlignmentFieldNumber;
const int LabelBMFont::kColorFieldNumber;
const int LabelBMFont::kOpacityFieldNumber;
const int LabelBMFont::kDimensionWidthFieldNumber;
const int LabelBMFont::kDimensionHeightFieldNumber;
#endif  // !_MSC_VER

LabelBMFont::LabelBMFont()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelBMFont::InitAsDefaultInstance() {
  font_name_ = const_cast< ::maker::FILE_BMFONT*>(&::maker::FILE_BMFONT::default_instance());
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

LabelBMFont::LabelBMFont(const LabelBMFont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelBMFont::SharedCtor() {
  _cached_size_ = 0;
  font_name_ = NULL;
  font_size_ = 10;
  text_ = const_cast< ::std::string*>(_default_text_);
  h_alignment_ = 1;
  v_alignment_ = 1;
  color_ = NULL;
  opacity_ = 255;
  dimension_width_ = 0;
  dimension_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelBMFont::~LabelBMFont() {
  SharedDtor();
}

void LabelBMFont::SharedDtor() {
  if (text_ != _default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
    delete font_name_;
    delete color_;
  }
}

void LabelBMFont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelBMFont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelBMFont_descriptor_;
}

const LabelBMFont& LabelBMFont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

LabelBMFont* LabelBMFont::default_instance_ = NULL;

LabelBMFont* LabelBMFont::New() const {
  return new LabelBMFont;
}

void LabelBMFont::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_font_name()) {
      if (font_name_ != NULL) font_name_->::maker::FILE_BMFONT::Clear();
    }
    font_size_ = 10;
    if (has_text()) {
      if (text_ != _default_text_) {
        text_->assign(*_default_text_);
      }
    }
    h_alignment_ = 1;
    v_alignment_ = 1;
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    dimension_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dimension_height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelBMFont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_BMFONT font_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_font_size;
        break;
      }

      // optional int32 font_size = 2 [default = 10];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3 [default = "New Label BMFont"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_H_IsValid(value)) {
            set_h_alignment(static_cast< ::maker::TEXT_ALIGNMENT_H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_v_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_V_IsValid(value)) {
            set_v_alignment(static_cast< ::maker::TEXT_ALIGNMENT_V >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 7 [default = 255];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dimension_width;
        break;
      }

      // optional int32 dimension_width = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_width_)));
          set_has_dimension_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dimension_height;
        break;
      }

      // optional int32 dimension_height = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_height_)));
          set_has_dimension_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelBMFont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_BMFONT font_name = 1;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->font_name(), output);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->font_size(), output);
  }

  // optional string text = 3 [default = "New Label BMFont"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->h_alignment(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->v_alignment(), output);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->color(), output);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->opacity(), output);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dimension_width(), output);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dimension_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelBMFont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_BMFONT font_name = 1;
  if (has_font_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->font_name(), target);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->font_size(), target);
  }

  // optional string text = 3 [default = "New Label BMFont"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->h_alignment(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->v_alignment(), target);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->color(), target);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->opacity(), target);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dimension_width(), target);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dimension_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelBMFont::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_BMFONT font_name = 1;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font_name());
    }

    // optional int32 font_size = 2 [default = 10];
    if (has_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_size());
    }

    // optional string text = 3 [default = "New Label BMFont"];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
    if (has_h_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->h_alignment());
    }

    // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
    if (has_v_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->v_alignment());
    }

    // optional .maker.COLOR color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 7 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional int32 dimension_width = 8 [default = 0];
    if (has_dimension_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dimension_height = 9 [default = 0];
    if (has_dimension_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelBMFont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelBMFont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelBMFont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelBMFont::MergeFrom(const LabelBMFont& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_font_name()) {
      mutable_font_name()->::maker::FILE_BMFONT::MergeFrom(from.font_name());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_h_alignment()) {
      set_h_alignment(from.h_alignment());
    }
    if (from.has_v_alignment()) {
      set_v_alignment(from.v_alignment());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_dimension_width()) {
      set_dimension_width(from.dimension_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dimension_height()) {
      set_dimension_height(from.dimension_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelBMFont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelBMFont::CopyFrom(const LabelBMFont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelBMFont::IsInitialized() const {

  if (has_font_name()) {
    if (!this->font_name().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void LabelBMFont::Swap(LabelBMFont* other) {
  if (other != this) {
    std::swap(font_name_, other->font_name_);
    std::swap(font_size_, other->font_size_);
    std::swap(text_, other->text_);
    std::swap(h_alignment_, other->h_alignment_);
    std::swap(v_alignment_, other->v_alignment_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(dimension_width_, other->dimension_width_);
    std::swap(dimension_height_, other->dimension_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelBMFont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelBMFont_descriptor_;
  metadata.reflection = LabelBMFont_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TextFieldTTF::_default_text_ = NULL;
#ifndef _MSC_VER
const int TextFieldTTF::kFontNameFieldNumber;
const int TextFieldTTF::kFontSizeFieldNumber;
const int TextFieldTTF::kTextFieldNumber;
const int TextFieldTTF::kHAlignmentFieldNumber;
const int TextFieldTTF::kVAlignmentFieldNumber;
const int TextFieldTTF::kColorFieldNumber;
const int TextFieldTTF::kOpacityFieldNumber;
const int TextFieldTTF::kDimensionWidthFieldNumber;
const int TextFieldTTF::kDimensionHeightFieldNumber;
const int TextFieldTTF::kHasStrokeFieldNumber;
const int TextFieldTTF::kStrokeTicknessFieldNumber;
const int TextFieldTTF::kStrokeColorFieldNumber;
#endif  // !_MSC_VER

TextFieldTTF::TextFieldTTF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextFieldTTF::InitAsDefaultInstance() {
  font_name_ = const_cast< ::maker::FILE_TTF*>(&::maker::FILE_TTF::default_instance());
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  stroke_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

TextFieldTTF::TextFieldTTF(const TextFieldTTF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextFieldTTF::SharedCtor() {
  _cached_size_ = 0;
  font_name_ = NULL;
  font_size_ = 10;
  text_ = const_cast< ::std::string*>(_default_text_);
  h_alignment_ = 1;
  v_alignment_ = 1;
  color_ = NULL;
  opacity_ = 255;
  dimension_width_ = 0;
  dimension_height_ = 0;
  has_stroke_ = false;
  stroke_tickness_ = 1;
  stroke_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextFieldTTF::~TextFieldTTF() {
  SharedDtor();
}

void TextFieldTTF::SharedDtor() {
  if (text_ != _default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
    delete font_name_;
    delete color_;
    delete stroke_color_;
  }
}

void TextFieldTTF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextFieldTTF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextFieldTTF_descriptor_;
}

const TextFieldTTF& TextFieldTTF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

TextFieldTTF* TextFieldTTF::default_instance_ = NULL;

TextFieldTTF* TextFieldTTF::New() const {
  return new TextFieldTTF;
}

void TextFieldTTF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_font_name()) {
      if (font_name_ != NULL) font_name_->::maker::FILE_TTF::Clear();
    }
    font_size_ = 10;
    if (has_text()) {
      if (text_ != _default_text_) {
        text_->assign(*_default_text_);
      }
    }
    h_alignment_ = 1;
    v_alignment_ = 1;
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    dimension_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dimension_height_ = 0;
    has_stroke_ = false;
    stroke_tickness_ = 1;
    if (has_stroke_color()) {
      if (stroke_color_ != NULL) stroke_color_->::maker::COLOR::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextFieldTTF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_TTF font_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_font_size;
        break;
      }

      // optional int32 font_size = 2 [default = 10];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3 [default = "New TextField"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_H_IsValid(value)) {
            set_h_alignment(static_cast< ::maker::TEXT_ALIGNMENT_H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_v_alignment;
        break;
      }

      // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::TEXT_ALIGNMENT_V_IsValid(value)) {
            set_v_alignment(static_cast< ::maker::TEXT_ALIGNMENT_V >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 7 [default = 255];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dimension_width;
        break;
      }

      // optional int32 dimension_width = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_width_)));
          set_has_dimension_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dimension_height;
        break;
      }

      // optional int32 dimension_height = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_height_)));
          set_has_dimension_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_has_stroke;
        break;
      }

      // optional bool has_stroke = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_stroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_stroke_)));
          set_has_has_stroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_stroke_tickness;
        break;
      }

      // optional float stroke_tickness = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stroke_tickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stroke_tickness_)));
          set_has_stroke_tickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stroke_color;
        break;
      }

      // optional .maker.COLOR stroke_color = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stroke_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroke_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextFieldTTF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_TTF font_name = 1;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->font_name(), output);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->font_size(), output);
  }

  // optional string text = 3 [default = "New TextField"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->h_alignment(), output);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->v_alignment(), output);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->color(), output);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->opacity(), output);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dimension_width(), output);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dimension_height(), output);
  }

  // optional bool has_stroke = 10 [default = false];
  if (has_has_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->has_stroke(), output);
  }

  // optional float stroke_tickness = 11 [default = 1];
  if (has_stroke_tickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->stroke_tickness(), output);
  }

  // optional .maker.COLOR stroke_color = 12;
  if (has_stroke_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->stroke_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextFieldTTF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_TTF font_name = 1;
  if (has_font_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->font_name(), target);
  }

  // optional int32 font_size = 2 [default = 10];
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->font_size(), target);
  }

  // optional string text = 3 [default = "New TextField"];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
  if (has_h_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->h_alignment(), target);
  }

  // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
  if (has_v_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->v_alignment(), target);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->color(), target);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->opacity(), target);
  }

  // optional int32 dimension_width = 8 [default = 0];
  if (has_dimension_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dimension_width(), target);
  }

  // optional int32 dimension_height = 9 [default = 0];
  if (has_dimension_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dimension_height(), target);
  }

  // optional bool has_stroke = 10 [default = false];
  if (has_has_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->has_stroke(), target);
  }

  // optional float stroke_tickness = 11 [default = 1];
  if (has_stroke_tickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->stroke_tickness(), target);
  }

  // optional .maker.COLOR stroke_color = 12;
  if (has_stroke_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->stroke_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextFieldTTF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_TTF font_name = 1;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font_name());
    }

    // optional int32 font_size = 2 [default = 10];
    if (has_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_size());
    }

    // optional string text = 3 [default = "New TextField"];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .maker.TEXT_ALIGNMENT_H h_alignment = 4 [default = TEXT_ALIGN_H__CENTER];
    if (has_h_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->h_alignment());
    }

    // optional .maker.TEXT_ALIGNMENT_V v_alignment = 5 [default = TEXT_ALIGN_V__CENTER];
    if (has_v_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->v_alignment());
    }

    // optional .maker.COLOR color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 7 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional int32 dimension_width = 8 [default = 0];
    if (has_dimension_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dimension_height = 9 [default = 0];
    if (has_dimension_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension_height());
    }

    // optional bool has_stroke = 10 [default = false];
    if (has_has_stroke()) {
      total_size += 1 + 1;
    }

    // optional float stroke_tickness = 11 [default = 1];
    if (has_stroke_tickness()) {
      total_size += 1 + 4;
    }

    // optional .maker.COLOR stroke_color = 12;
    if (has_stroke_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroke_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextFieldTTF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextFieldTTF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextFieldTTF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextFieldTTF::MergeFrom(const TextFieldTTF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_font_name()) {
      mutable_font_name()->::maker::FILE_TTF::MergeFrom(from.font_name());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_h_alignment()) {
      set_h_alignment(from.h_alignment());
    }
    if (from.has_v_alignment()) {
      set_v_alignment(from.v_alignment());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_dimension_width()) {
      set_dimension_width(from.dimension_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dimension_height()) {
      set_dimension_height(from.dimension_height());
    }
    if (from.has_has_stroke()) {
      set_has_stroke(from.has_stroke());
    }
    if (from.has_stroke_tickness()) {
      set_stroke_tickness(from.stroke_tickness());
    }
    if (from.has_stroke_color()) {
      mutable_stroke_color()->::maker::COLOR::MergeFrom(from.stroke_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextFieldTTF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextFieldTTF::CopyFrom(const TextFieldTTF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextFieldTTF::IsInitialized() const {

  if (has_font_name()) {
    if (!this->font_name().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_stroke_color()) {
    if (!this->stroke_color().IsInitialized()) return false;
  }
  return true;
}

void TextFieldTTF::Swap(TextFieldTTF* other) {
  if (other != this) {
    std::swap(font_name_, other->font_name_);
    std::swap(font_size_, other->font_size_);
    std::swap(text_, other->text_);
    std::swap(h_alignment_, other->h_alignment_);
    std::swap(v_alignment_, other->v_alignment_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(dimension_width_, other->dimension_width_);
    std::swap(dimension_height_, other->dimension_height_);
    std::swap(has_stroke_, other->has_stroke_);
    std::swap(stroke_tickness_, other->stroke_tickness_);
    std::swap(stroke_color_, other->stroke_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextFieldTTF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextFieldTTF_descriptor_;
  metadata.reflection = TextFieldTTF_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EditBox::_default_font_name_ = NULL;
::std::string* EditBox::_default_placeholder_ = NULL;
::std::string* EditBox::_default_placeholder_font_name_ = NULL;
#ifndef _MSC_VER
const int EditBox::kEnableFieldNumber;
const int EditBox::kInputModeFieldNumber;
const int EditBox::kInputFlagFieldNumber;
const int EditBox::kReturnTypeFieldNumber;
const int EditBox::kMaxLengthFieldNumber;
const int EditBox::kTextFieldNumber;
const int EditBox::kFontNameFieldNumber;
const int EditBox::kFontSizeFieldNumber;
const int EditBox::kFontColorFieldNumber;
const int EditBox::kPlaceholderFieldNumber;
const int EditBox::kPlaceholderFontNameFieldNumber;
const int EditBox::kPlaceholderFontSizeFieldNumber;
const int EditBox::kPlaceholderFontColorFieldNumber;
const int EditBox::kNormalBgFieldNumber;
const int EditBox::kPressedBgFieldNumber;
const int EditBox::kDisabledBgFieldNumber;
#endif  // !_MSC_VER

EditBox::EditBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditBox::InitAsDefaultInstance() {
  font_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  placeholder_font_color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
  normal_bg_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
  pressed_bg_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
  disabled_bg_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
}

EditBox::EditBox(const EditBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditBox::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  input_mode_ = 6;
  input_flag_ = 4;
  return_type_ = 1;
  max_length_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  font_name_ = const_cast< ::std::string*>(_default_font_name_);
  font_size_ = 20;
  font_color_ = NULL;
  placeholder_ = const_cast< ::std::string*>(_default_placeholder_);
  placeholder_font_name_ = const_cast< ::std::string*>(_default_placeholder_font_name_);
  placeholder_font_size_ = 20;
  placeholder_font_color_ = NULL;
  normal_bg_ = NULL;
  pressed_bg_ = NULL;
  disabled_bg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditBox::~EditBox() {
  SharedDtor();
}

void EditBox::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (font_name_ != _default_font_name_) {
    delete font_name_;
  }
  if (placeholder_ != _default_placeholder_) {
    delete placeholder_;
  }
  if (placeholder_font_name_ != _default_placeholder_font_name_) {
    delete placeholder_font_name_;
  }
  if (this != default_instance_) {
    delete font_color_;
    delete placeholder_font_color_;
    delete normal_bg_;
    delete pressed_bg_;
    delete disabled_bg_;
  }
}

void EditBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditBox_descriptor_;
}

const EditBox& EditBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

EditBox* EditBox::default_instance_ = NULL;

EditBox* EditBox::New() const {
  return new EditBox;
}

void EditBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
    input_mode_ = 6;
    input_flag_ = 4;
    return_type_ = 1;
    max_length_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_font_name()) {
      if (font_name_ != _default_font_name_) {
        font_name_->assign(*_default_font_name_);
      }
    }
    font_size_ = 20;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_font_color()) {
      if (font_color_ != NULL) font_color_->::maker::COLOR::Clear();
    }
    if (has_placeholder()) {
      if (placeholder_ != _default_placeholder_) {
        placeholder_->assign(*_default_placeholder_);
      }
    }
    if (has_placeholder_font_name()) {
      if (placeholder_font_name_ != _default_placeholder_font_name_) {
        placeholder_font_name_->assign(*_default_placeholder_font_name_);
      }
    }
    placeholder_font_size_ = 20;
    if (has_placeholder_font_color()) {
      if (placeholder_font_color_ != NULL) placeholder_font_color_->::maker::COLOR::Clear();
    }
    if (has_normal_bg()) {
      if (normal_bg_ != NULL) normal_bg_->::maker::FILE_IMAGE::Clear();
    }
    if (has_pressed_bg()) {
      if (pressed_bg_ != NULL) pressed_bg_->::maker::FILE_IMAGE::Clear();
    }
    if (has_disabled_bg()) {
      if (disabled_bg_ != NULL) disabled_bg_->::maker::FILE_IMAGE::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_input_mode;
        break;
      }

      // optional .maker.EDITBOX_INPUT_MODE input_mode = 2 [default = EDITBOX_INPUT_MODE__SINGLE_LINE];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::EDITBOX_INPUT_MODE_IsValid(value)) {
            set_input_mode(static_cast< ::maker::EDITBOX_INPUT_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_input_flag;
        break;
      }

      // optional .maker.EDITBOX_INPUT_FLAG input_flag = 3 [default = EDITBOX_INPUT_FLAG__INTIAL_CAPS_ALL_CHARACTERS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::EDITBOX_INPUT_FLAG_IsValid(value)) {
            set_input_flag(static_cast< ::maker::EDITBOX_INPUT_FLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_return_type;
        break;
      }

      // optional .maker.EDITBOX_RETURN_TYPE return_type = 4 [default = EDITBOX_RETURN_TYPE__DONE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::EDITBOX_RETURN_TYPE_IsValid(value)) {
            set_return_type(static_cast< ::maker::EDITBOX_RETURN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_length;
        break;
      }

      // optional int32 max_length = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_length_)));
          set_has_max_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_font_name;
        break;
      }

      // optional string font_name = 7 [default = "Helvetica"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_font_size;
        break;
      }

      // optional int32 font_size = 8 [default = 20];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_font_color;
        break;
      }

      // optional .maker.COLOR font_color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_placeholder;
        break;
      }

      // optional string placeholder = 10 [default = "\355\205\215\354\212\244\355\212\270\353\245\274 \354\236\205\353\240\245\355\225\230\354\204\270\354\232\224."];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placeholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placeholder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->placeholder().data(), this->placeholder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_placeholder_font_name;
        break;
      }

      // optional string placeholder_font_name = 11 [default = "Helvetica"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placeholder_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placeholder_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->placeholder_font_name().data(), this->placeholder_font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_placeholder_font_size;
        break;
      }

      // optional int32 placeholder_font_size = 12 [default = 20];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placeholder_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &placeholder_font_size_)));
          set_has_placeholder_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_placeholder_font_color;
        break;
      }

      // optional .maker.COLOR placeholder_font_color = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placeholder_font_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placeholder_font_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_normal_bg;
        break;
      }

      // optional .maker.FILE_IMAGE normal_bg = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_bg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal_bg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pressed_bg;
        break;
      }

      // optional .maker.FILE_IMAGE pressed_bg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pressed_bg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pressed_bg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_disabled_bg;
        break;
      }

      // optional .maker.FILE_IMAGE disabled_bg = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disabled_bg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disabled_bg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enable = 1 [default = false];
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional .maker.EDITBOX_INPUT_MODE input_mode = 2 [default = EDITBOX_INPUT_MODE__SINGLE_LINE];
  if (has_input_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->input_mode(), output);
  }

  // optional .maker.EDITBOX_INPUT_FLAG input_flag = 3 [default = EDITBOX_INPUT_FLAG__INTIAL_CAPS_ALL_CHARACTERS];
  if (has_input_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->input_flag(), output);
  }

  // optional .maker.EDITBOX_RETURN_TYPE return_type = 4 [default = EDITBOX_RETURN_TYPE__DONE];
  if (has_return_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->return_type(), output);
  }

  // optional int32 max_length = 5 [default = 0];
  if (has_max_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_length(), output);
  }

  // optional string text = 6 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  // optional string font_name = 7 [default = "Helvetica"];
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->font_name(), output);
  }

  // optional int32 font_size = 8 [default = 20];
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->font_size(), output);
  }

  // optional .maker.COLOR font_color = 9;
  if (has_font_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->font_color(), output);
  }

  // optional string placeholder = 10 [default = "\355\205\215\354\212\244\355\212\270\353\245\274 \354\236\205\353\240\245\355\225\230\354\204\270\354\232\224."];
  if (has_placeholder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeholder().data(), this->placeholder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->placeholder(), output);
  }

  // optional string placeholder_font_name = 11 [default = "Helvetica"];
  if (has_placeholder_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeholder_font_name().data(), this->placeholder_font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->placeholder_font_name(), output);
  }

  // optional int32 placeholder_font_size = 12 [default = 20];
  if (has_placeholder_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->placeholder_font_size(), output);
  }

  // optional .maker.COLOR placeholder_font_color = 13;
  if (has_placeholder_font_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->placeholder_font_color(), output);
  }

  // optional .maker.FILE_IMAGE normal_bg = 14;
  if (has_normal_bg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->normal_bg(), output);
  }

  // optional .maker.FILE_IMAGE pressed_bg = 15;
  if (has_pressed_bg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->pressed_bg(), output);
  }

  // optional .maker.FILE_IMAGE disabled_bg = 16;
  if (has_disabled_bg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->disabled_bg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enable = 1 [default = false];
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // optional .maker.EDITBOX_INPUT_MODE input_mode = 2 [default = EDITBOX_INPUT_MODE__SINGLE_LINE];
  if (has_input_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->input_mode(), target);
  }

  // optional .maker.EDITBOX_INPUT_FLAG input_flag = 3 [default = EDITBOX_INPUT_FLAG__INTIAL_CAPS_ALL_CHARACTERS];
  if (has_input_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->input_flag(), target);
  }

  // optional .maker.EDITBOX_RETURN_TYPE return_type = 4 [default = EDITBOX_RETURN_TYPE__DONE];
  if (has_return_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->return_type(), target);
  }

  // optional int32 max_length = 5 [default = 0];
  if (has_max_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_length(), target);
  }

  // optional string text = 6 [default = ""];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional string font_name = 7 [default = "Helvetica"];
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->font_name(), target);
  }

  // optional int32 font_size = 8 [default = 20];
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->font_size(), target);
  }

  // optional .maker.COLOR font_color = 9;
  if (has_font_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->font_color(), target);
  }

  // optional string placeholder = 10 [default = "\355\205\215\354\212\244\355\212\270\353\245\274 \354\236\205\353\240\245\355\225\230\354\204\270\354\232\224."];
  if (has_placeholder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeholder().data(), this->placeholder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->placeholder(), target);
  }

  // optional string placeholder_font_name = 11 [default = "Helvetica"];
  if (has_placeholder_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeholder_font_name().data(), this->placeholder_font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->placeholder_font_name(), target);
  }

  // optional int32 placeholder_font_size = 12 [default = 20];
  if (has_placeholder_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->placeholder_font_size(), target);
  }

  // optional .maker.COLOR placeholder_font_color = 13;
  if (has_placeholder_font_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->placeholder_font_color(), target);
  }

  // optional .maker.FILE_IMAGE normal_bg = 14;
  if (has_normal_bg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->normal_bg(), target);
  }

  // optional .maker.FILE_IMAGE pressed_bg = 15;
  if (has_pressed_bg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->pressed_bg(), target);
  }

  // optional .maker.FILE_IMAGE disabled_bg = 16;
  if (has_disabled_bg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->disabled_bg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enable = 1 [default = false];
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // optional .maker.EDITBOX_INPUT_MODE input_mode = 2 [default = EDITBOX_INPUT_MODE__SINGLE_LINE];
    if (has_input_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_mode());
    }

    // optional .maker.EDITBOX_INPUT_FLAG input_flag = 3 [default = EDITBOX_INPUT_FLAG__INTIAL_CAPS_ALL_CHARACTERS];
    if (has_input_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_flag());
    }

    // optional .maker.EDITBOX_RETURN_TYPE return_type = 4 [default = EDITBOX_RETURN_TYPE__DONE];
    if (has_return_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->return_type());
    }

    // optional int32 max_length = 5 [default = 0];
    if (has_max_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_length());
    }

    // optional string text = 6 [default = ""];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string font_name = 7 [default = "Helvetica"];
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional int32 font_size = 8 [default = 20];
    if (has_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .maker.COLOR font_color = 9;
    if (has_font_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font_color());
    }

    // optional string placeholder = 10 [default = "\355\205\215\354\212\244\355\212\270\353\245\274 \354\236\205\353\240\245\355\225\230\354\204\270\354\232\224."];
    if (has_placeholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->placeholder());
    }

    // optional string placeholder_font_name = 11 [default = "Helvetica"];
    if (has_placeholder_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->placeholder_font_name());
    }

    // optional int32 placeholder_font_size = 12 [default = 20];
    if (has_placeholder_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->placeholder_font_size());
    }

    // optional .maker.COLOR placeholder_font_color = 13;
    if (has_placeholder_font_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placeholder_font_color());
    }

    // optional .maker.FILE_IMAGE normal_bg = 14;
    if (has_normal_bg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal_bg());
    }

    // optional .maker.FILE_IMAGE pressed_bg = 15;
    if (has_pressed_bg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pressed_bg());
    }

    // optional .maker.FILE_IMAGE disabled_bg = 16;
    if (has_disabled_bg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disabled_bg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditBox::MergeFrom(const EditBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_input_mode()) {
      set_input_mode(from.input_mode());
    }
    if (from.has_input_flag()) {
      set_input_flag(from.input_flag());
    }
    if (from.has_return_type()) {
      set_return_type(from.return_type());
    }
    if (from.has_max_length()) {
      set_max_length(from.max_length());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_font_name()) {
      set_font_name(from.font_name());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_font_color()) {
      mutable_font_color()->::maker::COLOR::MergeFrom(from.font_color());
    }
    if (from.has_placeholder()) {
      set_placeholder(from.placeholder());
    }
    if (from.has_placeholder_font_name()) {
      set_placeholder_font_name(from.placeholder_font_name());
    }
    if (from.has_placeholder_font_size()) {
      set_placeholder_font_size(from.placeholder_font_size());
    }
    if (from.has_placeholder_font_color()) {
      mutable_placeholder_font_color()->::maker::COLOR::MergeFrom(from.placeholder_font_color());
    }
    if (from.has_normal_bg()) {
      mutable_normal_bg()->::maker::FILE_IMAGE::MergeFrom(from.normal_bg());
    }
    if (from.has_pressed_bg()) {
      mutable_pressed_bg()->::maker::FILE_IMAGE::MergeFrom(from.pressed_bg());
    }
    if (from.has_disabled_bg()) {
      mutable_disabled_bg()->::maker::FILE_IMAGE::MergeFrom(from.disabled_bg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditBox::CopyFrom(const EditBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditBox::IsInitialized() const {

  if (has_font_color()) {
    if (!this->font_color().IsInitialized()) return false;
  }
  if (has_placeholder_font_color()) {
    if (!this->placeholder_font_color().IsInitialized()) return false;
  }
  if (has_normal_bg()) {
    if (!this->normal_bg().IsInitialized()) return false;
  }
  if (has_pressed_bg()) {
    if (!this->pressed_bg().IsInitialized()) return false;
  }
  if (has_disabled_bg()) {
    if (!this->disabled_bg().IsInitialized()) return false;
  }
  return true;
}

void EditBox::Swap(EditBox* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(input_mode_, other->input_mode_);
    std::swap(input_flag_, other->input_flag_);
    std::swap(return_type_, other->return_type_);
    std::swap(max_length_, other->max_length_);
    std::swap(text_, other->text_);
    std::swap(font_name_, other->font_name_);
    std::swap(font_size_, other->font_size_);
    std::swap(font_color_, other->font_color_);
    std::swap(placeholder_, other->placeholder_);
    std::swap(placeholder_font_name_, other->placeholder_font_name_);
    std::swap(placeholder_font_size_, other->placeholder_font_size_);
    std::swap(placeholder_font_color_, other->placeholder_font_color_);
    std::swap(normal_bg_, other->normal_bg_);
    std::swap(pressed_bg_, other->pressed_bg_);
    std::swap(disabled_bg_, other->disabled_bg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditBox_descriptor_;
  metadata.reflection = EditBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Button::kEnableFieldNumber;
const int Button::kNormalFieldNumber;
const int Button::kSelectedFieldNumber;
const int Button::kDisableFieldNumber;
const int Button::kImageTypeFieldNumber;
#endif  // !_MSC_VER

Button::Button()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Button::InitAsDefaultInstance() {
  normal_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
  selected_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
  disable_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
}

Button::Button(const Button& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Button::SharedCtor() {
  _cached_size_ = 0;
  enable_ = true;
  normal_ = NULL;
  selected_ = NULL;
  disable_ = NULL;
  image_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Button::~Button() {
  SharedDtor();
}

void Button::SharedDtor() {
  if (this != default_instance_) {
    delete normal_;
    delete selected_;
    delete disable_;
  }
}

void Button::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Button::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Button_descriptor_;
}

const Button& Button::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Button* Button::default_instance_ = NULL;

Button* Button::New() const {
  return new Button;
}

void Button::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = true;
    if (has_normal()) {
      if (normal_ != NULL) normal_->::maker::FILE_IMAGE::Clear();
    }
    if (has_selected()) {
      if (selected_ != NULL) selected_->::maker::FILE_IMAGE::Clear();
    }
    if (has_disable()) {
      if (disable_ != NULL) disable_->::maker::FILE_IMAGE::Clear();
    }
    image_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Button::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal;
        break;
      }

      // optional .maker.FILE_IMAGE normal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selected;
        break;
      }

      // optional .maker.FILE_IMAGE selected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disable;
        break;
      }

      // optional .maker.FILE_IMAGE disable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_image_type;
        break;
      }

      // optional .maker.BUTTON_IMAGE_TYPE image_type = 5 [default = BUTTON_IMAGE_TYPE__SPRITE];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BUTTON_IMAGE_TYPE_IsValid(value)) {
            set_image_type(static_cast< ::maker::BUTTON_IMAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Button::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enable = 1 [default = true];
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional .maker.FILE_IMAGE normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->normal(), output);
  }

  // optional .maker.FILE_IMAGE selected = 3;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selected(), output);
  }

  // optional .maker.FILE_IMAGE disable = 4;
  if (has_disable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->disable(), output);
  }

  // optional .maker.BUTTON_IMAGE_TYPE image_type = 5 [default = BUTTON_IMAGE_TYPE__SPRITE];
  if (has_image_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->image_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Button::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enable = 1 [default = true];
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // optional .maker.FILE_IMAGE normal = 2;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->normal(), target);
  }

  // optional .maker.FILE_IMAGE selected = 3;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selected(), target);
  }

  // optional .maker.FILE_IMAGE disable = 4;
  if (has_disable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->disable(), target);
  }

  // optional .maker.BUTTON_IMAGE_TYPE image_type = 5 [default = BUTTON_IMAGE_TYPE__SPRITE];
  if (has_image_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->image_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Button::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enable = 1 [default = true];
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // optional .maker.FILE_IMAGE normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

    // optional .maker.FILE_IMAGE selected = 3;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected());
    }

    // optional .maker.FILE_IMAGE disable = 4;
    if (has_disable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disable());
    }

    // optional .maker.BUTTON_IMAGE_TYPE image_type = 5 [default = BUTTON_IMAGE_TYPE__SPRITE];
    if (has_image_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Button::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Button* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Button*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Button::MergeFrom(const Button& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_normal()) {
      mutable_normal()->::maker::FILE_IMAGE::MergeFrom(from.normal());
    }
    if (from.has_selected()) {
      mutable_selected()->::maker::FILE_IMAGE::MergeFrom(from.selected());
    }
    if (from.has_disable()) {
      mutable_disable()->::maker::FILE_IMAGE::MergeFrom(from.disable());
    }
    if (from.has_image_type()) {
      set_image_type(from.image_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Button::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Button::CopyFrom(const Button& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Button::IsInitialized() const {

  if (has_normal()) {
    if (!this->normal().IsInitialized()) return false;
  }
  if (has_selected()) {
    if (!this->selected().IsInitialized()) return false;
  }
  if (has_disable()) {
    if (!this->disable().IsInitialized()) return false;
  }
  return true;
}

void Button::Swap(Button* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(normal_, other->normal_);
    std::swap(selected_, other->selected_);
    std::swap(disable_, other->disable_);
    std::swap(image_type_, other->image_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Button::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Button_descriptor_;
  metadata.reflection = Button_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sprite::kFileNameFieldNumber;
const int Sprite::kColorFieldNumber;
const int Sprite::kOpacityFieldNumber;
const int Sprite::kFlipXFieldNumber;
const int Sprite::kFlipYFieldNumber;
const int Sprite::kSrcBlendFieldNumber;
const int Sprite::kDestBlendFieldNumber;
#endif  // !_MSC_VER

Sprite::Sprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sprite::InitAsDefaultInstance() {
  file_name_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

Sprite::Sprite(const Sprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sprite::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = NULL;
  color_ = NULL;
  opacity_ = 255;
  flip_x_ = false;
  flip_y_ = false;
  src_blend_ = 770;
  dest_blend_ = 771;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sprite::~Sprite() {
  SharedDtor();
}

void Sprite::SharedDtor() {
  if (this != default_instance_) {
    delete file_name_;
    delete color_;
  }
}

void Sprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sprite_descriptor_;
}

const Sprite& Sprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Sprite* Sprite::default_instance_ = NULL;

Sprite* Sprite::New() const {
  return new Sprite;
}

void Sprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != NULL) file_name_->::maker::FILE_IMAGE::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    flip_x_ = false;
    flip_y_ = false;
    src_blend_ = 770;
    dest_blend_ = 771;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_IMAGE file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 3 [default = 255];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flip_x;
        break;
      }

      // optional bool flip_x = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_x_)));
          set_has_flip_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flip_y;
        break;
      }

      // optional bool flip_y = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_y_)));
          set_has_flip_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_src_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dest_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_dest_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_IMAGE file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_name(), output);
  }

  // optional .maker.COLOR color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->color(), output);
  }

  // optional int32 opacity = 3 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opacity(), output);
  }

  // optional bool flip_x = 4 [default = false];
  if (has_flip_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flip_x(), output);
  }

  // optional bool flip_y = 5 [default = false];
  if (has_flip_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flip_y(), output);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->src_blend(), output);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->dest_blend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_IMAGE file_name = 1;
  if (has_file_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_name(), target);
  }

  // optional .maker.COLOR color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->color(), target);
  }

  // optional int32 opacity = 3 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opacity(), target);
  }

  // optional bool flip_x = 4 [default = false];
  if (has_flip_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flip_x(), target);
  }

  // optional bool flip_y = 5 [default = false];
  if (has_flip_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flip_y(), target);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->src_blend(), target);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->dest_blend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_IMAGE file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_name());
    }

    // optional .maker.COLOR color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 3 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional bool flip_x = 4 [default = false];
    if (has_flip_x()) {
      total_size += 1 + 1;
    }

    // optional bool flip_y = 5 [default = false];
    if (has_flip_y()) {
      total_size += 1 + 1;
    }

    // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
    if (has_src_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_blend());
    }

    // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
    if (has_dest_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest_blend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sprite::MergeFrom(const Sprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      mutable_file_name()->::maker::FILE_IMAGE::MergeFrom(from.file_name());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_flip_x()) {
      set_flip_x(from.flip_x());
    }
    if (from.has_flip_y()) {
      set_flip_y(from.flip_y());
    }
    if (from.has_src_blend()) {
      set_src_blend(from.src_blend());
    }
    if (from.has_dest_blend()) {
      set_dest_blend(from.dest_blend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sprite::CopyFrom(const Sprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sprite::IsInitialized() const {

  if (has_file_name()) {
    if (!this->file_name().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void Sprite::Swap(Sprite* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(flip_x_, other->flip_x_);
    std::swap(flip_y_, other->flip_y_);
    std::swap(src_blend_, other->src_blend_);
    std::swap(dest_blend_, other->dest_blend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sprite_descriptor_;
  metadata.reflection = Sprite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scale9Sprite::kFileNameFieldNumber;
const int Scale9Sprite::kColorFieldNumber;
const int Scale9Sprite::kOpacityFieldNumber;
const int Scale9Sprite::kCenterRectXFieldNumber;
const int Scale9Sprite::kCenterRectYFieldNumber;
const int Scale9Sprite::kCenterRectWidthFieldNumber;
const int Scale9Sprite::kCenterRectHeightFieldNumber;
#endif  // !_MSC_VER

Scale9Sprite::Scale9Sprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scale9Sprite::InitAsDefaultInstance() {
  file_name_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

Scale9Sprite::Scale9Sprite(const Scale9Sprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scale9Sprite::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = NULL;
  color_ = NULL;
  opacity_ = 255;
  center_rect_x_ = 0;
  center_rect_y_ = 0;
  center_rect_width_ = 0;
  center_rect_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scale9Sprite::~Scale9Sprite() {
  SharedDtor();
}

void Scale9Sprite::SharedDtor() {
  if (this != default_instance_) {
    delete file_name_;
    delete color_;
  }
}

void Scale9Sprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scale9Sprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scale9Sprite_descriptor_;
}

const Scale9Sprite& Scale9Sprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Scale9Sprite* Scale9Sprite::default_instance_ = NULL;

Scale9Sprite* Scale9Sprite::New() const {
  return new Scale9Sprite;
}

void Scale9Sprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != NULL) file_name_->::maker::FILE_IMAGE::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    center_rect_x_ = 0;
    center_rect_y_ = 0;
    center_rect_width_ = 0;
    center_rect_height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scale9Sprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_IMAGE file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 3 [default = 255];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_center_rect_x;
        break;
      }

      // optional int32 center_rect_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_rect_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_rect_x_)));
          set_has_center_rect_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_center_rect_y;
        break;
      }

      // optional int32 center_rect_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_rect_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_rect_y_)));
          set_has_center_rect_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_center_rect_width;
        break;
      }

      // optional int32 center_rect_width = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_rect_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_rect_width_)));
          set_has_center_rect_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_center_rect_height;
        break;
      }

      // optional int32 center_rect_height = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_rect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_rect_height_)));
          set_has_center_rect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scale9Sprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_IMAGE file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_name(), output);
  }

  // optional .maker.COLOR color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->color(), output);
  }

  // optional int32 opacity = 3 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opacity(), output);
  }

  // optional int32 center_rect_x = 4 [default = 0];
  if (has_center_rect_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->center_rect_x(), output);
  }

  // optional int32 center_rect_y = 5 [default = 0];
  if (has_center_rect_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->center_rect_y(), output);
  }

  // optional int32 center_rect_width = 6 [default = 0];
  if (has_center_rect_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->center_rect_width(), output);
  }

  // optional int32 center_rect_height = 7 [default = 0];
  if (has_center_rect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->center_rect_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scale9Sprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_IMAGE file_name = 1;
  if (has_file_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_name(), target);
  }

  // optional .maker.COLOR color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->color(), target);
  }

  // optional int32 opacity = 3 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opacity(), target);
  }

  // optional int32 center_rect_x = 4 [default = 0];
  if (has_center_rect_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->center_rect_x(), target);
  }

  // optional int32 center_rect_y = 5 [default = 0];
  if (has_center_rect_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->center_rect_y(), target);
  }

  // optional int32 center_rect_width = 6 [default = 0];
  if (has_center_rect_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->center_rect_width(), target);
  }

  // optional int32 center_rect_height = 7 [default = 0];
  if (has_center_rect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->center_rect_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scale9Sprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_IMAGE file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_name());
    }

    // optional .maker.COLOR color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 3 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional int32 center_rect_x = 4 [default = 0];
    if (has_center_rect_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_rect_x());
    }

    // optional int32 center_rect_y = 5 [default = 0];
    if (has_center_rect_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_rect_y());
    }

    // optional int32 center_rect_width = 6 [default = 0];
    if (has_center_rect_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_rect_width());
    }

    // optional int32 center_rect_height = 7 [default = 0];
    if (has_center_rect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_rect_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scale9Sprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scale9Sprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scale9Sprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scale9Sprite::MergeFrom(const Scale9Sprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      mutable_file_name()->::maker::FILE_IMAGE::MergeFrom(from.file_name());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_center_rect_x()) {
      set_center_rect_x(from.center_rect_x());
    }
    if (from.has_center_rect_y()) {
      set_center_rect_y(from.center_rect_y());
    }
    if (from.has_center_rect_width()) {
      set_center_rect_width(from.center_rect_width());
    }
    if (from.has_center_rect_height()) {
      set_center_rect_height(from.center_rect_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scale9Sprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scale9Sprite::CopyFrom(const Scale9Sprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scale9Sprite::IsInitialized() const {

  if (has_file_name()) {
    if (!this->file_name().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void Scale9Sprite::Swap(Scale9Sprite* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(center_rect_x_, other->center_rect_x_);
    std::swap(center_rect_y_, other->center_rect_y_);
    std::swap(center_rect_width_, other->center_rect_width_);
    std::swap(center_rect_height_, other->center_rect_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scale9Sprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scale9Sprite_descriptor_;
  metadata.reflection = Scale9Sprite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableView::kScrollFieldNumber;
const int TableView::kBounceFieldNumber;
const int TableView::kViewWidthFieldNumber;
const int TableView::kViewHeightFieldNumber;
const int TableView::kCellWidthFieldNumber;
const int TableView::kCellHeightFieldNumber;
#endif  // !_MSC_VER

TableView::TableView()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableView::InitAsDefaultInstance() {
}

TableView::TableView(const TableView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableView::SharedCtor() {
  _cached_size_ = 0;
  scroll_ = 3;
  bounce_ = true;
  view_width_ = 200;
  view_height_ = 200;
  cell_width_ = 60;
  cell_height_ = 60;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableView::~TableView() {
  SharedDtor();
}

void TableView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableView_descriptor_;
}

const TableView& TableView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

TableView* TableView::default_instance_ = NULL;

TableView* TableView::New() const {
  return new TableView;
}

void TableView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scroll_ = 3;
    bounce_ = true;
    view_width_ = 200;
    view_height_ = 200;
    cell_width_ = 60;
    cell_height_ = 60;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.SCROLL_TYPE scroll = 1 [default = SCROLL__BOTH];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::SCROLL_TYPE_IsValid(value)) {
            set_scroll(static_cast< ::maker::SCROLL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bounce;
        break;
      }

      // optional bool bounce = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bounce_)));
          set_has_bounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_view_width;
        break;
      }

      // optional int32 view_width = 3 [default = 200];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_width_)));
          set_has_view_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_view_height;
        break;
      }

      // optional int32 view_height = 4 [default = 200];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_height_)));
          set_has_view_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cell_width;
        break;
      }

      // optional int32 cell_width = 5 [default = 60];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_width_)));
          set_has_cell_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cell_height;
        break;
      }

      // optional int32 cell_height = 6 [default = 60];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_height_)));
          set_has_cell_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.SCROLL_TYPE scroll = 1 [default = SCROLL__BOTH];
  if (has_scroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scroll(), output);
  }

  // optional bool bounce = 2 [default = true];
  if (has_bounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bounce(), output);
  }

  // optional int32 view_width = 3 [default = 200];
  if (has_view_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->view_width(), output);
  }

  // optional int32 view_height = 4 [default = 200];
  if (has_view_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->view_height(), output);
  }

  // optional int32 cell_width = 5 [default = 60];
  if (has_cell_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cell_width(), output);
  }

  // optional int32 cell_height = 6 [default = 60];
  if (has_cell_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cell_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.SCROLL_TYPE scroll = 1 [default = SCROLL__BOTH];
  if (has_scroll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scroll(), target);
  }

  // optional bool bounce = 2 [default = true];
  if (has_bounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bounce(), target);
  }

  // optional int32 view_width = 3 [default = 200];
  if (has_view_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->view_width(), target);
  }

  // optional int32 view_height = 4 [default = 200];
  if (has_view_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->view_height(), target);
  }

  // optional int32 cell_width = 5 [default = 60];
  if (has_cell_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cell_width(), target);
  }

  // optional int32 cell_height = 6 [default = 60];
  if (has_cell_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cell_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.SCROLL_TYPE scroll = 1 [default = SCROLL__BOTH];
    if (has_scroll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scroll());
    }

    // optional bool bounce = 2 [default = true];
    if (has_bounce()) {
      total_size += 1 + 1;
    }

    // optional int32 view_width = 3 [default = 200];
    if (has_view_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view_width());
    }

    // optional int32 view_height = 4 [default = 200];
    if (has_view_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view_height());
    }

    // optional int32 cell_width = 5 [default = 60];
    if (has_cell_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_width());
    }

    // optional int32 cell_height = 6 [default = 60];
    if (has_cell_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableView::MergeFrom(const TableView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scroll()) {
      set_scroll(from.scroll());
    }
    if (from.has_bounce()) {
      set_bounce(from.bounce());
    }
    if (from.has_view_width()) {
      set_view_width(from.view_width());
    }
    if (from.has_view_height()) {
      set_view_height(from.view_height());
    }
    if (from.has_cell_width()) {
      set_cell_width(from.cell_width());
    }
    if (from.has_cell_height()) {
      set_cell_height(from.cell_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableView::CopyFrom(const TableView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableView::IsInitialized() const {

  return true;
}

void TableView::Swap(TableView* other) {
  if (other != this) {
    std::swap(scroll_, other->scroll_);
    std::swap(bounce_, other->bounce_);
    std::swap(view_width_, other->view_width_);
    std::swap(view_height_, other->view_height_);
    std::swap(cell_width_, other->cell_width_);
    std::swap(cell_height_, other->cell_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableView_descriptor_;
  metadata.reflection = TableView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProgressTimer::kFileNameFieldNumber;
const int ProgressTimer::kColorFieldNumber;
const int ProgressTimer::kOpacityFieldNumber;
const int ProgressTimer::kFlipXFieldNumber;
const int ProgressTimer::kFlipYFieldNumber;
const int ProgressTimer::kSrcBlendFieldNumber;
const int ProgressTimer::kDestBlendFieldNumber;
const int ProgressTimer::kProgressTypeFieldNumber;
const int ProgressTimer::kMidPointXFieldNumber;
const int ProgressTimer::kMidPointYFieldNumber;
const int ProgressTimer::kPercentageFieldNumber;
#endif  // !_MSC_VER

ProgressTimer::ProgressTimer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProgressTimer::InitAsDefaultInstance() {
  file_name_ = const_cast< ::maker::FILE_IMAGE*>(&::maker::FILE_IMAGE::default_instance());
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

ProgressTimer::ProgressTimer(const ProgressTimer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProgressTimer::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = NULL;
  color_ = NULL;
  opacity_ = 255;
  flip_x_ = false;
  flip_y_ = false;
  src_blend_ = 770;
  dest_blend_ = 771;
  progress_type_ = 0;
  mid_point_x_ = 0.5f;
  mid_point_y_ = 0.5f;
  percentage_ = 75;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgressTimer::~ProgressTimer() {
  SharedDtor();
}

void ProgressTimer::SharedDtor() {
  if (this != default_instance_) {
    delete file_name_;
    delete color_;
  }
}

void ProgressTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgressTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressTimer_descriptor_;
}

const ProgressTimer& ProgressTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

ProgressTimer* ProgressTimer::default_instance_ = NULL;

ProgressTimer* ProgressTimer::New() const {
  return new ProgressTimer;
}

void ProgressTimer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != NULL) file_name_->::maker::FILE_IMAGE::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
    flip_x_ = false;
    flip_y_ = false;
    src_blend_ = 770;
    dest_blend_ = 771;
    progress_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mid_point_x_ = 0.5f;
    mid_point_y_ = 0.5f;
    percentage_ = 75;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgressTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_IMAGE file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 3 [default = 255];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flip_x;
        break;
      }

      // optional bool flip_x = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_x_)));
          set_has_flip_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flip_y;
        break;
      }

      // optional bool flip_y = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_y_)));
          set_has_flip_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_src_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dest_blend;
        break;
      }

      // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::BLEND_FUNCTION_IsValid(value)) {
            set_dest_blend(static_cast< ::maker::BLEND_FUNCTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_progress_type;
        break;
      }

      // optional .maker.PROGRESS_TYPE progress_type = 8 [default = PROGRESS__RADIAL_CW];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::PROGRESS_TYPE_IsValid(value)) {
            set_progress_type(static_cast< ::maker::PROGRESS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_mid_point_x;
        break;
      }

      // optional float mid_point_x = 9 [default = 0.5];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mid_point_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mid_point_x_)));
          set_has_mid_point_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_mid_point_y;
        break;
      }

      // optional float mid_point_y = 10 [default = 0.5];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mid_point_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mid_point_y_)));
          set_has_mid_point_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_percentage;
        break;
      }

      // optional int32 percentage = 11 [default = 75];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentage_)));
          set_has_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgressTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_IMAGE file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_name(), output);
  }

  // optional .maker.COLOR color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->color(), output);
  }

  // optional int32 opacity = 3 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opacity(), output);
  }

  // optional bool flip_x = 4 [default = false];
  if (has_flip_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flip_x(), output);
  }

  // optional bool flip_y = 5 [default = false];
  if (has_flip_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flip_y(), output);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->src_blend(), output);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->dest_blend(), output);
  }

  // optional .maker.PROGRESS_TYPE progress_type = 8 [default = PROGRESS__RADIAL_CW];
  if (has_progress_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->progress_type(), output);
  }

  // optional float mid_point_x = 9 [default = 0.5];
  if (has_mid_point_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mid_point_x(), output);
  }

  // optional float mid_point_y = 10 [default = 0.5];
  if (has_mid_point_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->mid_point_y(), output);
  }

  // optional int32 percentage = 11 [default = 75];
  if (has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->percentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProgressTimer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_IMAGE file_name = 1;
  if (has_file_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_name(), target);
  }

  // optional .maker.COLOR color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->color(), target);
  }

  // optional int32 opacity = 3 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opacity(), target);
  }

  // optional bool flip_x = 4 [default = false];
  if (has_flip_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flip_x(), target);
  }

  // optional bool flip_y = 5 [default = false];
  if (has_flip_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flip_y(), target);
  }

  // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
  if (has_src_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->src_blend(), target);
  }

  // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
  if (has_dest_blend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->dest_blend(), target);
  }

  // optional .maker.PROGRESS_TYPE progress_type = 8 [default = PROGRESS__RADIAL_CW];
  if (has_progress_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->progress_type(), target);
  }

  // optional float mid_point_x = 9 [default = 0.5];
  if (has_mid_point_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mid_point_x(), target);
  }

  // optional float mid_point_y = 10 [default = 0.5];
  if (has_mid_point_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->mid_point_y(), target);
  }

  // optional int32 percentage = 11 [default = 75];
  if (has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->percentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProgressTimer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_IMAGE file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_name());
    }

    // optional .maker.COLOR color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 3 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional bool flip_x = 4 [default = false];
    if (has_flip_x()) {
      total_size += 1 + 1;
    }

    // optional bool flip_y = 5 [default = false];
    if (has_flip_y()) {
      total_size += 1 + 1;
    }

    // optional .maker.BLEND_FUNCTION src_blend = 6 [default = BLEND__GL_SRC_ALPHA];
    if (has_src_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_blend());
    }

    // optional .maker.BLEND_FUNCTION dest_blend = 7 [default = BLEND__GL_ONE_MINUS_SRC_ALPHA];
    if (has_dest_blend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest_blend());
    }

    // optional .maker.PROGRESS_TYPE progress_type = 8 [default = PROGRESS__RADIAL_CW];
    if (has_progress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float mid_point_x = 9 [default = 0.5];
    if (has_mid_point_x()) {
      total_size += 1 + 4;
    }

    // optional float mid_point_y = 10 [default = 0.5];
    if (has_mid_point_y()) {
      total_size += 1 + 4;
    }

    // optional int32 percentage = 11 [default = 75];
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgressTimer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgressTimer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgressTimer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgressTimer::MergeFrom(const ProgressTimer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      mutable_file_name()->::maker::FILE_IMAGE::MergeFrom(from.file_name());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_flip_x()) {
      set_flip_x(from.flip_x());
    }
    if (from.has_flip_y()) {
      set_flip_y(from.flip_y());
    }
    if (from.has_src_blend()) {
      set_src_blend(from.src_blend());
    }
    if (from.has_dest_blend()) {
      set_dest_blend(from.dest_blend());
    }
    if (from.has_progress_type()) {
      set_progress_type(from.progress_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mid_point_x()) {
      set_mid_point_x(from.mid_point_x());
    }
    if (from.has_mid_point_y()) {
      set_mid_point_y(from.mid_point_y());
    }
    if (from.has_percentage()) {
      set_percentage(from.percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgressTimer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressTimer::CopyFrom(const ProgressTimer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressTimer::IsInitialized() const {

  if (has_file_name()) {
    if (!this->file_name().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void ProgressTimer::Swap(ProgressTimer* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(flip_x_, other->flip_x_);
    std::swap(flip_y_, other->flip_y_);
    std::swap(src_blend_, other->src_blend_);
    std::swap(dest_blend_, other->dest_blend_);
    std::swap(progress_type_, other->progress_type_);
    std::swap(mid_point_x_, other->mid_point_x_);
    std::swap(mid_point_y_, other->mid_point_y_);
    std::swap(percentage_, other->percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgressTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgressTimer_descriptor_;
  metadata.reflection = ProgressTimer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Visual::kFileNameFieldNumber;
const int Visual::kAutoPlayFieldNumber;
const int Visual::kIsRepeatFieldNumber;
const int Visual::kVisualIdFieldNumber;
const int Visual::kColorFieldNumber;
const int Visual::kOpacityFieldNumber;
#endif  // !_MSC_VER

Visual::Visual()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Visual::InitAsDefaultInstance() {
  file_name_ = const_cast< ::maker::FILE_VISUAL*>(&::maker::FILE_VISUAL::default_instance());
  visual_id_ = const_cast< ::maker::NAME_VISUAL*>(&::maker::NAME_VISUAL::default_instance());
  color_ = const_cast< ::maker::COLOR*>(&::maker::COLOR::default_instance());
}

Visual::Visual(const Visual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Visual::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = NULL;
  auto_play_ = true;
  is_repeat_ = true;
  visual_id_ = NULL;
  color_ = NULL;
  opacity_ = 255;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Visual::~Visual() {
  SharedDtor();
}

void Visual::SharedDtor() {
  if (this != default_instance_) {
    delete file_name_;
    delete visual_id_;
    delete color_;
  }
}

void Visual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visual_descriptor_;
}

const Visual& Visual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Visual* Visual::default_instance_ = NULL;

Visual* Visual::New() const {
  return new Visual;
}

void Visual::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != NULL) file_name_->::maker::FILE_VISUAL::Clear();
    }
    auto_play_ = true;
    is_repeat_ = true;
    if (has_visual_id()) {
      if (visual_id_ != NULL) visual_id_->::maker::NAME_VISUAL::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::maker::COLOR::Clear();
    }
    opacity_ = 255;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_VISUAL file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_play;
        break;
      }

      // optional bool auto_play = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_play_)));
          set_has_auto_play();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_repeat;
        break;
      }

      // optional bool is_repeat = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_repeat_)));
          set_has_is_repeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_visual_id;
        break;
      }

      // optional .maker.NAME_VISUAL visual_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visual_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visual_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // optional .maker.COLOR color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 7 [default = 255];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_VISUAL file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_name(), output);
  }

  // optional bool auto_play = 2 [default = true];
  if (has_auto_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_play(), output);
  }

  // optional bool is_repeat = 3 [default = true];
  if (has_is_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_repeat(), output);
  }

  // optional .maker.NAME_VISUAL visual_id = 4;
  if (has_visual_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->visual_id(), output);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->color(), output);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->opacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Visual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_VISUAL file_name = 1;
  if (has_file_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_name(), target);
  }

  // optional bool auto_play = 2 [default = true];
  if (has_auto_play()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_play(), target);
  }

  // optional bool is_repeat = 3 [default = true];
  if (has_is_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_repeat(), target);
  }

  // optional .maker.NAME_VISUAL visual_id = 4;
  if (has_visual_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->visual_id(), target);
  }

  // optional .maker.COLOR color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->color(), target);
  }

  // optional int32 opacity = 7 [default = 255];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->opacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Visual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_VISUAL file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_name());
    }

    // optional bool auto_play = 2 [default = true];
    if (has_auto_play()) {
      total_size += 1 + 1;
    }

    // optional bool is_repeat = 3 [default = true];
    if (has_is_repeat()) {
      total_size += 1 + 1;
    }

    // optional .maker.NAME_VISUAL visual_id = 4;
    if (has_visual_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visual_id());
    }

    // optional .maker.COLOR color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional int32 opacity = 7 [default = 255];
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Visual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Visual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      mutable_file_name()->::maker::FILE_VISUAL::MergeFrom(from.file_name());
    }
    if (from.has_auto_play()) {
      set_auto_play(from.auto_play());
    }
    if (from.has_is_repeat()) {
      set_is_repeat(from.is_repeat());
    }
    if (from.has_visual_id()) {
      mutable_visual_id()->::maker::NAME_VISUAL::MergeFrom(from.visual_id());
    }
    if (from.has_color()) {
      mutable_color()->::maker::COLOR::MergeFrom(from.color());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Visual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {

  if (has_file_name()) {
    if (!this->file_name().IsInitialized()) return false;
  }
  if (has_visual_id()) {
    if (!this->visual_id().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void Visual::Swap(Visual* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(auto_play_, other->auto_play_);
    std::swap(is_repeat_, other->is_repeat_);
    std::swap(visual_id_, other->visual_id_);
    std::swap(color_, other->color_);
    std::swap(opacity_, other->opacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Visual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visual_descriptor_;
  metadata.reflection = Visual_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocketNode::kSocketNameFieldNumber;
#endif  // !_MSC_VER

SocketNode::SocketNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocketNode::InitAsDefaultInstance() {
}

SocketNode::SocketNode(const SocketNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocketNode::SharedCtor() {
  _cached_size_ = 0;
  socket_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketNode::~SocketNode() {
  SharedDtor();
}

void SocketNode::SharedDtor() {
  if (socket_name_ != &::google::protobuf::internal::kEmptyString) {
    delete socket_name_;
  }
  if (this != default_instance_) {
  }
}

void SocketNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocketNode_descriptor_;
}

const SocketNode& SocketNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

SocketNode* SocketNode::default_instance_ = NULL;

SocketNode* SocketNode::New() const {
  return new SocketNode;
}

void SocketNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket_name()) {
      if (socket_name_ != &::google::protobuf::internal::kEmptyString) {
        socket_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocketNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string socket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->socket_name().data(), this->socket_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocketNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string socket_name = 1;
  if (has_socket_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_name().data(), this->socket_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->socket_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocketNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string socket_name = 1;
  if (has_socket_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_name().data(), this->socket_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->socket_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocketNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string socket_name = 1;
    if (has_socket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocketNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocketNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocketNode::MergeFrom(const SocketNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket_name()) {
      set_socket_name(from.socket_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocketNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketNode::CopyFrom(const SocketNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketNode::IsInitialized() const {

  return true;
}

void SocketNode::Swap(SocketNode* other) {
  if (other != this) {
    std::swap(socket_name_, other->socket_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocketNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocketNode_descriptor_;
  metadata.reflection = SocketNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Particle::kFileNameFieldNumber;
#endif  // !_MSC_VER

Particle::Particle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Particle::InitAsDefaultInstance() {
  file_name_ = const_cast< ::maker::FILE_PLIST*>(&::maker::FILE_PLIST::default_instance());
}

Particle::Particle(const Particle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Particle::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Particle::~Particle() {
  SharedDtor();
}

void Particle::SharedDtor() {
  if (this != default_instance_) {
    delete file_name_;
  }
}

void Particle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Particle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Particle_descriptor_;
}

const Particle& Particle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Particle* Particle::default_instance_ = NULL;

Particle* Particle::New() const {
  return new Particle;
}

void Particle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != NULL) file_name_->::maker::FILE_PLIST::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Particle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .maker.FILE_PLIST file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Particle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .maker.FILE_PLIST file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Particle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .maker.FILE_PLIST file_name = 1;
  if (has_file_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Particle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .maker.FILE_PLIST file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Particle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Particle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Particle::MergeFrom(const Particle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      mutable_file_name()->::maker::FILE_PLIST::MergeFrom(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Particle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Particle::CopyFrom(const Particle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particle::IsInitialized() const {

  if (has_file_name()) {
    if (!this->file_name().IsInitialized()) return false;
  }
  return true;
}

void Particle::Swap(Particle* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Particle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Particle_descriptor_;
  metadata.reflection = Particle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotatePlate::kRadiusXFieldNumber;
const int RotatePlate::kRadiusYFieldNumber;
const int RotatePlate::kMinScaleFieldNumber;
const int RotatePlate::kMaxScaleFieldNumber;
const int RotatePlate::kOriginDirFieldNumber;
#endif  // !_MSC_VER

RotatePlate::RotatePlate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotatePlate::InitAsDefaultInstance() {
}

RotatePlate::RotatePlate(const RotatePlate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotatePlate::SharedCtor() {
  _cached_size_ = 0;
  radius_x_ = 100;
  radius_y_ = 50;
  min_scale_ = 0.5f;
  max_scale_ = 1;
  origin_dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotatePlate::~RotatePlate() {
  SharedDtor();
}

void RotatePlate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotatePlate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotatePlate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotatePlate_descriptor_;
}

const RotatePlate& RotatePlate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

RotatePlate* RotatePlate::default_instance_ = NULL;

RotatePlate* RotatePlate::New() const {
  return new RotatePlate;
}

void RotatePlate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    radius_x_ = 100;
    radius_y_ = 50;
    min_scale_ = 0.5f;
    max_scale_ = 1;
    origin_dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotatePlate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float radius_x = 1 [default = 100];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_x_)));
          set_has_radius_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_radius_y;
        break;
      }

      // optional float radius_y = 2 [default = 50];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_y_)));
          set_has_radius_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_min_scale;
        break;
      }

      // optional float min_scale = 3 [default = 0.5];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_scale_)));
          set_has_min_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_max_scale;
        break;
      }

      // optional float max_scale = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_scale_)));
          set_has_max_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_origin_dir;
        break;
      }

      // optional .maker.ROTATE_PLATE_ORIGIN_DIR origin_dir = 5 [default = ROTATE_PLATE_ORIGIN_DIR__DOWN];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::ROTATE_PLATE_ORIGIN_DIR_IsValid(value)) {
            set_origin_dir(static_cast< ::maker::ROTATE_PLATE_ORIGIN_DIR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotatePlate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float radius_x = 1 [default = 100];
  if (has_radius_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius_x(), output);
  }

  // optional float radius_y = 2 [default = 50];
  if (has_radius_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius_y(), output);
  }

  // optional float min_scale = 3 [default = 0.5];
  if (has_min_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_scale(), output);
  }

  // optional float max_scale = 4 [default = 1];
  if (has_max_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_scale(), output);
  }

  // optional .maker.ROTATE_PLATE_ORIGIN_DIR origin_dir = 5 [default = ROTATE_PLATE_ORIGIN_DIR__DOWN];
  if (has_origin_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->origin_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotatePlate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float radius_x = 1 [default = 100];
  if (has_radius_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius_x(), target);
  }

  // optional float radius_y = 2 [default = 50];
  if (has_radius_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius_y(), target);
  }

  // optional float min_scale = 3 [default = 0.5];
  if (has_min_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_scale(), target);
  }

  // optional float max_scale = 4 [default = 1];
  if (has_max_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_scale(), target);
  }

  // optional .maker.ROTATE_PLATE_ORIGIN_DIR origin_dir = 5 [default = ROTATE_PLATE_ORIGIN_DIR__DOWN];
  if (has_origin_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->origin_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotatePlate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float radius_x = 1 [default = 100];
    if (has_radius_x()) {
      total_size += 1 + 4;
    }

    // optional float radius_y = 2 [default = 50];
    if (has_radius_y()) {
      total_size += 1 + 4;
    }

    // optional float min_scale = 3 [default = 0.5];
    if (has_min_scale()) {
      total_size += 1 + 4;
    }

    // optional float max_scale = 4 [default = 1];
    if (has_max_scale()) {
      total_size += 1 + 4;
    }

    // optional .maker.ROTATE_PLATE_ORIGIN_DIR origin_dir = 5 [default = ROTATE_PLATE_ORIGIN_DIR__DOWN];
    if (has_origin_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin_dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotatePlate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotatePlate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotatePlate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotatePlate::MergeFrom(const RotatePlate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius_x()) {
      set_radius_x(from.radius_x());
    }
    if (from.has_radius_y()) {
      set_radius_y(from.radius_y());
    }
    if (from.has_min_scale()) {
      set_min_scale(from.min_scale());
    }
    if (from.has_max_scale()) {
      set_max_scale(from.max_scale());
    }
    if (from.has_origin_dir()) {
      set_origin_dir(from.origin_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotatePlate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotatePlate::CopyFrom(const RotatePlate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotatePlate::IsInitialized() const {

  return true;
}

void RotatePlate::Swap(RotatePlate* other) {
  if (other != this) {
    std::swap(radius_x_, other->radius_x_);
    std::swap(radius_y_, other->radius_y_);
    std::swap(min_scale_, other->min_scale_);
    std::swap(max_scale_, other->max_scale_);
    std::swap(origin_dir_, other->origin_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotatePlate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotatePlate_descriptor_;
  metadata.reflection = RotatePlate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Properties::kTypeFieldNumber;
const int Properties::kNodeFieldNumber;
const int Properties::kLayerColorFieldNumber;
const int Properties::kLayerGradientFieldNumber;
const int Properties::kLabelSyatemFontFieldNumber;
const int Properties::kLabelTtfFieldNumber;
const int Properties::kTextFieldTtfFieldNumber;
const int Properties::kEditBoxFieldNumber;
const int Properties::kTableViewFieldNumber;
const int Properties::kRotatePlateFieldNumber;
const int Properties::kButtonFieldNumber;
const int Properties::kSpriteFieldNumber;
const int Properties::kScale9SpriteFieldNumber;
const int Properties::kProgressTimerFieldNumber;
const int Properties::kVisualFieldNumber;
const int Properties::kParticleFieldNumber;
const int Properties::kClippingNodeFieldNumber;
const int Properties::kSocketNodeFieldNumber;
#endif  // !_MSC_VER

Properties::Properties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Properties::InitAsDefaultInstance() {
  node_ = const_cast< ::maker::Node*>(&::maker::Node::default_instance());
  layer_color_ = const_cast< ::maker::LayerColor*>(&::maker::LayerColor::default_instance());
  layer_gradient_ = const_cast< ::maker::LayerGradient*>(&::maker::LayerGradient::default_instance());
  label_syatem_font_ = const_cast< ::maker::LabelSystemFont*>(&::maker::LabelSystemFont::default_instance());
  label_ttf_ = const_cast< ::maker::LabelTTF*>(&::maker::LabelTTF::default_instance());
  text_field_ttf_ = const_cast< ::maker::TextFieldTTF*>(&::maker::TextFieldTTF::default_instance());
  edit_box_ = const_cast< ::maker::EditBox*>(&::maker::EditBox::default_instance());
  table_view_ = const_cast< ::maker::TableView*>(&::maker::TableView::default_instance());
  rotate_plate_ = const_cast< ::maker::RotatePlate*>(&::maker::RotatePlate::default_instance());
  button_ = const_cast< ::maker::Button*>(&::maker::Button::default_instance());
  sprite_ = const_cast< ::maker::Sprite*>(&::maker::Sprite::default_instance());
  scale_9_sprite_ = const_cast< ::maker::Scale9Sprite*>(&::maker::Scale9Sprite::default_instance());
  progress_timer_ = const_cast< ::maker::ProgressTimer*>(&::maker::ProgressTimer::default_instance());
  visual_ = const_cast< ::maker::Visual*>(&::maker::Visual::default_instance());
  particle_ = const_cast< ::maker::Particle*>(&::maker::Particle::default_instance());
  clipping_node_ = const_cast< ::maker::ClippingNode*>(&::maker::ClippingNode::default_instance());
  socket_node_ = const_cast< ::maker::SocketNode*>(&::maker::SocketNode::default_instance());
}

Properties::Properties(const Properties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Properties::SharedCtor() {
  _cached_size_ = 0;
  type_ = 10;
  node_ = NULL;
  layer_color_ = NULL;
  layer_gradient_ = NULL;
  label_syatem_font_ = NULL;
  label_ttf_ = NULL;
  text_field_ttf_ = NULL;
  edit_box_ = NULL;
  table_view_ = NULL;
  rotate_plate_ = NULL;
  button_ = NULL;
  sprite_ = NULL;
  scale_9_sprite_ = NULL;
  progress_timer_ = NULL;
  visual_ = NULL;
  particle_ = NULL;
  clipping_node_ = NULL;
  socket_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Properties::~Properties() {
  SharedDtor();
}

void Properties::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
    delete layer_color_;
    delete layer_gradient_;
    delete label_syatem_font_;
    delete label_ttf_;
    delete text_field_ttf_;
    delete edit_box_;
    delete table_view_;
    delete rotate_plate_;
    delete button_;
    delete sprite_;
    delete scale_9_sprite_;
    delete progress_timer_;
    delete visual_;
    delete particle_;
    delete clipping_node_;
    delete socket_node_;
  }
}

void Properties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Properties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Properties_descriptor_;
}

const Properties& Properties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Properties* Properties::default_instance_ = NULL;

Properties* Properties::New() const {
  return new Properties;
}

void Properties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 10;
    if (has_node()) {
      if (node_ != NULL) node_->::maker::Node::Clear();
    }
    if (has_layer_color()) {
      if (layer_color_ != NULL) layer_color_->::maker::LayerColor::Clear();
    }
    if (has_layer_gradient()) {
      if (layer_gradient_ != NULL) layer_gradient_->::maker::LayerGradient::Clear();
    }
    if (has_label_syatem_font()) {
      if (label_syatem_font_ != NULL) label_syatem_font_->::maker::LabelSystemFont::Clear();
    }
    if (has_label_ttf()) {
      if (label_ttf_ != NULL) label_ttf_->::maker::LabelTTF::Clear();
    }
    if (has_text_field_ttf()) {
      if (text_field_ttf_ != NULL) text_field_ttf_->::maker::TextFieldTTF::Clear();
    }
    if (has_edit_box()) {
      if (edit_box_ != NULL) edit_box_->::maker::EditBox::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_table_view()) {
      if (table_view_ != NULL) table_view_->::maker::TableView::Clear();
    }
    if (has_rotate_plate()) {
      if (rotate_plate_ != NULL) rotate_plate_->::maker::RotatePlate::Clear();
    }
    if (has_button()) {
      if (button_ != NULL) button_->::maker::Button::Clear();
    }
    if (has_sprite()) {
      if (sprite_ != NULL) sprite_->::maker::Sprite::Clear();
    }
    if (has_scale_9_sprite()) {
      if (scale_9_sprite_ != NULL) scale_9_sprite_->::maker::Scale9Sprite::Clear();
    }
    if (has_progress_timer()) {
      if (progress_timer_ != NULL) progress_timer_->::maker::ProgressTimer::Clear();
    }
    if (has_visual()) {
      if (visual_ != NULL) visual_->::maker::Visual::Clear();
    }
    if (has_particle()) {
      if (particle_ != NULL) particle_->::maker::Particle::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_clipping_node()) {
      if (clipping_node_ != NULL) clipping_node_->::maker::ClippingNode::Clear();
    }
    if (has_socket_node()) {
      if (socket_node_ != NULL) socket_node_->::maker::SocketNode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Properties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maker.ENTITY_TYPE type = 1 [default = ENTITY__Node];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::ENTITY_TYPE_IsValid(value)) {
            set_type(static_cast< ::maker::ENTITY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_node;
        break;
      }

      // optional .maker.Node node = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_layer_color;
        break;
      }

      // optional .maker.LayerColor layer_color = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_layer_gradient;
        break;
      }

      // optional .maker.LayerGradient layer_gradient = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer_gradient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer_gradient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_label_syatem_font;
        break;
      }

      // optional .maker.LabelSystemFont label_syatem_font = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label_syatem_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_syatem_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_label_ttf;
        break;
      }

      // optional .maker.LabelTTF label_ttf = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label_ttf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_ttf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_text_field_ttf;
        break;
      }

      // optional .maker.TextFieldTTF text_field_ttf = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_field_ttf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_field_ttf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_edit_box;
        break;
      }

      // optional .maker.EditBox edit_box = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edit_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edit_box()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_table_view;
        break;
      }

      // optional .maker.TableView table_view = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_rotate_plate;
        break;
      }

      // optional .maker.RotatePlate rotate_plate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotate_plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotate_plate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_button;
        break;
      }

      // optional .maker.Button button = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_button()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_sprite;
        break;
      }

      // optional .maker.Sprite sprite = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_scale_9_sprite;
        break;
      }

      // optional .maker.Scale9Sprite scale_9_sprite = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale_9_sprite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_9_sprite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_progress_timer;
        break;
      }

      // optional .maker.ProgressTimer progress_timer = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progress_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progress_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_visual;
        break;
      }

      // optional .maker.Visual visual = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visual()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_particle;
        break;
      }

      // optional .maker.Particle particle = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_clipping_node;
        break;
      }

      // optional .maker.ClippingNode clipping_node = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clipping_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipping_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_socket_node;
        break;
      }

      // optional .maker.SocketNode socket_node = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Properties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maker.ENTITY_TYPE type = 1 [default = ENTITY__Node];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .maker.Node node = 10;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->node(), output);
  }

  // optional .maker.LayerColor layer_color = 11;
  if (has_layer_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->layer_color(), output);
  }

  // optional .maker.LayerGradient layer_gradient = 12;
  if (has_layer_gradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->layer_gradient(), output);
  }

  // optional .maker.LabelSystemFont label_syatem_font = 13;
  if (has_label_syatem_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->label_syatem_font(), output);
  }

  // optional .maker.LabelTTF label_ttf = 14;
  if (has_label_ttf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->label_ttf(), output);
  }

  // optional .maker.TextFieldTTF text_field_ttf = 15;
  if (has_text_field_ttf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->text_field_ttf(), output);
  }

  // optional .maker.EditBox edit_box = 16;
  if (has_edit_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->edit_box(), output);
  }

  // optional .maker.TableView table_view = 17;
  if (has_table_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->table_view(), output);
  }

  // optional .maker.RotatePlate rotate_plate = 18;
  if (has_rotate_plate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->rotate_plate(), output);
  }

  // optional .maker.Button button = 19;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->button(), output);
  }

  // optional .maker.Sprite sprite = 20;
  if (has_sprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->sprite(), output);
  }

  // optional .maker.Scale9Sprite scale_9_sprite = 21;
  if (has_scale_9_sprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->scale_9_sprite(), output);
  }

  // optional .maker.ProgressTimer progress_timer = 22;
  if (has_progress_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->progress_timer(), output);
  }

  // optional .maker.Visual visual = 23;
  if (has_visual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->visual(), output);
  }

  // optional .maker.Particle particle = 24;
  if (has_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->particle(), output);
  }

  // optional .maker.ClippingNode clipping_node = 25;
  if (has_clipping_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->clipping_node(), output);
  }

  // optional .maker.SocketNode socket_node = 100;
  if (has_socket_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->socket_node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Properties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maker.ENTITY_TYPE type = 1 [default = ENTITY__Node];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .maker.Node node = 10;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->node(), target);
  }

  // optional .maker.LayerColor layer_color = 11;
  if (has_layer_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->layer_color(), target);
  }

  // optional .maker.LayerGradient layer_gradient = 12;
  if (has_layer_gradient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->layer_gradient(), target);
  }

  // optional .maker.LabelSystemFont label_syatem_font = 13;
  if (has_label_syatem_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->label_syatem_font(), target);
  }

  // optional .maker.LabelTTF label_ttf = 14;
  if (has_label_ttf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->label_ttf(), target);
  }

  // optional .maker.TextFieldTTF text_field_ttf = 15;
  if (has_text_field_ttf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->text_field_ttf(), target);
  }

  // optional .maker.EditBox edit_box = 16;
  if (has_edit_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->edit_box(), target);
  }

  // optional .maker.TableView table_view = 17;
  if (has_table_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->table_view(), target);
  }

  // optional .maker.RotatePlate rotate_plate = 18;
  if (has_rotate_plate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->rotate_plate(), target);
  }

  // optional .maker.Button button = 19;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->button(), target);
  }

  // optional .maker.Sprite sprite = 20;
  if (has_sprite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->sprite(), target);
  }

  // optional .maker.Scale9Sprite scale_9_sprite = 21;
  if (has_scale_9_sprite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->scale_9_sprite(), target);
  }

  // optional .maker.ProgressTimer progress_timer = 22;
  if (has_progress_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->progress_timer(), target);
  }

  // optional .maker.Visual visual = 23;
  if (has_visual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->visual(), target);
  }

  // optional .maker.Particle particle = 24;
  if (has_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->particle(), target);
  }

  // optional .maker.ClippingNode clipping_node = 25;
  if (has_clipping_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->clipping_node(), target);
  }

  // optional .maker.SocketNode socket_node = 100;
  if (has_socket_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->socket_node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Properties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maker.ENTITY_TYPE type = 1 [default = ENTITY__Node];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .maker.Node node = 10;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

    // optional .maker.LayerColor layer_color = 11;
    if (has_layer_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer_color());
    }

    // optional .maker.LayerGradient layer_gradient = 12;
    if (has_layer_gradient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer_gradient());
    }

    // optional .maker.LabelSystemFont label_syatem_font = 13;
    if (has_label_syatem_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->label_syatem_font());
    }

    // optional .maker.LabelTTF label_ttf = 14;
    if (has_label_ttf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->label_ttf());
    }

    // optional .maker.TextFieldTTF text_field_ttf = 15;
    if (has_text_field_ttf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_field_ttf());
    }

    // optional .maker.EditBox edit_box = 16;
    if (has_edit_box()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edit_box());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .maker.TableView table_view = 17;
    if (has_table_view()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_view());
    }

    // optional .maker.RotatePlate rotate_plate = 18;
    if (has_rotate_plate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotate_plate());
    }

    // optional .maker.Button button = 19;
    if (has_button()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->button());
    }

    // optional .maker.Sprite sprite = 20;
    if (has_sprite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sprite());
    }

    // optional .maker.Scale9Sprite scale_9_sprite = 21;
    if (has_scale_9_sprite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_9_sprite());
    }

    // optional .maker.ProgressTimer progress_timer = 22;
    if (has_progress_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progress_timer());
    }

    // optional .maker.Visual visual = 23;
    if (has_visual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visual());
    }

    // optional .maker.Particle particle = 24;
    if (has_particle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .maker.ClippingNode clipping_node = 25;
    if (has_clipping_node()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clipping_node());
    }

    // optional .maker.SocketNode socket_node = 100;
    if (has_socket_node()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket_node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Properties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Properties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Properties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Properties::MergeFrom(const Properties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_node()) {
      mutable_node()->::maker::Node::MergeFrom(from.node());
    }
    if (from.has_layer_color()) {
      mutable_layer_color()->::maker::LayerColor::MergeFrom(from.layer_color());
    }
    if (from.has_layer_gradient()) {
      mutable_layer_gradient()->::maker::LayerGradient::MergeFrom(from.layer_gradient());
    }
    if (from.has_label_syatem_font()) {
      mutable_label_syatem_font()->::maker::LabelSystemFont::MergeFrom(from.label_syatem_font());
    }
    if (from.has_label_ttf()) {
      mutable_label_ttf()->::maker::LabelTTF::MergeFrom(from.label_ttf());
    }
    if (from.has_text_field_ttf()) {
      mutable_text_field_ttf()->::maker::TextFieldTTF::MergeFrom(from.text_field_ttf());
    }
    if (from.has_edit_box()) {
      mutable_edit_box()->::maker::EditBox::MergeFrom(from.edit_box());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_table_view()) {
      mutable_table_view()->::maker::TableView::MergeFrom(from.table_view());
    }
    if (from.has_rotate_plate()) {
      mutable_rotate_plate()->::maker::RotatePlate::MergeFrom(from.rotate_plate());
    }
    if (from.has_button()) {
      mutable_button()->::maker::Button::MergeFrom(from.button());
    }
    if (from.has_sprite()) {
      mutable_sprite()->::maker::Sprite::MergeFrom(from.sprite());
    }
    if (from.has_scale_9_sprite()) {
      mutable_scale_9_sprite()->::maker::Scale9Sprite::MergeFrom(from.scale_9_sprite());
    }
    if (from.has_progress_timer()) {
      mutable_progress_timer()->::maker::ProgressTimer::MergeFrom(from.progress_timer());
    }
    if (from.has_visual()) {
      mutable_visual()->::maker::Visual::MergeFrom(from.visual());
    }
    if (from.has_particle()) {
      mutable_particle()->::maker::Particle::MergeFrom(from.particle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_clipping_node()) {
      mutable_clipping_node()->::maker::ClippingNode::MergeFrom(from.clipping_node());
    }
    if (from.has_socket_node()) {
      mutable_socket_node()->::maker::SocketNode::MergeFrom(from.socket_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Properties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Properties::CopyFrom(const Properties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Properties::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_layer_color()) {
    if (!this->layer_color().IsInitialized()) return false;
  }
  if (has_layer_gradient()) {
    if (!this->layer_gradient().IsInitialized()) return false;
  }
  if (has_label_syatem_font()) {
    if (!this->label_syatem_font().IsInitialized()) return false;
  }
  if (has_label_ttf()) {
    if (!this->label_ttf().IsInitialized()) return false;
  }
  if (has_text_field_ttf()) {
    if (!this->text_field_ttf().IsInitialized()) return false;
  }
  if (has_edit_box()) {
    if (!this->edit_box().IsInitialized()) return false;
  }
  if (has_button()) {
    if (!this->button().IsInitialized()) return false;
  }
  if (has_sprite()) {
    if (!this->sprite().IsInitialized()) return false;
  }
  if (has_scale_9_sprite()) {
    if (!this->scale_9_sprite().IsInitialized()) return false;
  }
  if (has_progress_timer()) {
    if (!this->progress_timer().IsInitialized()) return false;
  }
  if (has_visual()) {
    if (!this->visual().IsInitialized()) return false;
  }
  if (has_particle()) {
    if (!this->particle().IsInitialized()) return false;
  }
  if (has_clipping_node()) {
    if (!this->clipping_node().IsInitialized()) return false;
  }
  return true;
}

void Properties::Swap(Properties* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(node_, other->node_);
    std::swap(layer_color_, other->layer_color_);
    std::swap(layer_gradient_, other->layer_gradient_);
    std::swap(label_syatem_font_, other->label_syatem_font_);
    std::swap(label_ttf_, other->label_ttf_);
    std::swap(text_field_ttf_, other->text_field_ttf_);
    std::swap(edit_box_, other->edit_box_);
    std::swap(table_view_, other->table_view_);
    std::swap(rotate_plate_, other->rotate_plate_);
    std::swap(button_, other->button_);
    std::swap(sprite_, other->sprite_);
    std::swap(scale_9_sprite_, other->scale_9_sprite_);
    std::swap(progress_timer_, other->progress_timer_);
    std::swap(visual_, other->visual_);
    std::swap(particle_, other->particle_);
    std::swap(clipping_node_, other->clipping_node_);
    std::swap(socket_node_, other->socket_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Properties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Properties_descriptor_;
  metadata.reflection = Properties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Entity::kIdFieldNumber;
const int Entity::kExpandFieldNumber;
const int Entity::kSelectedFieldNumber;
const int Entity::kParentSelectedFieldNumber;
const int Entity::kParentIdFieldNumber;
const int Entity::kPrevIdFieldNumber;
const int Entity::kDestIdFieldNumber;
const int Entity::kDestParentIdFieldNumber;
const int Entity::kLuaNameDuplicatedFieldNumber;
const int Entity::kPropertiesFieldNumber;
const int Entity::kChildrenFieldNumber;
#endif  // !_MSC_VER

Entity::Entity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Entity::InitAsDefaultInstance() {
  properties_ = const_cast< ::maker::Properties*>(&::maker::Properties::default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entity::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  expand_ = true;
  selected_ = false;
  parent_selected_ = false;
  parent_id_ = GOOGLE_ULONGLONG(0);
  prev_id_ = GOOGLE_ULONGLONG(0);
  dest_id_ = GOOGLE_ULONGLONG(0);
  dest_parent_id_ = GOOGLE_ULONGLONG(0);
  lua_name_duplicated_ = false;
  properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity::~Entity() {
  SharedDtor();
}

void Entity::SharedDtor() {
  if (this != default_instance_) {
    delete properties_;
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New() const {
  return new Entity;
}

void Entity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    expand_ = true;
    selected_ = false;
    parent_selected_ = false;
    parent_id_ = GOOGLE_ULONGLONG(0);
    prev_id_ = GOOGLE_ULONGLONG(0);
    dest_id_ = GOOGLE_ULONGLONG(0);
    dest_parent_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lua_name_duplicated_ = false;
    if (has_properties()) {
      if (properties_ != NULL) properties_->::maker::Properties::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expand;
        break;
      }

      // required bool expand = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expand_)));
          set_has_expand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selected;
        break;
      }

      // optional bool selected = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
          set_has_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parent_selected;
        break;
      }

      // optional bool parent_selected = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parent_selected_)));
          set_has_parent_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parent_id;
        break;
      }

      // optional uint64 parent_id = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prev_id;
        break;
      }

      // required uint64 prev_id = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_id_)));
          set_has_prev_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dest_id;
        break;
      }

      // optional uint64 dest_id = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_id_)));
          set_has_dest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dest_parent_id;
        break;
      }

      // optional uint64 dest_parent_id = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_parent_id_)));
          set_has_dest_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lua_name_duplicated;
        break;
      }

      // optional bool lua_name_duplicated = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lua_name_duplicated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lua_name_duplicated_)));
          set_has_lua_name_duplicated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_properties;
        break;
      }

      // optional .maker.Properties properties = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_children;
        break;
      }

      // repeated .maker.Entity children = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required bool expand = 2 [default = true];
  if (has_expand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->expand(), output);
  }

  // optional bool selected = 3 [default = false];
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->selected(), output);
  }

  // optional bool parent_selected = 4 [default = false];
  if (has_parent_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->parent_selected(), output);
  }

  // optional uint64 parent_id = 6 [default = 0];
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->parent_id(), output);
  }

  // required uint64 prev_id = 7 [default = 0];
  if (has_prev_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->prev_id(), output);
  }

  // optional uint64 dest_id = 8 [default = 0];
  if (has_dest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dest_id(), output);
  }

  // optional uint64 dest_parent_id = 9 [default = 0];
  if (has_dest_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->dest_parent_id(), output);
  }

  // optional bool lua_name_duplicated = 10 [default = false];
  if (has_lua_name_duplicated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->lua_name_duplicated(), output);
  }

  // optional .maker.Properties properties = 20;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->properties(), output);
  }

  // repeated .maker.Entity children = 30;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required bool expand = 2 [default = true];
  if (has_expand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->expand(), target);
  }

  // optional bool selected = 3 [default = false];
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->selected(), target);
  }

  // optional bool parent_selected = 4 [default = false];
  if (has_parent_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->parent_selected(), target);
  }

  // optional uint64 parent_id = 6 [default = 0];
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->parent_id(), target);
  }

  // required uint64 prev_id = 7 [default = 0];
  if (has_prev_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->prev_id(), target);
  }

  // optional uint64 dest_id = 8 [default = 0];
  if (has_dest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dest_id(), target);
  }

  // optional uint64 dest_parent_id = 9 [default = 0];
  if (has_dest_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->dest_parent_id(), target);
  }

  // optional bool lua_name_duplicated = 10 [default = false];
  if (has_lua_name_duplicated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->lua_name_duplicated(), target);
  }

  // optional .maker.Properties properties = 20;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->properties(), target);
  }

  // repeated .maker.Entity children = 30;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Entity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required bool expand = 2 [default = true];
    if (has_expand()) {
      total_size += 1 + 1;
    }

    // optional bool selected = 3 [default = false];
    if (has_selected()) {
      total_size += 1 + 1;
    }

    // optional bool parent_selected = 4 [default = false];
    if (has_parent_selected()) {
      total_size += 1 + 1;
    }

    // optional uint64 parent_id = 6 [default = 0];
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parent_id());
    }

    // required uint64 prev_id = 7 [default = 0];
    if (has_prev_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_id());
    }

    // optional uint64 dest_id = 8 [default = 0];
    if (has_dest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_id());
    }

    // optional uint64 dest_parent_id = 9 [default = 0];
    if (has_dest_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_parent_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool lua_name_duplicated = 10 [default = false];
    if (has_lua_name_duplicated()) {
      total_size += 1 + 1;
    }

    // optional .maker.Properties properties = 20;
    if (has_properties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties());
    }

  }
  // repeated .maker.Entity children = 30;
  total_size += 2 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expand()) {
      set_expand(from.expand());
    }
    if (from.has_selected()) {
      set_selected(from.selected());
    }
    if (from.has_parent_selected()) {
      set_parent_selected(from.parent_selected());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_prev_id()) {
      set_prev_id(from.prev_id());
    }
    if (from.has_dest_id()) {
      set_dest_id(from.dest_id());
    }
    if (from.has_dest_parent_id()) {
      set_dest_parent_id(from.dest_parent_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lua_name_duplicated()) {
      set_lua_name_duplicated(from.lua_name_duplicated());
    }
    if (from.has_properties()) {
      mutable_properties()->::maker::Properties::MergeFrom(from.properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  if (has_properties()) {
    if (!this->properties().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void Entity::Swap(Entity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expand_, other->expand_);
    std::swap(selected_, other->selected_);
    std::swap(parent_selected_, other->parent_selected_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(prev_id_, other->prev_id_);
    std::swap(dest_id_, other->dest_id_);
    std::swap(dest_parent_id_, other->dest_parent_id_);
    std::swap(lua_name_duplicated_, other->lua_name_duplicated_);
    std::swap(properties_, other->properties_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD::kIdFieldNumber;
const int CMD::kTypeFieldNumber;
const int CMD::kWindowXFieldNumber;
const int CMD::kWindowYFieldNumber;
const int CMD::kEventIdFieldNumber;
const int CMD::kViewerEventIdFieldNumber;
const int CMD::kDescriptionFieldNumber;
const int CMD::kUpdateToCmdIdFieldNumber;
const int CMD::kDontAppendHistoryFieldNumber;
const int CMD::kCanMergePrevCmdFieldNumber;
const int CMD::kEntitiesFieldNumber;
const int CMD::kBackupEntitiesFieldNumber;
const int CMD::kEnumListFieldNumber;
const int CMD::kSocketNodeListFieldNumber;
#endif  // !_MSC_VER

CMD::CMD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD::InitAsDefaultInstance() {
}

CMD::CMD(const CMD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  window_x_ = 0;
  window_y_ = 0;
  event_id_ = 1;
  viewer_event_id_ = 1;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_to_cmd_id_ = GOOGLE_ULONGLONG(0);
  dont_append_history_ = false;
  can_merge_prev_cmd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD::~CMD() {
  SharedDtor();
}

void CMD::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_descriptor_;
}

const CMD& CMD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maker_2eproto();
  return *default_instance_;
}

CMD* CMD::default_instance_ = NULL;

CMD* CMD::New() const {
  return new CMD;
}

void CMD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    window_x_ = 0;
    window_y_ = 0;
    event_id_ = 1;
    viewer_event_id_ = 1;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    update_to_cmd_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dont_append_history_ = false;
    can_merge_prev_cmd_ = false;
  }
  entities_.Clear();
  backup_entities_.Clear();
  enum_list_.Clear();
  socket_node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .maker.CMD_TYPE type = 2 [default = CMD__Create];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::CMD_TYPE_IsValid(value)) {
            set_type(static_cast< ::maker::CMD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_window_x;
        break;
      }

      // optional int32 window_x = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_window_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_x_)));
          set_has_window_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_window_y;
        break;
      }

      // optional int32 window_y = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_window_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_y_)));
          set_has_window_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_event_id;
        break;
      }

      // optional .maker.EVENT_TO_TOOL event_id = 14 [default = EVENT__None];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::EVENT_TO_TOOL_IsValid(value)) {
            set_event_id(static_cast< ::maker::EVENT_TO_TOOL >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_viewer_event_id;
        break;
      }

      // optional .maker.EVENT_TO_VIEWER viewer_event_id = 15 [default = VIEWER_EVENT__None];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewer_event_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::maker::EVENT_TO_VIEWER_IsValid(value)) {
            set_viewer_event_id(static_cast< ::maker::EVENT_TO_VIEWER >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_description;
        break;
      }

      // optional string description = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_update_to_cmd_id;
        break;
      }

      // optional uint64 update_to_cmd_id = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_to_cmd_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_to_cmd_id_)));
          set_has_update_to_cmd_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_dont_append_history;
        break;
      }

      // optional bool dont_append_history = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dont_append_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dont_append_history_)));
          set_has_dont_append_history();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_can_merge_prev_cmd;
        break;
      }

      // optional bool can_merge_prev_cmd = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_merge_prev_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_merge_prev_cmd_)));
          set_has_can_merge_prev_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_entities;
        break;
      }

      // repeated .maker.Entity entities = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_entities;
        if (input->ExpectTag(170)) goto parse_backup_entities;
        break;
      }

      // repeated .maker.Entity backup_entities = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backup_entities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_backup_entities;
        if (input->ExpectTag(242)) goto parse_enum_list;
        break;
      }

      // repeated string enum_list = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enum_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enum_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enum_list(this->enum_list_size() - 1).data(),
            this->enum_list(this->enum_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_enum_list;
        if (input->ExpectTag(250)) goto parse_socket_node_list;
        break;
      }

      // repeated string socket_node_list = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_socket_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->socket_node_list(this->socket_node_list_size() - 1).data(),
            this->socket_node_list(this->socket_node_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_socket_node_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required .maker.CMD_TYPE type = 2 [default = CMD__Create];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 window_x = 10 [default = 0];
  if (has_window_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->window_x(), output);
  }

  // optional int32 window_y = 11 [default = 0];
  if (has_window_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->window_y(), output);
  }

  // optional .maker.EVENT_TO_TOOL event_id = 14 [default = EVENT__None];
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->event_id(), output);
  }

  // optional .maker.EVENT_TO_VIEWER viewer_event_id = 15 [default = VIEWER_EVENT__None];
  if (has_viewer_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->viewer_event_id(), output);
  }

  // optional string description = 16 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->description(), output);
  }

  // optional uint64 update_to_cmd_id = 17 [default = 0];
  if (has_update_to_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->update_to_cmd_id(), output);
  }

  // optional bool dont_append_history = 18 [default = false];
  if (has_dont_append_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->dont_append_history(), output);
  }

  // optional bool can_merge_prev_cmd = 19 [default = false];
  if (has_can_merge_prev_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->can_merge_prev_cmd(), output);
  }

  // repeated .maker.Entity entities = 20;
  for (int i = 0; i < this->entities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->entities(i), output);
  }

  // repeated .maker.Entity backup_entities = 21;
  for (int i = 0; i < this->backup_entities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->backup_entities(i), output);
  }

  // repeated string enum_list = 30;
  for (int i = 0; i < this->enum_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->enum_list(i).data(), this->enum_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->enum_list(i), output);
  }

  // repeated string socket_node_list = 31;
  for (int i = 0; i < this->socket_node_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->socket_node_list(i).data(), this->socket_node_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->socket_node_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required .maker.CMD_TYPE type = 2 [default = CMD__Create];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 window_x = 10 [default = 0];
  if (has_window_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->window_x(), target);
  }

  // optional int32 window_y = 11 [default = 0];
  if (has_window_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->window_y(), target);
  }

  // optional .maker.EVENT_TO_TOOL event_id = 14 [default = EVENT__None];
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->event_id(), target);
  }

  // optional .maker.EVENT_TO_VIEWER viewer_event_id = 15 [default = VIEWER_EVENT__None];
  if (has_viewer_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->viewer_event_id(), target);
  }

  // optional string description = 16 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->description(), target);
  }

  // optional uint64 update_to_cmd_id = 17 [default = 0];
  if (has_update_to_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->update_to_cmd_id(), target);
  }

  // optional bool dont_append_history = 18 [default = false];
  if (has_dont_append_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->dont_append_history(), target);
  }

  // optional bool can_merge_prev_cmd = 19 [default = false];
  if (has_can_merge_prev_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->can_merge_prev_cmd(), target);
  }

  // repeated .maker.Entity entities = 20;
  for (int i = 0; i < this->entities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->entities(i), target);
  }

  // repeated .maker.Entity backup_entities = 21;
  for (int i = 0; i < this->backup_entities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->backup_entities(i), target);
  }

  // repeated string enum_list = 30;
  for (int i = 0; i < this->enum_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enum_list(i).data(), this->enum_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(30, this->enum_list(i), target);
  }

  // repeated string socket_node_list = 31;
  for (int i = 0; i < this->socket_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_node_list(i).data(), this->socket_node_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(31, this->socket_node_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required .maker.CMD_TYPE type = 2 [default = CMD__Create];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 window_x = 10 [default = 0];
    if (has_window_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_x());
    }

    // optional int32 window_y = 11 [default = 0];
    if (has_window_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_y());
    }

    // optional .maker.EVENT_TO_TOOL event_id = 14 [default = EVENT__None];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional .maker.EVENT_TO_VIEWER viewer_event_id = 15 [default = VIEWER_EVENT__None];
    if (has_viewer_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->viewer_event_id());
    }

    // optional string description = 16 [default = ""];
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint64 update_to_cmd_id = 17 [default = 0];
    if (has_update_to_cmd_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_to_cmd_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool dont_append_history = 18 [default = false];
    if (has_dont_append_history()) {
      total_size += 2 + 1;
    }

    // optional bool can_merge_prev_cmd = 19 [default = false];
    if (has_can_merge_prev_cmd()) {
      total_size += 2 + 1;
    }

  }
  // repeated .maker.Entity entities = 20;
  total_size += 2 * this->entities_size();
  for (int i = 0; i < this->entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entities(i));
  }

  // repeated .maker.Entity backup_entities = 21;
  total_size += 2 * this->backup_entities_size();
  for (int i = 0; i < this->backup_entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backup_entities(i));
  }

  // repeated string enum_list = 30;
  total_size += 2 * this->enum_list_size();
  for (int i = 0; i < this->enum_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enum_list(i));
  }

  // repeated string socket_node_list = 31;
  total_size += 2 * this->socket_node_list_size();
  for (int i = 0; i < this->socket_node_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->socket_node_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD::MergeFrom(const CMD& from) {
  GOOGLE_CHECK_NE(&from, this);
  entities_.MergeFrom(from.entities_);
  backup_entities_.MergeFrom(from.backup_entities_);
  enum_list_.MergeFrom(from.enum_list_);
  socket_node_list_.MergeFrom(from.socket_node_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_window_x()) {
      set_window_x(from.window_x());
    }
    if (from.has_window_y()) {
      set_window_y(from.window_y());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_viewer_event_id()) {
      set_viewer_event_id(from.viewer_event_id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_update_to_cmd_id()) {
      set_update_to_cmd_id(from.update_to_cmd_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dont_append_history()) {
      set_dont_append_history(from.dont_append_history());
    }
    if (from.has_can_merge_prev_cmd()) {
      set_can_merge_prev_cmd(from.can_merge_prev_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD::CopyFrom(const CMD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < entities_size(); i++) {
    if (!this->entities(i).IsInitialized()) return false;
  }
  for (int i = 0; i < backup_entities_size(); i++) {
    if (!this->backup_entities(i).IsInitialized()) return false;
  }
  return true;
}

void CMD::Swap(CMD* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(window_x_, other->window_x_);
    std::swap(window_y_, other->window_y_);
    std::swap(event_id_, other->event_id_);
    std::swap(viewer_event_id_, other->viewer_event_id_);
    std::swap(description_, other->description_);
    std::swap(update_to_cmd_id_, other->update_to_cmd_id_);
    std::swap(dont_append_history_, other->dont_append_history_);
    std::swap(can_merge_prev_cmd_, other->can_merge_prev_cmd_);
    entities_.Swap(&other->entities_);
    backup_entities_.Swap(&other->backup_entities_);
    enum_list_.Swap(&other->enum_list_);
    socket_node_list_.Swap(&other->socket_node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_descriptor_;
  metadata.reflection = CMD_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace maker

// @@protoc_insertion_point(global_scope)
